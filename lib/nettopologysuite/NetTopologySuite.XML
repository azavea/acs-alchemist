<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetTopologySuite</name>
    </assembly>
    <members>
        <member name="T:GisSharpBlog.NetTopologySuite.Utilities.UniqueCoordinateArrayFilter">
            <summary>
            A <c>CoordinateFilter</c> that builds a set of <c>Coordinate</c>s.
            The set of coordinates contains no duplicate points.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.UniqueCoordinateArrayFilter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.UniqueCoordinateArrayFilter.Filter(GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="coord"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Utilities.UniqueCoordinateArrayFilter.Coordinates">
            <summary>
            Returns the gathered <c>Coordinate</c>s.
            </summary>
        </member>
        <member name="T:RTools_NTS.Util.VerbosityLevel">
            <summary>
            This enumerates verbosity levels.
            </summary>
        </member>
        <member name="F:RTools_NTS.Util.VerbosityLevel.Error">
            <summary>For error messages.</summary>
        </member>
        <member name="F:RTools_NTS.Util.VerbosityLevel.Warn">
            <summary>For warn messages.</summary>
        </member>
        <member name="F:RTools_NTS.Util.VerbosityLevel.Info">
            <summary>For info messages.</summary>
        </member>
        <member name="F:RTools_NTS.Util.VerbosityLevel.Debug">
            <summary>For debug messages.</summary>
        </member>
        <member name="T:Iesi_NTS.Collections.Generic.DictionarySet`1">
             <summary>
             <p><c>DictionarySet</c> is an abstract class that supports the creation of new <c>Set</c>
             types where the underlying data store is an <c>IDictionary</c> instance.</p> 
              
             <p>You can use any object that implements the <c>IDictionary</c> interface to hold set data.
             You can define your own, or you can use one of the objects provided in the Framework.   
             The type of <c>IDictionary</c> you choose will affect both the performance and the behavior
             of the <c>Set</c> using it. </p>
            
             <p>To make a <c>Set</c> typed based on your own <c>IDictionary</c>, simply derive a
             new class with a constructor that takes no parameters.  Some <c>Set</c> implmentations
             cannot be defined with a default constructor.  If this is the case for your class, 
             you will need to override <c>Clone()</c> as well.</p>
            
             <p>It is also standard practice that at least one of your constructors takes an <c>ICollection</c> or 
             an <c>ISet</c> as an argument.</p>
             </summary>
        </member>
        <member name="T:Iesi_NTS.Collections.Generic.Set`1">
            <summary><p>A collection that contains no duplicate elements.  This class models the mathematical
            <c>Set</c> abstraction, and is the base class for all other <c>Set</c> implementations.  
            The order of elements in a set is dependant on (a)the data-structure implementation, and 
            (b)the implementation of the various <c>Set</c> methods, and thus is not guaranteed.</p>
             
            <p>None of the <c>Set</c> implementations in this library are guranteed to be thread-safe
            in any way.</p>
            
            <p>The following table summarizes the binary operators that are supported by the <c>Set</c> class.</p>
            <list type="table">
            	<listheader>
            		<term>Operation</term>
            		<term>Description</term>
            		<term>Method</term>
            		<term>Operator</term>
            	</listheader>
            	<item>
            		<term>Union (OR)</term>
            		<term>Element included in result if it exists in either <c>A</c> OR <c>B</c>.</term>
            		<term><c>Union()</c></term>
            		<term><c>|</c></term>
            	</item>
            	<item>
            		<term>Intersection (AND)</term>
            		<term>Element included in result if it exists in both <c>A</c> AND <c>B</c>.</term>
            		<term><c>InterSect()</c></term>
            		<term><c>&amp;</c></term>
            	</item>
            	<item>
            		<term>Exclusive Or (XOR)</term>
            		<term>Element included in result if it exists in one, but not both, of <c>A</c> and <c>B</c>.</term>
            		<term><c>ExclusiveOr()</c></term>
            		<term><c>^</c></term>
            	</item>
            	<item>
            		<term>Minus (n/a)</term>
            		<term>Take all the elements in <c>A</c>.  Now, if any of them exist in <c>B</c>, remove
            		them.  Note that unlike the other operators, <c>A - B</c> is not the same as <c>B - A</c>.</term>
            		<term><c>Minus()</c></term>
            		<term><c>-</c></term>
            	</item>
            </list>
            </summary>
            <remarks>
                Set&lt;T&gt; supports operator between Set&lt;T&gt; and ISet, however, the ISet must contains only elements of type T
            </remarks>
        </member>
        <member name="T:Iesi_NTS.Collections.Generic.ISet`1">
            <summary>
            <p>A collection that contains no duplicate elements.  This interface models the mathematical
            <c>Set</c> abstraction.    
            The order of elements in a set is dependant on (a)the data-structure implementation, and 
            (b)the implementation of the various <c>Set</c> methods, and thus is not guaranteed.</p>
            
            <p>None of the <c>Set</c> implementations in this library are guranteed to be thread-safe
            in any way.</p>
            
            <p>The following table summarizes the binary operators that are supported by the <c>Set</c> class.</p>
            <list type="table">
            	<listheader>
            		<term>Operation</term>
            		<term>Description</term>
            		<term>Method</term>
            	</listheader>
            	<item>
            		<term>Union (OR)</term>
            		<term>Element included in result if it exists in either <c>A</c> OR <c>B</c>.</term>
            		<term><c>Union()</c></term>
            	</item>
            	<item>
            		<term>Intersection (AND)</term>
            		<term>Element included in result if it exists in both <c>A</c> AND <c>B</c>.</term>
            		<term><c>InterSect()</c></term>
            	</item>
            	<item>
            		<term>Exclusive Or (XOR)</term>
            		<term>Element included in result if it exists in one, but not both, of <c>A</c> and <c>B</c>.</term>
            		<term><c>ExclusiveOr()</c></term>
            	</item>
            	<item>
            		<term>Minus (n/a)</term>
            		<term>Take all the elements in <c>A</c>.  Now, if any of them exist in <c>B</c>, remove
            		them.  Note that unlike the other operators, <c>A - B</c> is not the same as <c>B - A</c>.</term>
            		<term><c>Minus()</c></term>
            	</item>
            </list>
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.ISet`1.Union(Iesi_NTS.Collections.Generic.ISet{`0})">
            <summary>
            Performs a "union" of the two sets, where all the elements
            in both sets are present.  That is, the element is included if it is in either <c>a</c> or <c>b</c>.
            Neither this set nor the input set are modified during the operation.  The return value
            is a <c>Clone()</c> of this set with the extra elements added in.
            </summary>
            <param name="a">A collection of elements.</param>
            <returns>A new <c>Set</c> containing the union of this <c>Set</c> with the specified collection.
            Neither of the input objects is modified by the union.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.ISet`1.Intersect(Iesi_NTS.Collections.Generic.ISet{`0})">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain.  That is, the element is included if it exists in
            both sets.  The <c>Intersect()</c> operation does not modify the input sets.  It returns
            a <c>Clone()</c> of this set with the appropriate elements removed.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>The intersection of this set with <c>a</c>.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.ISet`1.Minus(Iesi_NTS.Collections.Generic.ISet{`0})">
            <summary>
            Performs a "minus" of set <c>b</c> from set <c>a</c>.  This returns a set of all
            the elements in set <c>a</c>, removing the elements that are also in set <c>b</c>.
            The original sets are not modified during this operation.  The result set is a <c>Clone()</c>
            of this <c>Set</c> containing the elements from the operation.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>A set containing the elements from this set with the elements in <c>a</c> removed.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.ISet`1.ExclusiveOr(Iesi_NTS.Collections.Generic.ISet{`0})">
            <summary>
            Performs an "exclusive-or" of the two sets, keeping only the elements that
            are in one of the sets, but not in both.  The original sets are not modified
            during this operation.  The result set is a <c>Clone()</c> of this set containing
            the elements from the exclusive-or operation.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>A set containing the result of <c>a ^ b</c>.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.ISet`1.Contains(`0)">
            <summary>
            Returns <c>true</c> if this set contains the specified element.
            </summary>
            <param name="o">The element to look for.</param>
            <returns><c>true</c> if this set contains the specified element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.ISet`1.ContainsAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Returns <c>true</c> if the set contains all the elements in the specified collection.
            </summary>
            <param name="c">A collection of objects.</param>
            <returns><c>true</c> if the set contains all the elements in the specified collection, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.ISet`1.Add(`0)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="o">The object to add to the set.</param>
            <returns><c>true</c> is the object was added, <c>false</c> if it was already present.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.ISet`1.AddAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds all the elements in the specified collection to the set if they are not already present.
            </summary>
            <param name="c">A collection of objects to add to the set.</param>
            <returns><c>true</c> is the set changed as a result of this operation, <c>false</c> if not.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.ISet`1.Remove(`0)">
            <summary>
            Removes the specified element from the set.
            </summary>
            <param name="o">The element to be removed.</param>
            <returns><c>true</c> if the set contained the specified element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.ISet`1.RemoveAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Remove all the specified elements from this set, if they exist in this set.
            </summary>
            <param name="c">A collection of elements to remove.</param>
            <returns><c>true</c> if the set was modified as a result of this operation.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.ISet`1.RetainAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Retains only the elements in this set that are contained in the specified collection.
            </summary>
            <param name="c">Collection that defines the set of elements to be retained.</param>
            <returns><c>true</c> if this set changed as a result of this operation.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.ISet`1.Clear">
            <summary>
            Removes all objects from the set.
            </summary>
        </member>
        <member name="P:Iesi_NTS.Collections.Generic.ISet`1.IsEmpty">
            <summary>
            Returns <c>true</c> if this set contains no elements.
            </summary>
        </member>
        <member name="T:Iesi_NTS.Collections.ISet">
            <summary>
            <p>A collection that contains no duplicate elements.  This interface models the mathematical
            <c>Set</c> abstraction.    
            The order of elements in a set is dependant on (a)the data-structure implementation, and 
            (b)the implementation of the various <c>Set</c> methods, and thus is not guaranteed.</p>
            
            <p>None of the <c>Set</c> implementations in this library are guranteed to be thread-safe
            in any way unless wrapped in a <c>SynchronizedSet</c>.</p>
            
            <p>The following table summarizes the binary operators that are supported by the <c>Set</c> class.</p>
            <list type="table">
            	<listheader>
            		<term>Operation</term>
            		<term>Description</term>
            		<term>Method</term>
            	</listheader>
            	<item>
            		<term>Union (OR)</term>
            		<term>Element included in result if it exists in either <c>A</c> OR <c>B</c>.</term>
            		<term><c>Union()</c></term>
            	</item>
            	<item>
            		<term>Intersection (AND)</term>
            		<term>Element included in result if it exists in both <c>A</c> AND <c>B</c>.</term>
            		<term><c>InterSect()</c></term>
            	</item>
            	<item>
            		<term>Exclusive Or (XOR)</term>
            		<term>Element included in result if it exists in one, but not both, of <c>A</c> and <c>B</c>.</term>
            		<term><c>ExclusiveOr()</c></term>
            	</item>
            	<item>
            		<term>Minus (n/a)</term>
            		<term>Take all the elements in <c>A</c>.  Now, if any of them exist in <c>B</c>, remove
            		them.  Note that unlike the other operators, <c>A - B</c> is not the same as <c>B - A</c>.</term>
            		<term><c>Minus()</c></term>
            	</item>
            </list>
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.ISet.Union(Iesi_NTS.Collections.ISet)">
            <summary>
            Performs a "union" of the two sets, where all the elements
            in both sets are present.  That is, the element is included if it is in either <c>a</c> or <c>b</c>.
            Neither this set nor the input set are modified during the operation.  The return value
            is a <c>Clone()</c> of this set with the extra elements added in.
            </summary>
            <param name="a">A collection of elements.</param>
            <returns>A new <c>Set</c> containing the union of this <c>Set</c> with the specified collection.
            Neither of the input objects is modified by the union.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.ISet.Intersect(Iesi_NTS.Collections.ISet)">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain.  That is, the element is included if it exists in
            both sets.  The <c>Intersect()</c> operation does not modify the input sets.  It returns
            a <c>Clone()</c> of this set with the appropriate elements removed.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>The intersection of this set with <c>a</c>.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.ISet.Minus(Iesi_NTS.Collections.ISet)">
            <summary>
            Performs a "minus" of set <c>b</c> from set <c>a</c>.  This returns a set of all
            the elements in set <c>a</c>, removing the elements that are also in set <c>b</c>.
            The original sets are not modified during this operation.  The result set is a <c>Clone()</c>
            of this <c>Set</c> containing the elements from the operation.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>A set containing the elements from this set with the elements in <c>a</c> removed.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.ISet.ExclusiveOr(Iesi_NTS.Collections.ISet)">
            <summary>
            Performs an "exclusive-or" of the two sets, keeping only the elements that
            are in one of the sets, but not in both.  The original sets are not modified
            during this operation.  The result set is a <c>Clone()</c> of this set containing
            the elements from the exclusive-or operation.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>A set containing the result of <c>a ^ b</c>.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.ISet.Contains(System.Object)">
            <summary>
            Returns <c>true</c> if this set contains the specified element.
            </summary>
            <param name="o">The element to look for.</param>
            <returns><c>true</c> if this set contains the specified element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.ISet.ContainsAll(System.Collections.ICollection)">
            <summary>
            Returns <c>true</c> if the set contains all the elements in the specified collection.
            </summary>
            <param name="c">A collection of objects.</param>
            <returns><c>true</c> if the set contains all the elements in the specified collection, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.ISet.Add(System.Object)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="o">The object to add to the set.</param>
            <returns><c>true</c> is the object was added, <c>false</c> if it was already present.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.ISet.AddAll(System.Collections.ICollection)">
            <summary>
            Adds all the elements in the specified collection to the set if they are not already present.
            </summary>
            <param name="c">A collection of objects to add to the set.</param>
            <returns><c>true</c> is the set changed as a result of this operation, <c>false</c> if not.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.ISet.Remove(System.Object)">
            <summary>
            Removes the specified element from the set.
            </summary>
            <param name="o">The element to be removed.</param>
            <returns><c>true</c> if the set contained the specified element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.ISet.RemoveAll(System.Collections.ICollection)">
            <summary>
            Remove all the specified elements from this set, if they exist in this set.
            </summary>
            <param name="c">A collection of elements to remove.</param>
            <returns><c>true</c> if the set was modified as a result of this operation.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.ISet.RetainAll(System.Collections.ICollection)">
            <summary>
            Retains only the elements in this set that are contained in the specified collection.
            </summary>
            <param name="c">Collection that defines the set of elements to be retained.</param>
            <returns><c>true</c> if this set changed as a result of this operation.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.ISet.Clear">
            <summary>
            Removes all objects from the set.
            </summary>
        </member>
        <member name="P:Iesi_NTS.Collections.ISet.IsEmpty">
            <summary>
            Returns <c>true</c> if this set contains no elements.
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.Set`1.Union(Iesi_NTS.Collections.Generic.ISet{`0})">
            <summary>
            Performs a "union" of the two sets, where all the elements
            in both sets are present.  That is, the element is included if it is in either <c>a</c> or <c>b</c>.
            Neither this set nor the input set are modified during the operation.  The return value
            is a <c>Clone()</c> of this set with the extra elements added in.
            </summary>
            <param name="a">A collection of elements.</param>
            <returns>A new <c>Set</c> containing the union of this <c>Set</c> with the specified collection.
            Neither of the input objects is modified by the union.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.Set`1.Union(Iesi_NTS.Collections.Generic.ISet{`0},Iesi_NTS.Collections.Generic.ISet{`0})">
            <summary>
            Performs a "union" of two sets, where all the elements
            in both are present.  That is, the element is included if it is in either <c>a</c> or <c>b</c>.
            The return value is a <c>Clone()</c> of one of the sets (<c>a</c> if it is not <c>null</c>) with elements of the other set
            added in.  Neither of the input sets is modified by the operation.
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>A set containing the union of the input sets.  <c>null</c> if both sets are <c>null</c>.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.Set`1.op_BitwiseOr(Iesi_NTS.Collections.Generic.Set{`0},Iesi_NTS.Collections.Generic.Set{`0})">
            <summary>
            Performs a "union" of two sets, where all the elements
            in both are present.  That is, the element is included if it is in either <c>a</c> or <c>b</c>.
            The return value is a <c>Clone()</c> of one of the sets (<c>a</c> if it is not <c>null</c>) with elements of the other set
            added in.  Neither of the input sets is modified by the operation.
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>A set containing the union of the input sets.  <c>null</c> if both sets are <c>null</c>.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.Set`1.Intersect(Iesi_NTS.Collections.Generic.ISet{`0})">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain.  That is, the element is included if it exists in
            both sets.  The <c>Intersect()</c> operation does not modify the input sets.  It returns
            a <c>Clone()</c> of this set with the appropriate elements removed.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>The intersection of this set with <c>a</c>.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.Set`1.Intersect(Iesi_NTS.Collections.Generic.ISet{`0},Iesi_NTS.Collections.Generic.ISet{`0})">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain.  That is, the element is included only if it exists in
            both <c>a</c> and <c>b</c>.  Neither input object is modified by the operation.
            The result object is a <c>Clone()</c> of one of the input objects (<c>a</c> if it is not <c>null</c>) containing the
            elements from the intersect operation. 
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>The intersection of the two input sets.  <c>null</c> if both sets are <c>null</c>.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.Set`1.op_BitwiseAnd(Iesi_NTS.Collections.Generic.Set{`0},Iesi_NTS.Collections.Generic.Set{`0})">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain.  That is, the element is included only if it exists in
            both <c>a</c> and <c>b</c>.  Neither input object is modified by the operation.
            The result object is a <c>Clone()</c> of one of the input objects (<c>a</c> if it is not <c>null</c>) containing the
            elements from the intersect operation. 
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>The intersection of the two input sets.  <c>null</c> if both sets are <c>null</c>.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.Set`1.Minus(Iesi_NTS.Collections.Generic.ISet{`0})">
            <summary>
            Performs a "minus" of set <c>b</c> from set <c>a</c>.  This returns a set of all
            the elements in set <c>a</c>, removing the elements that are also in set <c>b</c>.
            The original sets are not modified during this operation.  The result set is a <c>Clone()</c>
            of this <c>Set</c> containing the elements from the operation.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>A set containing the elements from this set with the elements in <c>a</c> removed.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.Set`1.Minus(Iesi_NTS.Collections.Generic.ISet{`0},Iesi_NTS.Collections.Generic.ISet{`0})">
            <summary>
            Performs a "minus" of set <c>b</c> from set <c>a</c>.  This returns a set of all
            the elements in set <c>a</c>, removing the elements that are also in set <c>b</c>.
            The original sets are not modified during this operation.  The result set is a <c>Clone()</c>
            of set <c>a</c> containing the elements from the operation. 
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>A set containing <c>A - B</c> elements.  <c>null</c> if <c>a</c> is <c>null</c>.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.Set`1.op_Subtraction(Iesi_NTS.Collections.Generic.Set{`0},Iesi_NTS.Collections.Generic.Set{`0})">
            <summary>
            Performs a "minus" of set <c>b</c> from set <c>a</c>.  This returns a set of all
            the elements in set <c>a</c>, removing the elements that are also in set <c>b</c>.
            The original sets are not modified during this operation.  The result set is a <c>Clone()</c>
            of set <c>a</c> containing the elements from the operation. 
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>A set containing <c>A - B</c> elements.  <c>null</c> if <c>a</c> is <c>null</c>.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.Set`1.ExclusiveOr(Iesi_NTS.Collections.Generic.ISet{`0})">
            <summary>
            Performs an "exclusive-or" of the two sets, keeping only the elements that
            are in one of the sets, but not in both.  The original sets are not modified
            during this operation.  The result set is a <c>Clone()</c> of this set containing
            the elements from the exclusive-or operation.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>A set containing the result of <c>a ^ b</c>.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.Set`1.ExclusiveOr(Iesi_NTS.Collections.Generic.ISet{`0},Iesi_NTS.Collections.Generic.ISet{`0})">
            <summary>
            Performs an "exclusive-or" of the two sets, keeping only the elements that
            are in one of the sets, but not in both.  The original sets are not modified
            during this operation.  The result set is a <c>Clone()</c> of one of the sets
            (<c>a</c> if it is not <c>null</c>) containing
            the elements from the exclusive-or operation.
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>A set containing the result of <c>a ^ b</c>.  <c>null</c> if both sets are <c>null</c>.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.Set`1.op_ExclusiveOr(Iesi_NTS.Collections.Generic.Set{`0},Iesi_NTS.Collections.Generic.Set{`0})">
            <summary>
            Performs an "exclusive-or" of the two sets, keeping only the elements that
            are in one of the sets, but not in both.  The original sets are not modified
            during this operation.  The result set is a <c>Clone()</c> of one of the sets
            (<c>a</c> if it is not <c>null</c>) containing
            the elements from the exclusive-or operation.
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>A set containing the result of <c>a ^ b</c>.  <c>null</c> if both sets are <c>null</c>.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.Set`1.Add(`0)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="o">The object to add to the set.</param>		
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.Set`1.AddAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds all the elements in the specified collection to the set if they are not already present.
            </summary>
            <param name="c">A collection of objects to add to the set.</param>
            <returns><c>true</c> is the set changed as a result of this operation, <c>false</c> if not.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.Set`1.ContainsAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Returns <c>true</c> if the set contains all the elements in the specified collection.
            </summary>
            <param name="c">A collection of objects.</param>
            <returns><c>true</c> if the set contains all the elements in the specified collection, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.Set`1.Remove(`0)">
            <summary>
            Removes the specified element from the set.
            </summary>
            <param name="o">The element to be removed.</param>
            <returns><c>true</c> if the set contained the specified element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.Set`1.RemoveAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Remove all the specified elements from this set, if they exist in this set.
            </summary>
            <param name="c">A collection of elements to remove.</param>
            <returns><c>true</c> if the set was modified as
            a result of this operation.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.Set`1.RetainAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Retains only the elements in this set that are contained in the specified collection.
            </summary>
            <param name="c">Collection that defines the set of elements to be retained.</param>
            <returns><c>true</c> if this set changed as a result of this operation.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.Set`1.Clear">
            <summary>
            Removes all objects from the set.
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.Set`1.Contains(`0)">
            <summary>
            Returns <c>true</c> if this set contains the specified element.
            </summary>
            <param name="o">The element to look for.</param>
            <returns><c>true</c> if this set contains the specified element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.Set`1.Clone">
            <summary>
            Returns a clone of the <c>Set</c> instance.  This will work for derived <c>Set</c>
            classes if the derived class implements a constructor that takes no arguments.
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.Set`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements in the <c>Set</c> to an array.  The type of array needs
            to be compatible with the objects in the <c>Set</c>, obviously.
            </summary>
            <param name="array">An array that will be the target of the copy operation.</param>
            <param name="index">The zero-based index where copying will start.</param>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.Set`1.GetEnumerator">
            <summary>
            Gets an enumerator for the elements in the <c>Set</c>.
            </summary>
            <returns>An <c>IEnumerator</c> over the elements in the <c>Set</c>.</returns>
        </member>
        <member name="P:Iesi_NTS.Collections.Generic.Set`1.IsEmpty">
            <summary>
            Returns <c>true</c> if this set contains no elements.
            </summary>
        </member>
        <member name="P:Iesi_NTS.Collections.Generic.Set`1.Count">
            <summary>
            The number of elements currently contained in this collection.
            </summary>
        </member>
        <member name="P:Iesi_NTS.Collections.Generic.Set`1.IsSynchronized">
            <summary>
            Returns <c>true</c> if the <c>Set</c> is synchronized across threads.  Note that
            enumeration is inherently not thread-safe.  Use the <c>SyncRoot</c> to lock the
            object during enumeration.
            </summary>
        </member>
        <member name="P:Iesi_NTS.Collections.Generic.Set`1.SyncRoot">
            <summary>
            An object that can be used to synchronize this collection to make it thread-safe.
            When implementing this, if your object uses a base object, like an <c>IDictionary</c>,
            or anything that has a <c>SyncRoot</c>, return that object instead of "<c>this</c>".
            </summary>
        </member>
        <member name="P:Iesi_NTS.Collections.Generic.Set`1.IsReadOnly">
            <summary>
            Returns whether this collection is readonly.
            </summary>
        </member>
        <member name="F:Iesi_NTS.Collections.Generic.DictionarySet`1.InternalDictionary">
            <summary>
            Provides the storage for elements in the <c>Set</c>, stored as the key-set
            of the <c>IDictionary</c> object.  Set this object in the constructor
            if you create your own <c>Set</c> class.  
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.DictionarySet`1.Add(`0)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="o">The object to add to the set.</param>
            <returns><c>true</c> is the object was added, <c>false</c> if it was already present.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.DictionarySet`1.AddAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds all the elements in the specified collection to the set if they are not already present.
            </summary>
            <param name="c">A collection of objects to add to the set.</param>
            <returns><c>true</c> is the set changed as a result of this operation, <c>false</c> if not.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.DictionarySet`1.Clear">
            <summary>
            Removes all objects from the set.
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.DictionarySet`1.Contains(`0)">
            <summary>
            Returns <c>true</c> if this set contains the specified element.
            </summary>
            <param name="o">The element to look for.</param>
            <returns><c>true</c> if this set contains the specified element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.DictionarySet`1.ContainsAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Returns <c>true</c> if the set contains all the elements in the specified collection.
            </summary>
            <param name="c">A collection of objects.</param>
            <returns><c>true</c> if the set contains all the elements in the specified collection, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.DictionarySet`1.Remove(`0)">
            <summary>
            Removes the specified element from the set.
            </summary>
            <param name="o">The element to be removed.</param>
            <returns><c>true</c> if the set contained the specified element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.DictionarySet`1.RemoveAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Remove all the specified elements from this set, if they exist in this set.
            </summary>
            <param name="c">A collection of elements to remove.</param>
            <returns><c>true</c> if the set was modified as a result of this operation.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.DictionarySet`1.RetainAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Retains only the elements in this set that are contained in the specified collection.
            </summary>
            <param name="c">Collection that defines the set of elements to be retained.</param>
            <returns><c>true</c> if this set changed as a result of this operation.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.DictionarySet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements in the <c>Set</c> to an array.  The type of array needs
            to be compatible with the objects in the <c>Set</c>, obviously.
            </summary>
            <param name="array">An array that will be the target of the copy operation.</param>
            <param name="index">The zero-based index where copying will start.</param>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.DictionarySet`1.GetEnumerator">
            <summary>
            Gets an enumerator for the elements in the <c>Set</c>.
            </summary>
            <returns>An <c>IEnumerator</c> over the elements in the <c>Set</c>.</returns>
        </member>
        <member name="P:Iesi_NTS.Collections.Generic.DictionarySet`1.Placeholder">
            <summary>
            The placeholder object used as the value for the <c>IDictionary</c> instance.
            </summary>
            <remarks>
            There is a single instance of this object globally, used for all <c>Sets</c>.
            </remarks>
        </member>
        <member name="P:Iesi_NTS.Collections.Generic.DictionarySet`1.IsEmpty">
            <summary>
            Returns <c>true</c> if this set contains no elements.
            </summary>
        </member>
        <member name="P:Iesi_NTS.Collections.Generic.DictionarySet`1.Count">
            <summary>
            The number of elements contained in this collection.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Utilities.Degrees">
            <summary>
            Converts degrees to radians.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.Degrees.ToRadians(System.Double)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="degrees">The angle in degrees.</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Valid.QuadtreeNestedRingTester">
            <summary>
            Tests whether any of a set of <c>LinearRing</c>s are
            nested inside another ring in the set, using a <c>Quadtree</c>
            index to speed up the comparisons.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.QuadtreeNestedRingTester.#ctor(GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.QuadtreeNestedRingTester.Add(GeoAPI.Geometries.ILinearRing)">
            <summary>
            
            </summary>
            <param name="ring"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.QuadtreeNestedRingTester.IsNonNested">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.QuadtreeNestedRingTester.BuildQuadtree">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Valid.QuadtreeNestedRingTester.NestedPoint">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Relate.EdgeEndBundle">
            <summary>
            A collection of EdgeStubs which obey the following invariant:
            They originate at the same node and have the same direction.
            Contains all <c>EdgeEnd</c>s which start at the same point and are parallel.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd">
            <summary> 
            Models the end of an edge incident on a node.
            EdgeEnds have a direction
            determined by the direction of the ray from the initial
            point to the next point.
            EdgeEnds are IComparable under the ordering
            "a has a greater angle with the x-axis than b".
            This ordering is used to sort EdgeEnds around a node.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd.edge">
            <summary>
            The parent edge of this edge end.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd.label">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd.#ctor(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge)">
            <summary>
            
            </summary>
            <param name="edge"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd.#ctor(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <param name="p0"></param>
            <param name="p1"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd.#ctor(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GisSharpBlog.NetTopologySuite.GeometriesGraph.Label)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="label"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd.Init(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd.CompareTo(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd.CompareDirection(GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd)">
            <summary> 
            Implements the total order relation:
            a has a greater angle with the positive x-axis than b.
            Using the obvious algorithm of simply computing the angle is not robust,
            since the angle calculation is obviously susceptible to roundoff.
            A robust algorithm is:
            - first compare the quadrant.  If the quadrants
            are different, it it trivial to determine which vector is "greater".
            - if the vectors lie in the same quadrant, the computeOrientation function
            can be used to decide the relative orientation of the vectors.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd.ComputeLabel">
            <summary>
            Subclasses should override this if they are using labels
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd.Write(System.IO.StreamWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd.Edge">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd.Label">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd.Coordinate">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd.DirectedCoordinate">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd.Quadrant">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd.Dx">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd.Dy">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd.Node">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.EdgeEndBundle.#ctor(GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.EdgeEndBundle.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.EdgeEndBundle.Insert(GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.EdgeEndBundle.ComputeLabel">
            <summary>
            This computes the overall edge label for the set of
            edges in this EdgeStubBundle.  It essentially merges
            the ON and side labels for each edge. 
            These labels must be compatible
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.EdgeEndBundle.ComputeLabelOn(System.Int32)">
            <summary>
            Compute the overall ON location for the list of EdgeStubs.
            (This is essentially equivalent to computing the self-overlay of a single Geometry)
            edgeStubs can be either on the boundary (eg Polygon edge)
            OR in the interior (e.g. segment of a LineString)
            of their parent Geometry.
            In addition, GeometryCollections use the mod-2 rule to determine
            whether a segment is on the boundary or not.
            Finally, in GeometryCollections it can still occur that an edge is both
            on the boundary and in the interior (e.g. a LineString segment lying on
            top of a Polygon edge.) In this case as usual the Boundary is given precendence.
            These observations result in the following rules for computing the ON location:
             if there are an odd number of Bdy edges, the attribute is Bdy
             if there are an even number >= 2 of Bdy edges, the attribute is Int
             if there are any Int edges, the attribute is Int
             otherwise, the attribute is Null.
            </summary>
            <param name="geomIndex"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.EdgeEndBundle.ComputeLabelSides(System.Int32)">
            <summary>
            Compute the labelling for each side
            </summary>
            <param name="geomIndex"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.EdgeEndBundle.ComputeLabelSide(System.Int32,GisSharpBlog.NetTopologySuite.GeometriesGraph.Positions)">
            <summary>
            To compute the summary label for a side, the algorithm is:
            FOR all edges
            IF any edge's location is Interior for the side, side location = Interior
            ELSE IF there is at least one Exterior attribute, side location = Exterior
            ELSE  side location = Null
            Note that it is possible for two sides to have apparently contradictory information
            i.e. one edge side may indicate that it is in the interior of a point, while
            another edge side may indicate the exterior of the same point.  This is
            not an incompatibility - GeometryCollections may contain two Polygons that touch
            along an edge.  This is the reason for Interior-primacy rule above - it
            results in the summary label having the Geometry interior on both sides.
            </summary>
            <param name="geomIndex"></param>
            <param name="side"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.EdgeEndBundle.UpdateIM(GeoAPI.Geometries.IntersectionMatrix)">
            <summary>
            Update the IM with the contribution for the computed label for the EdgeStubs.
            </summary>
            <param name="im"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.EdgeEndBundle.Write(System.IO.StreamWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Relate.EdgeEndBundle.EdgeEnds">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Buffer.RightmostEdgeFinder">
            <summary>
            A RightmostEdgeFinder find the DirectedEdge in a list which has the highest coordinate,
            and which is oriented L to R at that point. (I.e. the right side is on the RHS of the edge.)
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.RightmostEdgeFinder.#ctor">
            <summary>
            A RightmostEdgeFinder finds the DirectedEdge with the rightmost coordinate.
            The DirectedEdge returned is guaranteed to have the R of the world on its RHS.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.RightmostEdgeFinder.FindEdge(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="dirEdgeList"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.RightmostEdgeFinder.FindRightmostEdgeAtNode">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.RightmostEdgeFinder.FindRightmostEdgeAtVertex">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.RightmostEdgeFinder.CheckForRightmostCoordinate(GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge)">
            <summary>
            
            </summary>
            <param name="de"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.RightmostEdgeFinder.GetRightmostSide(GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge,System.Int32)">
            <summary>
            
            </summary>
            <param name="de"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.RightmostEdgeFinder.GetRightmostSideOfSegment(GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge,System.Int32)">
            <summary>
            
            </summary>
            <param name="de"></param>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Buffer.RightmostEdgeFinder.Edge">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Buffer.RightmostEdgeFinder.Coordinate">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator">
            <summary>
            An iterator over the components and coordinates of a linear geometry
            (<see cref="T:GisSharpBlog.NetTopologySuite.Geometries.LineString"/>s and <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.MultiLineString"/>s.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.SegmentEndVertexIndex(GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Creates an iterator initialized to the start of a linear <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/>.
            </summary>
            <param name="linear">The linear geometry to iterate over.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.#ctor(GeoAPI.Geometries.IGeometry,GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation)">
            <summary>
            Creates an iterator starting at a <see cref="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation"/> on a linear <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/>.
            </summary>
            <param name="linear">The linear geometry to iterate over.</param>
            <param name="start">The location to start at.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.#ctor(GeoAPI.Geometries.IGeometry,System.Int32,System.Int32)">
            <summary>
            Creates an iterator starting at
            a component and vertex in a linear <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/>.
            </summary>
            <param name="linear">The linear geometry to iterate over.</param>
            <param name="componentIndex">The component to start at.</param>
            <param name="vertexIndex">The vertex to start at.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.LoadCurrentLine">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.HasNext">
            <summary>
            Evaluate if the iterator could step over.
            Does not perform the step at all.
            </summary>
            <returns></returns>
            <returns><c>true</c> if there are more vertices to scan.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.Next">
            <summary>
            Jump to the next element of the iteration.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.MoveNext">
            <summary>
            Tests whether there are any vertices left to iterator over.
            If <c>true</c>, then moves the iterator ahead to the next vertex and (possibly) linear component,
            so that <see cref="P:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.Current"/> exposes the elements.
            </summary>
            <returns><c>true</c> if there are more vertices to scan.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.Reset">
            <summary>
            Sets the enumerator to its initial position, 
            which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created. 
            </exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, 
            releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="dispose"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used 
            to iterate through the collection.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator (of <see cref="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.LinearElement"/>elements) 
            that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object 
            that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.IsEndOfLine">
            <summary>
            Checks whether the iterator cursor is pointing to the
            endpoint of a linestring.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.ComponentIndex">
            <summary>
            The component index of the vertex the iterator is currently at.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.VertexIndex">
            <summary>
            The vertex index of the vertex the iterator is currently at.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.Line">
            <summary>
            Gets the <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.LineString"/> component the iterator is current at.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.SegmentStart">
            <summary>
            Gets the first <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/> of the current segment
            (the coordinate of the current vertex).
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.SegmentEnd">
            <summary>
            Gets the second <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/> of the current segment
            (the coordinate of the next vertex).
            If the iterator is at the end of a line, <c>null</c> is returned.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.Current">
            <summary>
            Gets the <see cref="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.LinearElement">element</see> in the collection 
            at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The <see cref="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.LinearElement">element</see> in the collection 
            at the current position of the enumerator.
            </returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the <see cref="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.LinearElement">element</see> in the collection 
            at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The <see cref="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.LinearElement">element</see> in the collection 
            at the current position of the enumerator.
            </returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.LinearElement">
            <summary>
            A class that exposes <see cref="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator"/> elements.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.LinearElement.#ctor(GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:LinearElement"/> class.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.LinearElement.ComponentIndex">
            <summary>
            The component index of the vertex the iterator is currently at.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.LinearElement.VertexIndex">
            <summary>
            The vertex index of the vertex the iterator is currently at.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.LinearElement.Line">
            <summary>
            Gets the <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.LineString"/> component the iterator is current at.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.LinearElement.IsEndOfLine">
            <summary>
            Checks whether the iterator cursor is pointing to the
            endpoint of a linestring.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.LinearElement.SegmentStart">
            <summary>
            Gets the first <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/> of the current segment
            (the coordinate of the current vertex).
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearIterator.LinearElement.SegmentEnd">
            <summary>
            Gets the second <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/> of the current segment
            (the coordinate of the next vertex).
            If the iterator is at the end of a line, <c>null</c> is returned.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.ShapeGeometryType">
            <summary>
            Feature type enumeration
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.ShapeGeometryType.NullShape">
            <summary>
            Null Shape
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.ShapeGeometryType.Point">
            <summary>
            Point
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.ShapeGeometryType.LineString">
            <summary>
            LineString
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.ShapeGeometryType.Polygon">
            <summary>
            Polygon
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.ShapeGeometryType.MultiPoint">
            <summary>
            MultiPoint
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.ShapeGeometryType.PointZM">
            <summary>
            PointMZ
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.ShapeGeometryType.LineStringZM">
            <summary>
            PolyLineMZ
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.ShapeGeometryType.PolygonZM">
            <summary>
            PolygonMZ
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.ShapeGeometryType.MultiPointZM">
            <summary>
            MultiPointMZ
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.ShapeGeometryType.PointM">
            <summary>
            PointM
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.ShapeGeometryType.LineStringM">
            <summary>
            LineStringM
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.ShapeGeometryType.PolygonM">
            <summary>
            PolygonM
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.ShapeGeometryType.MultiPointM">
            <summary>
            MultiPointM
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.ShapeGeometryType.MultiPatch">
            <summary>
            MultiPatch
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.ShapeGeometryType.PointZ">
            <summary>
            PointZ
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.ShapeGeometryType.LineStringZ">
            <summary>
            LineStringZ
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.ShapeGeometryType.PolygonZ">
            <summary>
            PolygonZ
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.ShapeGeometryType.MultiPointZ">
            <summary>
            MultiPointZ
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.PostGisReader">
            <summary>
            Converts a PostGIS binary data to a <c>Geometry</c>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisReader.#ctor">
            <summary>
            Initialize reader with a standard <c>GeometryFactory</c>. 
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisReader.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Initialize reader with the given <c>GeometryFactory</c>.
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisReader.Read(System.Byte[])">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisReader.Read(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisReader.Read(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisReader.ReadCoordinate(System.IO.BinaryReader,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisReader.ReadPoint(System.IO.BinaryReader,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisReader.ReadCoordinateArray(System.IO.BinaryReader,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisReader.ReadLineString(System.IO.BinaryReader,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisReader.ReadLinearRing(System.IO.BinaryReader,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisReader.ReadPolygon(System.IO.BinaryReader,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisReader.ReadGeometryArray(System.IO.BinaryReader,GeoAPI.Geometries.IGeometry[])">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="container"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisReader.ReadMultiPoint(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisReader.ReadMultiLineString(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisReader.ReadMultiPolygon(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisReader.ReadGeometryCollection(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.PostGisReader.Factory">
            <summary>
            <c>Geometry</c> builder.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.ShapefileWriter">
            <summary>
            This class writes ESRI Shapefiles.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.IO.ShapefileWriter"/> class 
            using <see cref="F:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.Default"/> with a <see cref="F:GeoAPI.Geometries.PrecisionModels.Floating"/> precision.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileWriter.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.IO.ShapefileWriter"/> class
            with the given <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory"/>.
            </summary>
            <param name="geometryFactory"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileWriter.Write(System.String,GeoAPI.Geometries.IGeometryCollection)">
            <summary>
            Writes a shapefile to disk.
            </summary>
            <remarks>
            Assumes the type given for the first geometry is the same for all subsequent geometries.
            For example, is, if the first Geometry is a Multi-polygon/ Polygon, the subsequent geometies are
            Muli-polygon/ polygon and not lines or points.
            The dbase file for the corresponding shapefile contains one column called row. It contains 
            the row number.
            </remarks>
            <param name="filename">The filename to write to (minus the .shp extension).</param>
            <param name="geometryCollection">The GeometryCollection to write.</param>		
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileWriter.WriteDummyDbf(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <param name="recordCount"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.ShapefileReader">
            <summary>
            This class represnts an ESRI Shapefile.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileReader.#ctor(System.String,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Initializes a new instance of the Shapefile class with the given parameters.
            </summary>
            <param name="filename">The filename of the shape file to read (with .shp).</param>
            <param name="geometryFactory">The GeometryFactory to use when creating Geometry objects.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Shapefile class with the given parameter 
            and a standard GeometryFactory.
            </summary>
            <param name="filename">The filename of the shape file to read (with .shp).</param>        
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileReader.ReadAll">
            <summary>
            Reads the shapefile and returns a GeometryCollection representing all the records in the shapefile.
            </summary>
            <returns>GeometryCollection representing every record in the shapefile.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileReader.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object 
            that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.ShapefileReader.Header">
            <summary>
            Gets the bounds of the shape file.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.ShapefileReader.ShapefileEnumerator">
            <summary>
            Summary description for ShapefileEnumerator.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileReader.ShapefileEnumerator.#ctor(GisSharpBlog.NetTopologySuite.IO.ShapefileReader)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.IO.ShapefileReader.ShapefileEnumerator"/> class.
            </summary>
            <param name="shapefile"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileReader.ShapefileEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is 
            before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created. 
            </exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileReader.ShapefileEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; 
            false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileReader.ShapefileEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, 
            releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.ShapefileReader.ShapefileEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value></value>
            <returns>The current element in the collection.</returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element 
            of the collection or after the last element. 
            </exception>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.ShapefileHeader">
            <summary>
            Class that represents a shape file header record.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileHeader.#ctor(GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryReader)">
            <summary>
            Initializes a new instance of the ShapefileHeader class with values read in from the stream.
            </summary>
            <remarks>Reads the header information from the stream.</remarks>
            <param name="shpBinaryReader">BigEndianBinaryReader stream to the shapefile.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileHeader.#ctor">
            <summary>
            Initializes a new instance of the ShapefileHeader class.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileHeader.Write(GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryWriter)">
            <summary>
            Writes a shapefile header to the given stream;
            </summary>
            <param name="file">The binary writer to use.</param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.ShapefileHeader.Bounds">
            <summary>
            Gets and sets the bounds of the shape file.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.ShapefileHeader.ShapeType">
            <summary>
            Gets and sets the shape file type i.e. polygon, point etc...
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.ShapefileHeader.Version">
            <summary>
            Gets and sets the shapefile version.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.ShapefileHeader.FileLength">
            <summary>
            Gets and sets the length of the shape file in words.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.Handlers.PolygonHandler">
            <summary>
            Converts a Shapefile point to a OGIS Polygon.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.Handlers.ShapeHandler">
            <summary>
            Abstract class that defines the interfaces that other 'Shape' handlers must implement.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.ShapeHandler.Read(GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryReader,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Reads a stream and converts the shapefile record to an equilivent geometry object.
            </summary>
            <param name="file">The stream to read.</param>
            <param name="geometryFactory">The geometry factory to use when making the object.</param>
            <returns>The Geometry object that represents the shape file record.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.ShapeHandler.Write(GeoAPI.Geometries.IGeometry,System.IO.BinaryWriter,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Writes to the given stream the equilivent shape file record given a Geometry object.
            </summary>
            <param name="geometry">The geometry object to write.</param>
            <param name="file">The stream to write to.</param>
            <param name="geometryFactory">The geometry factory to use.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.ShapeHandler.GetLength(GeoAPI.Geometries.IGeometry)">
            <summary>
            Gets the length in bytes the Geometry will need when written as a shape file record.
            </summary>
            <param name="geometry">The Geometry object to use.</param>
            <returns>The length in 16bit words the Geometry will use when represented as a shape file record.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.ShapeHandler.GetEnvelopeExternal(GeoAPI.Geometries.IEnvelope)">
            <summary>
            
            </summary>
            <param name="envelope"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.ShapeHandler.GetEnvelopeExternal(GeoAPI.Geometries.IPrecisionModel,GeoAPI.Geometries.IEnvelope)">
            <summary>
            Get Envelope in external coordinates.
            </summary>
            <param name="precisionModel"></param>
            <param name="envelope"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.ShapeHandler.HasZValue">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.ShapeHandler.HasZValue(GisSharpBlog.NetTopologySuite.IO.ShapeGeometryType)">
            <summary>
            
            </summary>
            <param name="shapeType"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.ShapeHandler.HasMValue">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.ShapeHandler.HasMValue(GisSharpBlog.NetTopologySuite.IO.ShapeGeometryType)">
            <summary>
            
            </summary>
            <param name="shapeType"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.ShapeHandler.IsPoint">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.ShapeHandler.IsPoint(GisSharpBlog.NetTopologySuite.IO.ShapeGeometryType)">
            <summary>
            
            </summary>
            <param name="shapeType"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.ShapeHandler.IsMultiPoint">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.ShapeHandler.IsMultiPoint(GisSharpBlog.NetTopologySuite.IO.ShapeGeometryType)">
            <summary>
            
            </summary>
            <param name="shapeType"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.ShapeHandler.IsLineString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.ShapeHandler.IsLineString(GisSharpBlog.NetTopologySuite.IO.ShapeGeometryType)">
            <summary>
            
            </summary>
            <param name="shapeType"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.ShapeHandler.IsPolygon">
            <summary>
            
            </summary>        
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.ShapeHandler.IsPolygon(GisSharpBlog.NetTopologySuite.IO.ShapeGeometryType)">
            <summary>
            
            </summary>
            <param name="shapeType"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.ShapeHandler.GetZValue(GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryReader,System.Collections.Generic.IDictionary{GisSharpBlog.NetTopologySuite.IO.ShapeGeometryType,System.Double})">
            <summary>
            
            </summary>
            <param name="file"></param>
            <param name="data"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.ShapeHandler.GetMValue(GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryReader,System.Collections.Generic.IDictionary{GisSharpBlog.NetTopologySuite.IO.ShapeGeometryType,System.Double})">
            <summary>
            
            </summary>
            <param name="file"></param>
            <param name="data"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.ShapeHandler.GrabZMValues(GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryReader)">
            <summary>
            
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.ShapeHandler.GetBoundingBoxLength">
            <summary>
            
            </summary>        
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.Handlers.ShapeHandler.ShapeType">
            <summary>
            Returns the ShapeType the handler handles.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.PolygonHandler.Read(GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryReader,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Reads a stream and converts the shapefile record to an equilivent geometry object.
            </summary>
            <param name="file">The stream to read.</param>
            <param name="geometryFactory">The geometry factory to use when making the object.</param>
            <returns>The Geometry object that represents the shape file record.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.PolygonHandler.Write(GeoAPI.Geometries.IGeometry,System.IO.BinaryWriter,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Writes a Geometry to the given binary wirter.
            </summary>
            <param name="geometry">The geometry to write.</param>
            <param name="file">The file stream to write to.</param>
            <param name="geometryFactory">The geometry factory to use.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.PolygonHandler.WriteCoords(GisSharpBlog.NetTopologySuite.Geometries.CoordinateList,System.IO.BinaryWriter,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            
            </summary>
            <param name="points"></param>
            <param name="file"></param>
            <param name="geometryFactory"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.PolygonHandler.GetLength(GeoAPI.Geometries.IGeometry)">
            <summary>
            Gets the length of the shapefile record using the geometry passed in.
            </summary>
            <param name="geometry">The geometry to get the length for.</param>
            <returns>The length in bytes this geometry is going to use when written out as a shapefile record.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.PolygonHandler.GetNumParts(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.PolygonHandler.PointInList(GeoAPI.Geometries.ICoordinate,GisSharpBlog.NetTopologySuite.Geometries.CoordinateList)">
            <summary>
            Test if a point is in a list of coordinates.
            </summary>
            <param name="testPoint">TestPoint the point to test for.</param>
            <param name="pointList">PointList the list of points to look through.</param>
            <returns>true if testPoint is a point in the pointList list.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.Handlers.PolygonHandler.ShapeType">
            <summary>
            The ShapeType this handler handles.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.DbaseFieldDescriptor">
            <summary>
            Class for holding the information assicated with a dbase field.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFieldDescriptor.GetDbaseType(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFieldDescriptor.ShapeField">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFieldDescriptor.IdField">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.DbaseFieldDescriptor.Name">
            <summary>
            Field Name.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.DbaseFieldDescriptor.DbaseType">
            <summary>
            Field Type (C N L D or M).
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.DbaseFieldDescriptor.DataAddress">
            <summary>
            Field Data Address offset from the start of the record.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.DbaseFieldDescriptor.Length">
            <summary>
            Length of the data in bytes.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.DbaseFieldDescriptor.DecimalCount">
            <summary>
            Field decimal count in Binary, indicating where the decimal is.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.DbaseFieldDescriptor.Type">
            <summary>
            Returns the equivalent CLR type for this field.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineIndex">
            <summary>
            A sweepline implements a sorted index on a set of intervals.
            It is used to compute all overlaps between the interval in the index.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineIndex.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineIndex.Add(GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineInterval)">
            <summary>
            
            </summary>
            <param name="sweepInt"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineIndex.BuildIndex">
            <summary>
            Because Delete Events have a link to their corresponding Insert event,
            it is possible to compute exactly the range of events which must be
            compared to a given Insert event object.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineIndex.ComputeOverlaps(GisSharpBlog.NetTopologySuite.Index.Sweepline.ISweepLineOverlapAction)">
            <summary>
            
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineIndex.ProcessOverlaps(System.Int32,System.Int32,GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineInterval,GisSharpBlog.NetTopologySuite.Index.Sweepline.ISweepLineOverlapAction)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="s0"></param>
            <param name="action"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Bintree.Key">
            <summary>
            A Key is a unique identifier for a node in a tree.
            It contains a lower-left point and a level number. The level number
            is the power of two for the size of the node envelope.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Key.ComputeLevel(GisSharpBlog.NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Key.#ctor(GisSharpBlog.NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Key.ComputeKey(GisSharpBlog.NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            Return a square envelope containing the argument envelope,
            whose extent is a power of two and which is based at a power of 2.
            </summary>
            <param name="itemInterval"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Key.ComputeInterval(System.Int32,GisSharpBlog.NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            
            </summary>
            <param name="level"></param>
            <param name="itemInterval"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Bintree.Key.Point">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Bintree.Key.Level">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Bintree.Key.Interval">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.Label">
            <summary> 
            A <c>Label</c> indicates the topological relationship of a component
            of a topology graph to a given <c>Geometry</c>.
            This class supports labels for relationships to two <c>Geometry</c>s,
            which is sufficient for algorithms for binary operations.
            Topology graphs support the concept of labeling nodes and edges in the graph.
            The label of a node or edge specifies its topological relationship to one or
            more geometries.  (In fact, since NTS operations have only two arguments labels
            are required for only two geometries).  A label for a node or edge has one or
            two elements, depending on whether the node or edge occurs in one or both of the
            input <c>Geometry</c>s.  Elements contain attributes which categorize the
            topological location of the node or edge relative to the parent
            <c>Geometry</c>; that is, whether the node or edge is in the interior,
            boundary or exterior of the <c>Geometry</c>.  Attributes have a value
            from the set <c>{Interior, Boundary, Exterior}</c>.  In a node each
            element has a single attribute <c>On</c>. For an edge each element has a
            triplet of attributes <c>Left, On, Right</c>.
            It is up to the client code to associate the 0 and 1 <c>TopologyLocation</c>s
            with specific geometries.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Label.ToLineLabel(GisSharpBlog.NetTopologySuite.GeometriesGraph.Label)">
            <summary>
            Converts a Label to a Line label (that is, one with no side Locations).
            </summary>
            <param name="label">Label to convert.</param>
            <returns>Label as Line label.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Label.#ctor(GeoAPI.Geometries.Locations)">
            <summary>
            Construct a Label with a single location for both Geometries.
            Initialize the locations to Null.
            </summary>
            <param name="onLoc"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Label.#ctor(System.Int32,GeoAPI.Geometries.Locations)">
            <summary> 
            Construct a Label with a single location for both Geometries.
            Initialize the location for the Geometry index.
            </summary>
            <param name="geomIndex"></param>
            <param name="onLoc"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Label.#ctor(GeoAPI.Geometries.Locations,GeoAPI.Geometries.Locations,GeoAPI.Geometries.Locations)">
            <summary>
            Construct a Label with On, Left and Right locations for both Geometries.
            Initialize the locations for both Geometries to the given values.
            </summary>
            <param name="onLoc"></param>
            <param name="leftLoc"></param>
            <param name="rightLoc"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Label.#ctor(System.Int32,GeoAPI.Geometries.Locations,GeoAPI.Geometries.Locations,GeoAPI.Geometries.Locations)">
            <summary>
            Construct a Label with On, Left and Right locations for both Geometries.
            Initialize the locations for the given Geometry index.
            </summary>
            <param name="geomIndex"></param>
            <param name="onLoc"></param>
            <param name="leftLoc"></param>
            <param name="rightLoc"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Label.#ctor(GisSharpBlog.NetTopologySuite.GeometriesGraph.Label)">
            <summary> 
            Construct a Label with the same values as the argument Label.
            </summary>
            <param name="lbl"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Label.Flip">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Label.GetLocation(System.Int32,GisSharpBlog.NetTopologySuite.GeometriesGraph.Positions)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <param name="posIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Label.GetLocation(System.Int32)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Label.SetLocation(System.Int32,GisSharpBlog.NetTopologySuite.GeometriesGraph.Positions,GeoAPI.Geometries.Locations)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <param name="posIndex"></param>
            <param name="location"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Label.SetLocation(System.Int32,GeoAPI.Geometries.Locations)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <param name="location"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Label.SetAllLocations(System.Int32,GeoAPI.Geometries.Locations)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <param name="location"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Label.SetAllLocationsIfNull(System.Int32,GeoAPI.Geometries.Locations)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <param name="location"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Label.SetAllLocationsIfNull(GeoAPI.Geometries.Locations)">
            <summary>
            
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Label.Merge(GisSharpBlog.NetTopologySuite.GeometriesGraph.Label)">
            <summary> 
            Merge this label with another one.
            Merging updates any null attributes of this label with the attributes from lbl.
            </summary>
            <param name="lbl"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Label.SetGeometryLocation(System.Int32,GisSharpBlog.NetTopologySuite.GeometriesGraph.TopologyLocation)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <param name="tl"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Label.IsNull(System.Int32)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Label.IsAnyNull(System.Int32)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Label.IsArea">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Label.IsArea(System.Int32)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Label.IsLine(System.Int32)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Label.IsEqualOnSide(GisSharpBlog.NetTopologySuite.GeometriesGraph.Label,System.Int32)">
            <summary>
            
            </summary>
            <param name="lbl"></param>
            <param name="side"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Label.AllPositionsEqual(System.Int32,GeoAPI.Geometries.Locations)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Label.ToLine(System.Int32)">
            <summary> 
            Converts one GeometryLocation to a Line location.
            </summary>
            <param name="geomIndex"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Label.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Label.GeometryCount">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SimpleMCSweepLineIntersector">
            <summary> 
            Finds all intersections in one or two sets of edges,
            using an x-axis sweepline algorithm in conjunction with Monotone Chains.
            While still O(n^2) in the worst case, this algorithm
            drastically improves the average-case time.
            The use of MonotoneChains as the items in the index
            seems to offer an improvement in performance over a sweep-line alone.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.EdgeSetIntersector">
            <summary>
            An <c>EdgeSetIntersector</c> computes all the intersections between the
            edges in the set.  It adds the computed intersections to each edge
            they are found on.  It may be used in two scenarios:
            determining the internal intersections between a single set of edges
            determining the mutual intersections between two different sets of edges
            It uses a <c>SegmentIntersector</c> to compute the intersections between
            segments and to record statistics about what kinds of intersections were found.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.EdgeSetIntersector.#ctor">
            <summary>
            Default empty constructor.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.EdgeSetIntersector.ComputeIntersections(System.Collections.IList,GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector,System.Boolean)">
            <summary>
            Computes all self-intersections between edges in a set of edges,
            allowing client to choose whether self-intersections are computed.
            </summary>
            <param name="edges">A list of edges to test for intersections.</param>
            <param name="si">The SegmentIntersector to use.</param>
            <param name="testAllSegments"><c>true</c> if self-intersections are to be tested as well.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.EdgeSetIntersector.ComputeIntersections(System.Collections.IList,System.Collections.IList,GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector)">
            <summary> 
            Computes all mutual intersections between two sets of edges.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SimpleMCSweepLineIntersector.#ctor">
            <summary>
            A SimpleMCSweepLineIntersector creates monotone chains from the edges
            and compares them using a simple sweep-line along the x-axis.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SimpleMCSweepLineIntersector.ComputeIntersections(System.Collections.IList,GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector,System.Boolean)">
            <summary>
            
            </summary>
            <param name="edges"></param>
            <param name="si"></param>
            <param name="testAllSegments"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SimpleMCSweepLineIntersector.ComputeIntersections(System.Collections.IList,System.Collections.IList,GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector)">
            <summary>
            
            </summary>
            <param name="edges0"></param>
            <param name="edges1"></param>
            <param name="si"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SimpleMCSweepLineIntersector.Add(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="edges"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SimpleMCSweepLineIntersector.Add(System.Collections.IList,System.Object)">
            <summary>
            
            </summary>
            <param name="edges"></param>
            <param name="edgeSet"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SimpleMCSweepLineIntersector.Add(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge,System.Object)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <param name="edgeSet"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SimpleMCSweepLineIntersector.PrepareEvents">
            <summary>
            Because Delete Events have a link to their corresponding Insert event,
            it is possible to compute exactly the range of events which must be
            compared to a given Insert event object.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SimpleMCSweepLineIntersector.ComputeIntersections(GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector)">
            <summary>
            
            </summary>
            <param name="si"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SimpleMCSweepLineIntersector.ProcessOverlaps(System.Int32,System.Int32,GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SweepLineEvent,GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="ev0"></param>
            <param name="si"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.Utilities.PolygonExtracter">
            <summary> 
            Extracts all the 2-dimensional (<c>Polygon</c>) components from a <c>Geometry</c>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.PolygonExtracter.GetPolygons(GeoAPI.Geometries.IGeometry)">
            <summary> 
            Returns the Polygon components from a single point.
            If more than one point is to be processed, it is more
            efficient to create a single <c>PolygonExtracterFilter</c> instance
            and pass it to multiple geometries.
            </summary>
            <param name="geom"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.PolygonExtracter.#ctor(System.Collections.IList)">
            <summary> 
            Constructs a PolygonExtracterFilter with a list in which to store Polygons found.
            </summary>
            <param name="comps"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.PolygonExtracter.Filter(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequenceFactory">
            <summary>
            Builds packed array coordinate sequences. The array data type can be either
            double or float, and defaults to double.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequenceFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequenceFactory"/> class, 
            using double values.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequenceFactory.#ctor(GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequenceFactory.PackedType)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequenceFactory"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequenceFactory.#ctor(GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequenceFactory.PackedType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequenceFactory"/> class.
            </summary>
            <param name="type"></param>
            <param name="dimension"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequenceFactory.Create(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Returns a CoordinateSequence based on the given array; whether or not the
            array is copied is implementation-dependent.
            </summary>
            <param name="coordinates">Coordinates array, which may not be null nor contain null elements</param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequenceFactory.Create(GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Returns a CoordinateSequence based on the given coordinate sequence; whether or not the
            array is copied is implementation-dependent.
            </summary>
            <param name="coordSeq"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequenceFactory.Create(System.Double[],System.Int32)">
            <summary>
            
            </summary>
            <param name="packedCoordinates"></param>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequenceFactory.Create(System.Single[],System.Int32)">
            <summary>
            
            </summary>
            <param name="packedCoordinates"></param>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequenceFactory.Create(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequenceFactory.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequenceFactory.Dimension">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequenceFactory.PackedType">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequenceFactory.PackedType.Double">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequenceFactory.PackedType.Float">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector">
            <summary> 
            A LineIntersector is an algorithm that can both test whether
            two line segments intersect and compute the intersection point
            if they do.
            The intersection point may be computed in a precise or non-precise manner.
            Computing it precisely involves rounding it to an integer.  (This assumes
            that the input coordinates have been made precise by scaling them to
            an integer grid.)
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.DontIntersect">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.DoIntersect">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.Collinear">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.ComputeEdgeDistance(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary> 
            Computes the "edge distance" of an intersection point p along a segment.
            The edge distance is a metric of the point along the edge.
            The metric used is a robust and easy to compute metric function.
            It is not equivalent to the usual Euclidean metric.
            It relies on the fact that either the x or the y ordinates of the
            points in the edge are unique, depending on whether the edge is longer in
            the horizontal or vertical direction.
            NOTE: This function may produce incorrect distances
            for inputs where p is not precisely on p1-p2
            (E.g. p = (139,9) p1 = (139,10), p2 = (280,1) produces distanct 0.0, which is incorrect.
            My hypothesis is that the function is safe to use for points which are the
            result of rounding points which lie on the line, but not safe to use for truncated points.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.NonRobustComputeEdgeDistance(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            This function is non-robust, since it may compute the square of large numbers.
            Currently not sure how to improve this.
            </summary>
            <param name="p"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.result">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.inputLines">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.intPt">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.intLineIndex">
            <summary> 
            The indexes of the endpoints of the intersection lines, in order along
            the corresponding line
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.isProper">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.pa">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.pb">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.precisionModel">
            <summary> 
            If MakePrecise is true, computed intersection coordinates will be made precise
            using <c>Coordinate.MakePrecise</c>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.ComputeIntersection(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary> 
            Compute the intersection of a point p and the line p1-p2.
            This function computes the bool value of the hasIntersection test.
            The actual value of the intersection (if there is one)
            is equal to the value of <c>p</c>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.ComputeIntersection(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            Computes the intersection of the lines p1-p2 and p3-p4.
            This function computes both the bool value of the hasIntersection test
            and the (approximate) value of the intersection point itself (if there is one).
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.ComputeIntersect(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="q1"></param>
            <param name="q2"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.GetIntersection(System.Int32)">
            <summary> 
            Returns the intIndex'th intersection point.
            </summary>
            <param name="intIndex">is 0 or 1.</param>
            <returns>The intIndex'th intersection point.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.ComputeIntLineIndex">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.IsIntersection(GeoAPI.Geometries.ICoordinate)">
            <summary> 
            Test whether a point is a intersection point of two line segments.
            Note that if the intersection is a line segment, this method only tests for
            equality with the endpoints of the intersection segment.
            It does not return true if the input point is internal to the intersection segment.
            </summary>
            <returns><c>true</c> if the input point is one of the intersection points.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.IsInteriorIntersection">
            <summary> 
            Tests whether either intersection point is an interior point of one of the input segments.
            </summary>
            <returns>
            <c>true</c> if either intersection point is in the interior of one of the input segment.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.IsInteriorIntersection(System.Int32)">
            <summary>
            Tests whether either intersection point is an interior point of the specified input segment.
            </summary>
            <returns> 
            <c>true</c> if either intersection point is in the interior of the input segment.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.GetIntersectionAlongSegment(System.Int32,System.Int32)">
            <summary> 
            Computes the intIndex'th intersection point in the direction of
            a specified input line segment.
            </summary>
            <param name="segmentIndex">is 0 or 1.</param>
            <param name="intIndex">is 0 or 1.</param>
            <returns>
            The intIndex'th intersection point in the direction of the specified input line segment.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.GetIndexAlongSegment(System.Int32,System.Int32)">
            <summary>
            Computes the index of the intIndex'th intersection point in the direction of
            a specified input line segment.
            </summary>
            <param name="segmentIndex">is 0 or 1.</param>
            <param name="intIndex">is 0 or 1.</param>
            <returns>
            The index of the intersection point along the segment (0 or 1).
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.ComputeIntLineIndex(System.Int32)">
            <summary>
            
            </summary>
            <param name="segmentIndex"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.GetEdgeDistance(System.Int32,System.Int32)">
            <summary> 
            Computes the "edge distance" of an intersection point along the specified input line segment.
            </summary>
            <param name="segmentIndex">is 0 or 1.</param>
            <param name="intIndex">is 0 or 1.</param>
            <returns>The edge distance of the intersection point.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.MakePrecise">
            <summary>
            Force computed intersection to be rounded to a given precision model
            </summary>        
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.PrecisionModel">
            <summary> 
            Force computed intersection to be rounded to a given precision model.
            No getter is provided, because the precision model is not required to be specified.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.IsCollinear">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.IsEndPoint">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.HasIntersection">
            <summary> 
            Tests whether the input geometries intersect.
            </summary>
            <returns><c>true</c> if the input geometries intersect.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.IntersectionNum">
            <summary>
            Returns the number of intersection points found.  This will be either 0, 1 or 2.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector.IsProper">
            <summary>
            Tests whether an intersection is proper.
            The intersection between two line segments is considered proper if
            they intersect in a single point in the interior of both segments
            (e.g. the intersection is a single point and is not equal to any of the endpoints). 
            The intersection between a point and a line segment is considered proper
            if the point lies in the interior of the segment (e.g. is not equal to either of the endpoints).
            </summary>
            <returns><c>true</c>  if the intersection is proper.</returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Algorithm.CentroidLine">
            <summary> 
            Computes the centroid of a linear point.
            Algorithm:
            Compute the average of the midpoints
            of all line segments weighted by the segment length.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.CentroidLine.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.CentroidLine.Add(GeoAPI.Geometries.IGeometry)">
            <summary> 
            Adds the linestring(s) defined by a Geometry to the centroid total.
            If the point is not linear it does not contribute to the centroid.
            </summary>
            <param name="geom">The point to add.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.CentroidLine.Add(GeoAPI.Geometries.ICoordinate[])">
            <summary> 
            Adds the length defined by an array of coordinates.
            </summary>
            <param name="pts">An array of <c>Coordinate</c>s.</param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Algorithm.CentroidLine.Centroid">
            <summary>
            
            </summary>
        </member>
        <member name="T:Iesi_NTS.Collections.SortedSet">
            <summary>
            Implements a <c>Set</c> based on a sorted tree.  This gives good performance for operations on very
            large data-sets, though not as good - asymptotically - as a <c>HashedSet</c>.  However, iteration
            occurs in order.  Elements that you put into this type of collection must implement <c>IComparable</c>,
            and they must actually be comparable.  You can't mix <c>string</c> and <c>int</c> values, for example.
            </summary>
        </member>
        <member name="T:Iesi_NTS.Collections.DictionarySet">
             <summary>
             <p><c>DictionarySet</c> is an abstract class that supports the creation of new <c>Set</c>
             types where the underlying data store is an <c>IDictionary</c> instance.</p> 
              
             <p>You can use any object that implements the <c>IDictionary</c> interface to hold set data.
             You can define your own, or you can use one of the objects provided in the Framework.   
             The type of <c>IDictionary</c> you choose will affect both the performance and the behavior
             of the <c>Set</c> using it. </p>
            
             <p>To make a <c>Set</c> typed based on your own <c>IDictionary</c>, simply derive a
             new class with a constructor that takes no parameters.  Some <c>Set</c> implmentations
             cannot be defined with a default constructor.  If this is the case for your class, 
             you will need to override <c>Clone()</c> as well.</p>
            
             <p>It is also standard practice that at least one of your constructors takes an <c>ICollection</c> or 
             an <c>ISet</c> as an argument.</p>
             </summary>
        </member>
        <member name="T:Iesi_NTS.Collections.Set">
            <summary><p>A collection that contains no duplicate elements.  This class models the mathematical
            <c>Set</c> abstraction, and is the base class for all other <c>Set</c> implementations.  
            The order of elements in a set is dependant on (a)the data-structure implementation, and 
            (b)the implementation of the various <c>Set</c> methods, and thus is not guaranteed.</p>
             
            <p>None of the <c>Set</c> implementations in this library are guranteed to be thread-safe
            in any way unless wrapped in a <c>SynchronizedSet</c>.</p>
            
            <p>The following table summarizes the binary operators that are supported by the <c>Set</c> class.</p>
            <list type="table">
            	<listheader>
            		<term>Operation</term>
            		<term>Description</term>
            		<term>Method</term>
            		<term>Operator</term>
            	</listheader>
            	<item>
            		<term>Union (OR)</term>
            		<term>Element included in result if it exists in either <c>A</c> OR <c>B</c>.</term>
            		<term><c>Union()</c></term>
            		<term><c>|</c></term>
            	</item>
            	<item>
            		<term>Intersection (AND)</term>
            		<term>Element included in result if it exists in both <c>A</c> AND <c>B</c>.</term>
            		<term><c>InterSect()</c></term>
            		<term><c>&amp;</c></term>
            	</item>
            	<item>
            		<term>Exclusive Or (XOR)</term>
            		<term>Element included in result if it exists in one, but not both, of <c>A</c> and <c>B</c>.</term>
            		<term><c>ExclusiveOr()</c></term>
            		<term><c>^</c></term>
            	</item>
            	<item>
            		<term>Minus (n/a)</term>
            		<term>Take all the elements in <c>A</c>.  Now, if any of them exist in <c>B</c>, remove
            		them.  Note that unlike the other operators, <c>A - B</c> is not the same as <c>B - A</c>.</term>
            		<term><c>Minus()</c></term>
            		<term><c>-</c></term>
            	</item>
            </list>
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.Set.Union(Iesi_NTS.Collections.ISet)">
            <summary>
            Performs a "union" of the two sets, where all the elements
            in both sets are present.  That is, the element is included if it is in either <c>a</c> or <c>b</c>.
            Neither this set nor the input set are modified during the operation.  The return value
            is a <c>Clone()</c> of this set with the extra elements added in.
            </summary>
            <param name="a">A collection of elements.</param>
            <returns>A new <c>Set</c> containing the union of this <c>Set</c> with the specified collection.
            Neither of the input objects is modified by the union.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Set.Union(Iesi_NTS.Collections.ISet,Iesi_NTS.Collections.ISet)">
            <summary>
            Performs a "union" of two sets, where all the elements
            in both are present.  That is, the element is included if it is in either <c>a</c> or <c>b</c>.
            The return value is a <c>Clone()</c> of one of the sets (<c>a</c> if it is not <c>null</c>) with elements of the other set
            added in.  Neither of the input sets is modified by the operation.
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>A set containing the union of the input sets.  <c>null</c> if both sets are <c>null</c>.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Set.op_BitwiseOr(Iesi_NTS.Collections.Set,Iesi_NTS.Collections.Set)">
            <summary>
            Performs a "union" of two sets, where all the elements
            in both are present.  That is, the element is included if it is in either <c>a</c> or <c>b</c>.
            The return value is a <c>Clone()</c> of one of the sets (<c>a</c> if it is not <c>null</c>) with elements of the other set
            added in.  Neither of the input sets is modified by the operation.
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>A set containing the union of the input sets.  <c>null</c> if both sets are <c>null</c>.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Set.Intersect(Iesi_NTS.Collections.ISet)">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain.  That is, the element is included if it exists in
            both sets.  The <c>Intersect()</c> operation does not modify the input sets.  It returns
            a <c>Clone()</c> of this set with the appropriate elements removed.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>The intersection of this set with <c>a</c>.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Set.Intersect(Iesi_NTS.Collections.ISet,Iesi_NTS.Collections.ISet)">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain.  That is, the element is included only if it exists in
            both <c>a</c> and <c>b</c>.  Neither input object is modified by the operation.
            The result object is a <c>Clone()</c> of one of the input objects (<c>a</c> if it is not <c>null</c>) containing the
            elements from the intersect operation. 
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>The intersection of the two input sets.  <c>null</c> if both sets are <c>null</c>.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Set.op_BitwiseAnd(Iesi_NTS.Collections.Set,Iesi_NTS.Collections.Set)">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain.  That is, the element is included only if it exists in
            both <c>a</c> and <c>b</c>.  Neither input object is modified by the operation.
            The result object is a <c>Clone()</c> of one of the input objects (<c>a</c> if it is not <c>null</c>) containing the
            elements from the intersect operation. 
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>The intersection of the two input sets.  <c>null</c> if both sets are <c>null</c>.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Set.Minus(Iesi_NTS.Collections.ISet)">
            <summary>
            Performs a "minus" of set <c>b</c> from set <c>a</c>.  This returns a set of all
            the elements in set <c>a</c>, removing the elements that are also in set <c>b</c>.
            The original sets are not modified during this operation.  The result set is a <c>Clone()</c>
            of this <c>Set</c> containing the elements from the operation.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>A set containing the elements from this set with the elements in <c>a</c> removed.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Set.Minus(Iesi_NTS.Collections.ISet,Iesi_NTS.Collections.ISet)">
            <summary>
            Performs a "minus" of set <c>b</c> from set <c>a</c>.  This returns a set of all
            the elements in set <c>a</c>, removing the elements that are also in set <c>b</c>.
            The original sets are not modified during this operation.  The result set is a <c>Clone()</c>
            of set <c>a</c> containing the elements from the operation. 
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>A set containing <c>A - B</c> elements.  <c>null</c> if <c>a</c> is <c>null</c>.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Set.op_Subtraction(Iesi_NTS.Collections.Set,Iesi_NTS.Collections.Set)">
            <summary>
            Performs a "minus" of set <c>b</c> from set <c>a</c>.  This returns a set of all
            the elements in set <c>a</c>, removing the elements that are also in set <c>b</c>.
            The original sets are not modified during this operation.  The result set is a <c>Clone()</c>
            of set <c>a</c> containing the elements from the operation. 
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>A set containing <c>A - B</c> elements.  <c>null</c> if <c>a</c> is <c>null</c>.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Set.ExclusiveOr(Iesi_NTS.Collections.ISet)">
            <summary>
            Performs an "exclusive-or" of the two sets, keeping only the elements that
            are in one of the sets, but not in both.  The original sets are not modified
            during this operation.  The result set is a <c>Clone()</c> of this set containing
            the elements from the exclusive-or operation.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>A set containing the result of <c>a ^ b</c>.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Set.ExclusiveOr(Iesi_NTS.Collections.ISet,Iesi_NTS.Collections.ISet)">
            <summary>
            Performs an "exclusive-or" of the two sets, keeping only the elements that
            are in one of the sets, but not in both.  The original sets are not modified
            during this operation.  The result set is a <c>Clone()</c> of one of the sets
            (<c>a</c> if it is not <c>null</c>) containing
            the elements from the exclusive-or operation.
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>A set containing the result of <c>a ^ b</c>.  <c>null</c> if both sets are <c>null</c>.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Set.op_ExclusiveOr(Iesi_NTS.Collections.Set,Iesi_NTS.Collections.Set)">
            <summary>
            Performs an "exclusive-or" of the two sets, keeping only the elements that
            are in one of the sets, but not in both.  The original sets are not modified
            during this operation.  The result set is a <c>Clone()</c> of one of the sets
            (<c>a</c> if it is not <c>null</c>) containing
            the elements from the exclusive-or operation.
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>A set containing the result of <c>a ^ b</c>.  <c>null</c> if both sets are <c>null</c>.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Set.Add(System.Object)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="o">The object to add to the set.</param>
            <returns><c>true</c> is the object was added, <c>false</c> if it was already present.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Set.AddAll(System.Collections.ICollection)">
            <summary>
            Adds all the elements in the specified collection to the set if they are not already present.
            </summary>
            <param name="c">A collection of objects to add to the set.</param>
            <returns><c>true</c> is the set changed as a result of this operation, <c>false</c> if not.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Set.Clear">
            <summary>
            Removes all objects from the set.
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.Set.Contains(System.Object)">
            <summary>
            Returns <c>true</c> if this set contains the specified element.
            </summary>
            <param name="o">The element to look for.</param>
            <returns><c>true</c> if this set contains the specified element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Set.ContainsAll(System.Collections.ICollection)">
            <summary>
            Returns <c>true</c> if the set contains all the elements in the specified collection.
            </summary>
            <param name="c">A collection of objects.</param>
            <returns><c>true</c> if the set contains all the elements in the specified collection, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Set.Remove(System.Object)">
            <summary>
            Removes the specified element from the set.
            </summary>
            <param name="o">The element to be removed.</param>
            <returns><c>true</c> if the set contained the specified element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Set.RemoveAll(System.Collections.ICollection)">
            <summary>
            Remove all the specified elements from this set, if they exist in this set.
            </summary>
            <param name="c">A collection of elements to remove.</param>
            <returns><c>true</c> if the set was modified as a result of this operation.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Set.RetainAll(System.Collections.ICollection)">
            <summary>
            Retains only the elements in this set that are contained in the specified collection.
            </summary>
            <param name="c">Collection that defines the set of elements to be retained.</param>
            <returns><c>true</c> if this set changed as a result of this operation.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Set.Clone">
            <summary>
            Returns a clone of the <c>Set</c> instance.  This will work for derived <c>Set</c>
            classes if the derived class implements a constructor that takes no arguments.
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Set.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements in the <c>Set</c> to an array.  The type of array needs
            to be compatible with the objects in the <c>Set</c>, obviously.
            </summary>
            <param name="array">An array that will be the target of the copy operation.</param>
            <param name="index">The zero-based index where copying will start.</param>
        </member>
        <member name="M:Iesi_NTS.Collections.Set.GetEnumerator">
            <summary>
            Gets an enumerator for the elements in the <c>Set</c>.
            </summary>
            <returns>An <c>IEnumerator</c> over the elements in the <c>Set</c>.</returns>
        </member>
        <member name="P:Iesi_NTS.Collections.Set.IsEmpty">
            <summary>
            Returns <c>true</c> if this set contains no elements.
            </summary>
        </member>
        <member name="P:Iesi_NTS.Collections.Set.Count">
            <summary>
            The number of elements currently contained in this collection.
            </summary>
        </member>
        <member name="P:Iesi_NTS.Collections.Set.IsSynchronized">
            <summary>
            Returns <c>true</c> if the <c>Set</c> is synchronized across threads.  Note that
            enumeration is inherently not thread-safe.  Use the <c>SyncRoot</c> to lock the
            object during enumeration.
            </summary>
        </member>
        <member name="P:Iesi_NTS.Collections.Set.SyncRoot">
            <summary>
            An object that can be used to synchronize this collection to make it thread-safe.
            When implementing this, if your object uses a base object, like an <c>IDictionary</c>,
            or anything that has a <c>SyncRoot</c>, return that object instead of "<c>this</c>".
            </summary>
        </member>
        <member name="F:Iesi_NTS.Collections.DictionarySet.InternalDictionary">
            <summary>
            Provides the storage for elements in the <c>Set</c>, stored as the key-set
            of the <c>IDictionary</c> object.  Set this object in the constructor
            if you create your own <c>Set</c> class.  
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.DictionarySet.Add(System.Object)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="o">The object to add to the set.</param>
            <returns><c>true</c> is the object was added, <c>false</c> if it was already present.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.DictionarySet.AddAll(System.Collections.ICollection)">
            <summary>
            Adds all the elements in the specified collection to the set if they are not already present.
            </summary>
            <param name="c">A collection of objects to add to the set.</param>
            <returns><c>true</c> is the set changed as a result of this operation, <c>false</c> if not.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.DictionarySet.Clear">
            <summary>
            Removes all objects from the set.
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.DictionarySet.Contains(System.Object)">
            <summary>
            Returns <c>true</c> if this set contains the specified element.
            </summary>
            <param name="o">The element to look for.</param>
            <returns><c>true</c> if this set contains the specified element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.DictionarySet.ContainsAll(System.Collections.ICollection)">
            <summary>
            Returns <c>true</c> if the set contains all the elements in the specified collection.
            </summary>
            <param name="c">A collection of objects.</param>
            <returns><c>true</c> if the set contains all the elements in the specified collection, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.DictionarySet.Remove(System.Object)">
            <summary>
            Removes the specified element from the set.
            </summary>
            <param name="o">The element to be removed.</param>
            <returns><c>true</c> if the set contained the specified element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.DictionarySet.RemoveAll(System.Collections.ICollection)">
            <summary>
            Remove all the specified elements from this set, if they exist in this set.
            </summary>
            <param name="c">A collection of elements to remove.</param>
            <returns><c>true</c> if the set was modified as a result of this operation.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.DictionarySet.RetainAll(System.Collections.ICollection)">
            <summary>
            Retains only the elements in this set that are contained in the specified collection.
            </summary>
            <param name="c">Collection that defines the set of elements to be retained.</param>
            <returns><c>true</c> if this set changed as a result of this operation.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.DictionarySet.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements in the <c>Set</c> to an array.  The type of array needs
            to be compatible with the objects in the <c>Set</c>, obviously.
            </summary>
            <param name="array">An array that will be the target of the copy operation.</param>
            <param name="index">The zero-based index where copying will start.</param>
        </member>
        <member name="M:Iesi_NTS.Collections.DictionarySet.GetEnumerator">
            <summary>
            Gets an enumerator for the elements in the <c>Set</c>.
            </summary>
            <returns>An <c>IEnumerator</c> over the elements in the <c>Set</c>.</returns>
        </member>
        <member name="P:Iesi_NTS.Collections.DictionarySet.Placeholder">
            <summary>
            The placeholder object used as the value for the <c>IDictionary</c> instance.
            </summary>
            <remarks>
            There is a single instance of this object globally, used for all <c>Sets</c>.
            </remarks>
        </member>
        <member name="P:Iesi_NTS.Collections.DictionarySet.IsEmpty">
            <summary>
            Returns <c>true</c> if this set contains no elements.
            </summary>
        </member>
        <member name="P:Iesi_NTS.Collections.DictionarySet.Count">
            <summary>
            The number of elements contained in this collection.
            </summary>
        </member>
        <member name="P:Iesi_NTS.Collections.DictionarySet.IsSynchronized">
            <summary>
            None of the objects based on <c>DictionarySet</c> are synchronized.  Use the
            <c>SyncRoot</c> property instead.
            </summary>
        </member>
        <member name="P:Iesi_NTS.Collections.DictionarySet.SyncRoot">
            <summary>
            Returns an object that can be used to synchronize the <c>Set</c> between threads.
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.SortedSet.#ctor">
            <summary>
            Creates a new set instance based on a sorted tree.
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.SortedSet.#ctor(System.Collections.IComparer)">
            <summary>
            Creates a new set instance based on a sorted tree.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> to use for sorting.</param>
        </member>
        <member name="M:Iesi_NTS.Collections.SortedSet.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a new set instance based on a sorted tree and
            initializes it based on a collection of elements.
            </summary>
            <param name="initialValues">A collection of elements that defines the initial set contents.</param>
        </member>
        <member name="M:Iesi_NTS.Collections.SortedSet.#ctor(System.Collections.ICollection,System.Collections.IComparer)">
            <summary>
            Creates a new set instance based on a sorted tree and
            initializes it based on a collection of elements.
            </summary>
            <param name="initialValues">A collection of elements that defines the initial set contents.</param>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> to use for sorting.</param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Planargraph.Node">
            <summary>
            A node in a <c>PlanarGraph</c> is a location where 0 or more <c>Edge</c>s
            meet. A node is connected to each of its incident Edges via an outgoing
            DirectedEdge. Some clients using a <c>PlanarGraph</c> may want to
            subclass <c>Node</c> to add their own application-specific
            data and methods.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Planargraph.GraphComponent">
            <summary>
            The base class for all graph component classes.
            Maintains flags of use in generic graph algorithms.
            Provides two flags:
            marked - typically this is used to indicate a state that persists
            for the course of the graph's lifetime.  For instance, it can be
            used to indicate that a component has been logically deleted from the graph.
            visited - this is used to indicate that a component has been processed
            or visited by an single graph algorithm.  For instance, a breadth-first traversal of the
            graph might use this to indicate that a node has already been traversed.
            The visited flag may be set and cleared many times during the lifetime of a graph.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.GraphComponent.SetVisited(System.Collections.IEnumerator,System.Boolean)">
            <summary>
            Sets the <see cref="P:GisSharpBlog.NetTopologySuite.Planargraph.GraphComponent.Visited"/> state 
            for all <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.GraphComponent"/>s in an <see cref="T:System.Collections.IEnumerator"/>.
            </summary>
            <param name="i">A <see cref="T:System.Collections.IEnumerator"/> to scan.</param>
            <param name="visited">The state to set the <see cref="P:GisSharpBlog.NetTopologySuite.Planargraph.GraphComponent.Visited"/> flag to.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.GraphComponent.SetMarked(System.Collections.IEnumerator,System.Boolean)">
            <summary>
            Sets the <see cref="P:GisSharpBlog.NetTopologySuite.Planargraph.GraphComponent.Marked"/> state 
            for all <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.GraphComponent"/>s in an <see cref="T:System.Collections.IEnumerator"/>.
            </summary>
            <param name="i">A <see cref="T:System.Collections.IEnumerator"/> to scan.</param>
            <param name="marked">The state to set the <see cref="P:GisSharpBlog.NetTopologySuite.Planargraph.GraphComponent.Marked"/> flag to.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.GraphComponent.GetComponentWithVisitedState(System.Collections.IEnumerator,System.Boolean)">
            <summary>
            Finds the first <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.GraphComponent"/> 
            in a <see cref="T:System.Collections.IEnumerator"/> set
            which has the specified <see cref="P:GisSharpBlog.NetTopologySuite.Planargraph.GraphComponent.Visited"/> state.
            </summary>
            <param name="i">A <see cref="T:System.Collections.IEnumerator"/> to scan.</param>
            <param name="visitedState">The <see cref="P:GisSharpBlog.NetTopologySuite.Planargraph.GraphComponent.Visited"/> state to test.</param>
            <returns>The first <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.GraphComponent"/> found, or <c>null</c> if none found.</returns>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Planargraph.GraphComponent.isMarked">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Planargraph.GraphComponent.isVisited">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.GraphComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.GraphComponent"/> class.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Planargraph.GraphComponent.IsVisited">
            <summary>
            Tests if a component has been visited during the course of a graph algorithm.
            </summary>              
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Planargraph.GraphComponent.Visited">
            <summary> 
            Gets/Sets the visited flag for this component.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Planargraph.GraphComponent.IsMarked">
            <summary>
            Tests if a component has been marked at some point during the processing
            involving this graph.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Planargraph.GraphComponent.Marked">
            <summary>
            Gets/Sets the marked flag for this component.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Planargraph.GraphComponent.IsRemoved">
            <summary>
            Tests whether this component has been removed from its containing graph.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.Node.getEdgesBetween(GisSharpBlog.NetTopologySuite.Planargraph.Node,GisSharpBlog.NetTopologySuite.Planargraph.Node)">
            <summary>
            Returns all Edges that connect the two nodes (which are assumed to be different).
            </summary>
            <param name="node0"></param>
            <param name="node1"></param>
            <returns></returns>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Planargraph.Node.pt">
            <summary>
            The location of this Node.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Planargraph.Node.deStar">
            <summary>
            The collection of DirectedEdges that leave this Node.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.Node.#ctor(GeoAPI.Geometries.ICoordinate)">
            <summary>
            Constructs a Node with the given location.
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.Node.#ctor(GeoAPI.Geometries.ICoordinate,GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdgeStar)">
            <summary>
            Constructs a Node with the given location and collection of outgoing DirectedEdges.
            </summary>
            <param name="pt"></param>
            <param name="deStar"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.Node.AddOutEdge(GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge)">
            <summary>
            Adds an outgoing DirectedEdge to this Node.
            </summary>
            <param name="de"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.Node.GetIndex(GisSharpBlog.NetTopologySuite.Planargraph.Edge)">
            <summary>
            Returns the zero-based index of the given Edge, after sorting in ascending order
            by angle with the positive x-axis.
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.Node.Remove">
            <summary>
            Removes this node from its containing graph.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.Node.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Planargraph.Node.Coordinate">
            <summary>
            Returns the location of this Node.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Planargraph.Node.OutEdges">
            <summary>
            Returns the collection of DirectedEdges that leave this Node.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Planargraph.Node.Degree">
            <summary>
            Returns the number of edges around this Node.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Planargraph.Node.IsRemoved">
            <summary>
            Tests whether this component has been removed from its containing graph.
            </summary>
            <value></value>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Noding.MCIndexNoder">
            <summary>
            Nodes a set of <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s using a index based
            on <see cref="T:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChain"/>s and a <see cref="T:GisSharpBlog.NetTopologySuite.Index.ISpatialIndex"/>.
            The <see cref="T:GisSharpBlog.NetTopologySuite.Index.ISpatialIndex"/> used should be something that supports
            envelope (range) queries efficiently (such as a <see cref="T:GisSharpBlog.NetTopologySuite.Index.Quadtree.Quadtree"/>
            or <see cref="T:GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree"/>.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Noding.SinglePassNoder">
            <summary>
            Base class for <see cref="T:GisSharpBlog.NetTopologySuite.Noding.INoder"/>s which make a single pass to find intersections.
            This allows using a custom <see cref="T:GisSharpBlog.NetTopologySuite.Noding.ISegmentIntersector"/>
            (which for instance may simply identify intersections, rather than insert them).
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Noding.INoder">
            <summary>
            Computes all intersections between segments in a set of <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s.
            Intersections found are represented as <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentNode"/>s and added to the
            <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s in which they occur.
            As a final step in the noding a new set of segment strings split at the nodes may be returned.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.INoder.ComputeNodes(System.Collections.IList)">
            <summary>
            Computes the noding for a collection of <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s.
            Some Noders may add all these nodes to the input <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s;
            others may only add some or none at all.
            </summary>
            <param name="segStrings"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.INoder.GetNodedSubstrings">
            <summary>
            Returns a <see cref="T:System.Collections.IList"/> of fully noded <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s.
            The <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s have the same context as their parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SinglePassNoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SinglePassNoder"/> class.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SinglePassNoder.#ctor(GisSharpBlog.NetTopologySuite.Noding.ISegmentIntersector)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SinglePassNoder"/> class.
            </summary>
            <param name="segInt">The <see cref="T:GisSharpBlog.NetTopologySuite.Noding.ISegmentIntersector"/> to use.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SinglePassNoder.ComputeNodes(System.Collections.IList)">
            <summary>
            Computes the noding for a collection of <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s.
            Some Noders may add all these nodes to the input <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s;
            others may only add some or none at all.
            </summary>
            <param name="segStrings"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SinglePassNoder.GetNodedSubstrings">
            <summary>
            Returns a <see cref="T:System.Collections.IList"/> of fully noded <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s.
            The <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s have the same context as their parent.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Noding.SinglePassNoder.SegmentIntersector">
            <summary>
            Gets/sets the <see cref="T:GisSharpBlog.NetTopologySuite.Noding.ISegmentIntersector"/> to use with this noder.
            A <see cref="T:GisSharpBlog.NetTopologySuite.Noding.ISegmentIntersector"/>  will normally add intersection nodes
            to the input segment strings, but it may not - it may
            simply record the presence of intersections.
            However, some <see cref="T:GisSharpBlog.NetTopologySuite.Noding.INoder"/>s may require that intersections be added.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.MCIndexNoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Noding.MCIndexNoder"/> class.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.MCIndexNoder.#ctor(GisSharpBlog.NetTopologySuite.Noding.ISegmentIntersector)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Noding.MCIndexNoder"/> class.
            </summary>
            <param name="segInt">The <see cref="T:GisSharpBlog.NetTopologySuite.Noding.ISegmentIntersector"/> to use.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.MCIndexNoder.GetNodedSubstrings">
            <summary>
            Returns a <see cref="T:System.Collections.IList"/> of fully noded <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s.
            The <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s have the same context as their parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.MCIndexNoder.ComputeNodes(System.Collections.IList)">
            <summary>
            Computes the noding for a collection of <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s.
            Some Noders may add all these nodes to the input <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s;
            others may only add some or none at all.
            </summary>
            <param name="inputSegStrings"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.MCIndexNoder.IntersectChains">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.MCIndexNoder.Add(GisSharpBlog.NetTopologySuite.Noding.SegmentString)">
            <summary>
            
            </summary>
            <param name="segStr"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Noding.MCIndexNoder.MonotoneChains">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Noding.MCIndexNoder.Index">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Noding.MCIndexNoder.SegmentOverlapAction">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChainOverlapAction">
            <summary> 
            The action for the internal iterator for performing
            overlap queries on a MonotoneChain.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChainOverlapAction.TempEnv1">
            <summary>
            This envelope is used during the MonotoneChain search process.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChainOverlapAction.TempEnv2">
            <summary>
            This envelope is used during the MonotoneChain search process. 
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChainOverlapAction.overlapSeg1">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChainOverlapAction.overlapSeg2">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChainOverlapAction.Overlap(GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChain,System.Int32,GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChain,System.Int32)">
            <summary>
            This function can be overridden if the original chains are needed.
            </summary>
            <param name="mc1"></param>
            <param name="start1">The index of the start of the overlapping segment from mc1.</param>
            <param name="mc2"></param>
            <param name="start2">The index of the start of the overlapping segment from mc2.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChainOverlapAction.Overlap(GisSharpBlog.NetTopologySuite.Geometries.LineSegment,GisSharpBlog.NetTopologySuite.Geometries.LineSegment)">
            <summary> 
            This is a convenience function which can be overridden to obtain the actual
            line segments which overlap.
            </summary>
            <param name="seg1"></param>
            <param name="seg2"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.MCIndexNoder.SegmentOverlapAction.#ctor(GisSharpBlog.NetTopologySuite.Noding.ISegmentIntersector)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Noding.MCIndexNoder.SegmentOverlapAction"/> class.
            </summary>
            <param name="si">The <see cref="T:GisSharpBlog.NetTopologySuite.Noding.ISegmentIntersector"/></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.MCIndexNoder.SegmentOverlapAction.Overlap(GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChain,System.Int32,GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChain,System.Int32)">
            <summary>
            
            </summary>
            <param name="mc1"></param>
            <param name="start1"></param>
            <param name="mc2"></param>
            <param name="start2"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Noding.IntersectionAdder">
            <summary>
            Computes the intersections between two line segments in <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s
            and adds them to each string.
            The <see cref="T:GisSharpBlog.NetTopologySuite.Noding.ISegmentIntersector"/> is passed to a <see cref="T:GisSharpBlog.NetTopologySuite.Noding.INoder"/>.
            The <see cref="M:GisSharpBlog.NetTopologySuite.Noding.SegmentString.AddIntersections(GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector,System.Int32,System.Int32)"/> method is called whenever the <see cref="T:GisSharpBlog.NetTopologySuite.Noding.INoder"/>
            detects that two <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s might intersect.
            This class is an example of the Strategy pattern.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Noding.ISegmentIntersector">
            <summary>
            Computes the intersections between two line segments in <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s
            and adds them to each string.
            The <see cref="T:GisSharpBlog.NetTopologySuite.Noding.ISegmentIntersector"/> is passed to a <see cref="T:GisSharpBlog.NetTopologySuite.Noding.INoder"/>.
            The <see cref="M:GisSharpBlog.NetTopologySuite.Noding.SegmentString.AddIntersections(GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector,System.Int32,System.Int32)"/>  method is called whenever the <see cref="T:GisSharpBlog.NetTopologySuite.Noding.INoder"/>
            detects that two <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/> s might intersect.
            This class is an example of the Strategy pattern.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.ISegmentIntersector.ProcessIntersections(GisSharpBlog.NetTopologySuite.Noding.SegmentString,System.Int32,GisSharpBlog.NetTopologySuite.Noding.SegmentString,System.Int32)">
            <summary>
            This method is called by clients
            of the <see cref="T:GisSharpBlog.NetTopologySuite.Noding.ISegmentIntersector"/> interface to process
            intersections for two segments of the <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s being intersected.
            </summary>
            <param name="e0"></param>
            <param name="segIndex0"></param>
            <param name="e1"></param>
            <param name="segIndex1"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.IntersectionAdder.IsAdjacentSegments(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="i1"></param>
            <param name="i2"></param>
            <returns></returns>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Noding.IntersectionAdder.hasIntersection">
            These variables keep track of what types of intersections were
            found during ALL edges that have been intersected.
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Noding.IntersectionAdder.NumIntersections">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Noding.IntersectionAdder.NumInteriorIntersections">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Noding.IntersectionAdder.NumProperIntersections">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Noding.IntersectionAdder.NumTests">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.IntersectionAdder.#ctor(GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Noding.IntersectionAdder"/> class.
            </summary>
            <param name="li"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.IntersectionAdder.IsTrivialIntersection(GisSharpBlog.NetTopologySuite.Noding.SegmentString,System.Int32,GisSharpBlog.NetTopologySuite.Noding.SegmentString,System.Int32)">
            <summary>
            A trivial intersection is an apparent self-intersection which in fact
            is simply the point shared by adjacent line segments.
            Note that closed edges require a special check for the point shared by the beginning and end segments.
            </summary>
            <param name="e0"></param>
            <param name="segIndex0"></param>
            <param name="e1"></param>
            <param name="segIndex1"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.IntersectionAdder.ProcessIntersections(GisSharpBlog.NetTopologySuite.Noding.SegmentString,System.Int32,GisSharpBlog.NetTopologySuite.Noding.SegmentString,System.Int32)">
            <summary>
            This method is called by clients
            of the <see cref="T:GisSharpBlog.NetTopologySuite.Noding.ISegmentIntersector"/> class to process
            intersections for two segments of the <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/> being intersected.
            Note that some clients (such as <see cref="T:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChain"/>s) may optimize away
            this call for segment pairs which they have determined do not intersect
            (e.g. by an disjoint envelope test).
            </summary>
            <param name="e0"></param>
            <param name="segIndex0"></param>
            <param name="e1"></param>
            <param name="segIndex1"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Noding.IntersectionAdder.LineIntersector">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Noding.IntersectionAdder.ProperIntersectionPoint">
            <summary>
            Returns the proper intersection point, or <c>null</c> if none was found.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Noding.IntersectionAdder.HasIntersection">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Noding.IntersectionAdder.HasProperIntersection">
            <summary>
            A proper intersection is an intersection which is interior to at least two
            line segments.  Note that a proper intersection is not necessarily
            in the interior of the entire <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/>, since another edge may have
            an endpoint equal to the intersection, which according to SFS semantics
            can result in the point being on the Boundary of the <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Noding.IntersectionAdder.HasProperInteriorIntersection">
            <summary>
            A proper interior intersection is a proper intersection which is not
            contained in the set of boundary nodes set for this <see cref="T:GisSharpBlog.NetTopologySuite.Noding.ISegmentIntersector"/>.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Noding.IntersectionAdder.HasInteriorIntersection">
            <summary>
            An interior intersection is an intersection which is
            in the interior of some segment.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.WKTWriter">
            <summary> 
            Outputs the textual representation of a <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/>.
            The <see cref="T:GisSharpBlog.NetTopologySuite.IO.WKTWriter"/> outputs coordinates rounded to the precision
            model. No more than the maximum number of necessary decimal places will be
            output.
            The Well-known Text format is defined in the <A HREF="http://www.opengis.org/techno/specs.htm">OpenGIS Simple Features
            Specification for SQL</A>.
            A non-standard "LINEARRING" tag is used for LinearRings. The WKT spec does
            not define a special tag for LinearRings. The standard tag to use is
            "LINESTRING".
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTWriter.ToPoint(GeoAPI.Geometries.ICoordinate)">
            <summary>
            Generates the WKT for a <c>Point</c>.
            </summary>
            <param name="p0">The point coordinate.</param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTWriter.ToLineString(GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Generates the WKT for a N-point <c>LineString</c>.
            </summary>
            <param name="seq">The sequence to output.</param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTWriter.ToLineString(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            Generates the WKT for a 2-point <c>LineString</c>.
            </summary>
            <param name="p0">The first coordinate.</param>
            <param name="p1">The second coordinate.</param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTWriter.CreateFormatter(GeoAPI.Geometries.IPrecisionModel)">
            <summary>  
            Creates the <c>NumberFormatInfo</c> used to write <c>double</c>s
            with a sufficient number of decimal places.
            </summary>
            <param name="precisionModel"> 
            The <c>PrecisionModel</c> used to determine
            the number of decimal places to write.
            </param>
            <returns>
            A <c>NumberFormatInfo</c> that write <c>double</c>
            s without scientific notation.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTWriter.StringOfChar(System.Char,System.Int32)">
            <summary>
            Returns a <c>String</c> of repeated characters.
            </summary>
            <param name="ch">The character to repeat.</param>
            <param name="count">The number of times to repeat the character.</param>
            <returns>A <c>string</c> of characters.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTWriter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTWriter.Write(GeoAPI.Geometries.IGeometry)">
            <summary>
            Converts a <c>Geometry</c> to its Well-known Text representation.
            </summary>
            <param name="geometry">A <c>Geometry</c> to process.</param>
            <returns>A Geometry Tagged Text string (see the OpenGIS Simple Features Specification).</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTWriter.Write(GeoAPI.Geometries.IGeometry,System.IO.TextWriter)">
            <summary>
            Converts a <c>Geometry</c> to its Well-known Text representation.
            </summary>
            <param name="geometry">A <c>Geometry</c> to process.</param>
            <param name="writer"></param>
            <returns>A "Geometry Tagged Text" string (see the OpenGIS Simple Features Specification)</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTWriter.WriteFormatted(GeoAPI.Geometries.IGeometry)">
            <summary>
            Same as <c>write</c>, but with newlines and spaces to make the
            well-known text more readable.
            </summary>
            <param name="geometry">A <c>Geometry</c> to process</param>
            <returns>
            A "Geometry Tagged Text" string (see the OpenGIS Simple
            Features Specification), with newlines and spaces.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTWriter.WriteFormatted(GeoAPI.Geometries.IGeometry,System.IO.TextWriter)">
            <summary>
            Same as <c>write</c>, but with newlines and spaces to make the
            well-known text more readable.
            </summary>
            <param name="geometry">A <c>Geometry</c> to process</param>
            <param name="writer"></param>
            <returns>
            A Geometry Tagged Text string (see the OpenGIS Simple
            Features Specification), with newlines and spaces.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTWriter.WriteFormatted(GeoAPI.Geometries.IGeometry,System.Boolean,System.IO.TextWriter)">
            <summary>
            Converts a <c>Geometry</c> to its Well-known Text representation.
            </summary>
            <param name="geometry">A <c>Geometry</c> to process</param>
            <param name="formatted"></param>
            <param name="writer"></param>
            <returns>
            A "Geometry Tagged Text" string (see the OpenGIS Simple
            Features Specification).
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTWriter.AppendGeometryTaggedText(GeoAPI.Geometries.IGeometry,System.Int32,System.IO.TextWriter)">
            <summary>
            Converts a <c>Geometry</c> to &lt;Geometry Tagged Text format,
            then appends it to the writer.
            </summary>
            <param name="geometry">/he <c>Geometry</c> to process.</param>
            <param name="level"></param>
            <param name="writer">/he output writer to append to.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTWriter.AppendPointTaggedText(GeoAPI.Geometries.ICoordinate,System.Int32,System.IO.TextWriter,GeoAPI.Geometries.IPrecisionModel)">
            <summary>
            Converts a <c>Coordinate</c> to Point Tagged Text format,
            then appends it to the writer.
            </summary>
            <param name="coordinate">The <c>Coordinate</c> to process.</param>
            <param name="level"></param>
            <param name="writer">The output writer to append to.</param>
            <param name="precisionModel"> 
            The <c>PrecisionModel</c> to use to convert
            from a precise coordinate to an external coordinate.
            </param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTWriter.AppendLineStringTaggedText(GeoAPI.Geometries.ILineString,System.Int32,System.IO.TextWriter)">
            <summary>
            Converts a <c>LineString</c> to &lt;LineString Tagged Text
            format, then appends it to the writer.
            </summary>
            <param name="lineString">The <c>LineString</c> to process.</param>
            <param name="level"></param>
            <param name="writer">The output writer to append to.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTWriter.AppendLinearRingTaggedText(GeoAPI.Geometries.ILinearRing,System.Int32,System.IO.TextWriter)">
            <summary>
            Converts a <c>LinearRing</c> to &lt;LinearRing Tagged Text
            format, then appends it to the writer.
            </summary>
            <param name="linearRing">The <c>LinearRing</c> to process.</param>
            <param name="level"></param>
            <param name="writer">The output writer to append to.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTWriter.AppendPolygonTaggedText(GeoAPI.Geometries.IPolygon,System.Int32,System.IO.TextWriter)">
            <summary>
            Converts a <c>Polygon</c> to Polygon Tagged Text format,
            then appends it to the writer.
            </summary>
            <param name="polygon">The <c>Polygon</c> to process.</param>
            <param name="level"></param>
            <param name="writer">The output writer to append to.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTWriter.AppendMultiPointTaggedText(GeoAPI.Geometries.IMultiPoint,System.Int32,System.IO.TextWriter)">
            <summary>
            Converts a <c>MultiPoint</c> to &lt;MultiPoint Tagged Text
            format, then appends it to the writer.
            </summary>
            <param name="multipoint">The <c>MultiPoint</c> to process.</param>
            <param name="level"></param>
            <param name="writer">The output writer to append to.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTWriter.AppendMultiLineStringTaggedText(GeoAPI.Geometries.IMultiLineString,System.Int32,System.IO.TextWriter)">
            <summary>
            Converts a <c>MultiLineString</c> to MultiLineString Tagged
            Text format, then appends it to the writer.
            </summary>
            <param name="multiLineString">The <c>MultiLineString</c> to process.</param>
            <param name="level"></param>
            <param name="writer">The output writer to append to.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTWriter.AppendMultiPolygonTaggedText(GeoAPI.Geometries.IMultiPolygon,System.Int32,System.IO.TextWriter)">
            <summary>
            Converts a <c>MultiPolygon</c> to MultiPolygon Tagged Text
            format, then appends it to the writer.
            </summary>
            <param name="multiPolygon">The <c>MultiPolygon</c> to process.</param>
            <param name="level"></param>
            <param name="writer">The output writer to append to.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTWriter.AppendGeometryCollectionTaggedText(GeoAPI.Geometries.IGeometryCollection,System.Int32,System.IO.TextWriter)">
            <summary>
            Converts a <c>GeometryCollection</c> to GeometryCollection
            Tagged Text format, then appends it to the writer.
            </summary>
            <param name="geometryCollection">The <c>GeometryCollection</c> to process.</param>
            <param name="level"></param>
            <param name="writer">The output writer to append to.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTWriter.AppendPointText(GeoAPI.Geometries.ICoordinate,System.Int32,System.IO.TextWriter,GeoAPI.Geometries.IPrecisionModel)">
            <summary>
            Converts a <c>Coordinate</c> to Point Text format, then
            appends it to the writer.
            </summary>
            <param name="coordinate">The <c>Coordinate</c> to process.</param>
            <param name="level"></param>
            <param name="writer">The output writer to append to.</param>
            <param name="precisionModel">
            The <c>PrecisionModel</c> to use to convert
            from a precise coordinate to an external coordinate.
            </param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTWriter.AppendCoordinate(GeoAPI.Geometries.ICoordinate,System.IO.TextWriter,GeoAPI.Geometries.IPrecisionModel)">
            <summary>
            Converts a <c>Coordinate</c> to Point format, then appends
            it to the writer.
            </summary>
            <param name="coordinate">The <c>Coordinate</c> to process.</param>
            <param name="writer">The output writer to append to.</param>
            <param name="precisionModel">
            The <c>PrecisionModel</c> to use to convert
            from a precise coordinate to an external coordinate.
            </param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTWriter.WriteNumber(System.Double)">
            <summary>
            Converts a <see cref="T:System.Double"/> to a <see cref="T:System.String"/>, 
            not in scientific notation.
            </summary>
            <param name="d">The <see cref="T:System.Double"/> to convert.</param>
            <returns>
            The <see cref="T:System.Double"/> as a <see cref="T:System.String"/>, 
            not in scientific notation.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTWriter.AppendLineStringText(GeoAPI.Geometries.ILineString,System.Int32,System.Boolean,System.IO.TextWriter)">
            <summary>
            Converts a <c>LineString</c> to &lt;LineString Text format, then
            appends it to the writer.
            </summary>
            <param name="lineString">The <c>LineString</c> to process.</param>
            <param name="level"></param>
            <param name="doIndent"></param>
            <param name="writer">The output writer to append to.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTWriter.AppendPolygonText(GeoAPI.Geometries.IPolygon,System.Int32,System.Boolean,System.IO.TextWriter)">
            <summary>
            Converts a <c>Polygon</c> to Polygon Text format, then
            appends it to the writer.
            </summary>
            <param name="polygon">The <c>Polygon</c> to process.</param>
            <param name="level"></param>
            <param name="indentFirst"></param>
            <param name="writer">The output writer to append to.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTWriter.AppendMultiPointText(GeoAPI.Geometries.IMultiPoint,System.Int32,System.IO.TextWriter)">
            <summary>
            Converts a <c>MultiPoint</c> to &lt;MultiPoint Text format, then
            appends it to the writer.
            </summary>
            <param name="multiPoint">The <c>MultiPoint</c> to process.</param>
            <param name="level"></param>
            <param name="writer">The output writer to append to.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTWriter.AppendMultiLineStringText(GeoAPI.Geometries.IMultiLineString,System.Int32,System.Boolean,System.IO.TextWriter)">
            <summary>
            Converts a <c>MultiLineString</c> to &lt;MultiLineString Text
            format, then appends it to the writer.
            </summary>
            <param name="multiLineString">The <c>MultiLineString</c> to process.</param>
            <param name="level"></param>
            <param name="indentFirst"></param>
            <param name="writer">The output writer to append to.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTWriter.AppendMultiPolygonText(GeoAPI.Geometries.IMultiPolygon,System.Int32,System.IO.TextWriter)">
            <summary>
            Converts a <c>MultiPolygon</c> to &lt;MultiPolygon Text format,
            then appends it to the writer.
            </summary>
            <param name="multiPolygon">The <c>MultiPolygon</c> to process.</param>
            <param name="level"></param>
            <param name="writer">The output writer to append to.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTWriter.AppendGeometryCollectionText(GeoAPI.Geometries.IGeometryCollection,System.Int32,System.IO.TextWriter)">
            <summary>
            Converts a <c>GeometryCollection</c> to GeometryCollectionText
            format, then appends it to the writer.
            </summary>
            <param name="geometryCollection">The <c>GeometryCollection</c> to process.</param>
            <param name="level"></param>
            <param name="writer">The output writer to append to.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTWriter.Indent(System.Int32,System.IO.TextWriter)">
            <summary>
            
            </summary>
            <param name="level"></param>
            <param name="writer"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.WKTReader">
            <summary>  
            Converts a Well-Known Text string to a <c>Geometry</c>.
            
            The <c>WKTReader</c> allows
            extracting <c>Geometry</c> objects from either input streams or
            internal strings. This allows it to function as a parser to read <c>Geometry</c>
            objects from text blocks embedded in other data formats (e.g. XML). 
            
            The Well-known
            Text format is defined in the <A HREF="http://www.opengis.org/techno/specs.htm">
            OpenGIS Simple Features Specification for SQL</A> . 
            
            NOTE:  There is an inconsistency in the SFS. 
            The WKT grammar states that <c>MultiPoints</c> are represented by 
            <c>MULTIPOINT ( ( x y), (x y) )</c>, 
            but the examples show <c>MultiPoint</c>s as <c>MULTIPOINT ( x y, x y )</c>. 
            Other implementations follow the latter syntax, so NTS will adopt it as well.
            A <c>WKTReader</c> is parameterized by a <c>GeometryFactory</c>, 
            to allow it to create <c>Geometry</c> objects of the appropriate
            implementation. In particular, the <c>GeometryFactory</c> will
            determine the <c>PrecisionModel</c> and <c>SRID</c> that is used. 
            The <c>WKTReader</c> will convert the input numbers to the precise
            internal representation.
            <remarks>
            <see cref="T:GisSharpBlog.NetTopologySuite.IO.WKTReader"/> reads also non-standard "LINEARRING" tags.
            </remarks>
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTReader.#ctor">
            <summary> 
            Creates a <c>WKTReader</c> that creates objects using a basic GeometryFactory.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTReader.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary>  
            Creates a <c>WKTReader</c> that creates objects using the given
            <c>GeometryFactory</c>.
            </summary>
            <param name="geometryFactory">The factory used to create <c>Geometry</c>s.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTReader.Read(System.String)">
            <summary>
            Converts a Well-known Text representation to a <c>Geometry</c>.
            </summary>
            <param name="wellKnownText">
            one or more Geometry Tagged Text strings (see the OpenGIS
            Simple Features Specification) separated by whitespace.
            </param>
            <returns>
            A <c>Geometry</c> specified by <c>wellKnownText</c>
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTReader.Read(System.IO.TextReader)">
            <summary>  
            Converts a Well-known Text representation to a <c>Geometry</c>.
            </summary>
            <param name="reader"> 
            A Reader which will return a "Geometry Tagged Text"
            string (see the OpenGIS Simple Features Specification).
            </param>
            <returns>A <c>Geometry</c> read from <c>reader</c>.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTReader.GetCoordinates(System.Collections.IList,System.Boolean)">
            <summary>
            Returns the next array of <c>Coordinate</c>s in the stream.
            </summary>
            <param name="tokens">
            Tokenizer over a stream of text in Well-known Text
            format. The next element returned by the stream should be "(" (the
            beginning of "(x1 y1, x2 y2, ..., xn yn)") or "EMPTY".
            </param>
            <param name="skipExtraParenthesis">
            if set to <c>true</c> skip extra parenthesis around coordinates.
            </param>
            <returns>
            The next array of <c>Coordinate</c>s in the
            stream, or an empty array if "EMPTY" is the next element returned by
            the stream.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTReader.GetPreciseCoordinate(System.Collections.IList,System.Boolean)">
            <summary>
            
            </summary>
            <param name="tokens"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTReader.IsNumberNext(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="tokens"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTReader.GetNextNumber(System.Collections.IList)">
            <summary>
            Returns the next number in the stream.
            </summary>
            <param name="tokens">
            Tokenizer over a stream of text in Well-known Text
            format. The next token must be a number.
            </param>
            <returns>The next number in the stream.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTReader.GetNextEmptyOrOpener(System.Collections.IList)">
            <summary>
            Returns the next "EMPTY" or "(" in the stream as uppercase text.
            </summary>
            <param name="tokens">
            Tokenizer over a stream of text in Well-known Text
            format. The next token must be "EMPTY" or "(".
            </param>
            <returns>
            The next "EMPTY" or "(" in the stream as uppercase text.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTReader.GetNextCloserOrComma(System.Collections.IList)">
            <summary>
            Returns the next ")" or "," in the stream.
            </summary>
            <param name="tokens">
            Tokenizer over a stream of text in Well-known Text
            format. The next token must be ")" or ",".
            </param>
            <returns>
            The next ")" or "," in the stream.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTReader.GetNextCloser(System.Collections.IList)">
            <summary>
            Returns the next ")" in the stream.
            </summary>
            <param name="tokens">
            Tokenizer over a stream of text in Well-known Text
            format. The next token must be ")".
            </param>
            <returns>
            The next ")" in the stream.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTReader.GetNextWord(System.Collections.IList)">
            <summary>
            Returns the next word in the stream as uppercase text.
            </summary>
            <param name="tokens">
            Tokenizer over a stream of text in Well-known Text
            format. The next token must be a word.
            </param>
            <returns>The next word in the stream as uppercase text.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTReader.ReadGeometryTaggedText(System.Collections.IList)">
            <summary>
            Creates a <c>Geometry</c> using the next token in the stream.
            </summary>
            <param name="tokens">
            Tokenizer over a stream of text in Well-known Text
            format. The next tokens must form a &lt;Geometry Tagged Text.
            </param>
            <returns>A <c>Geometry</c> specified by the next token
            in the stream.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTReader.ReadPointText(System.Collections.IList)">
            <summary>
            Creates a <c>Point</c> using the next token in the stream.
            </summary>
            <param name="tokens">
            Tokenizer over a stream of text in Well-known Text
            format. The next tokens must form a &lt;Point Text.
            </param>
            <returns>A <c>Point</c> specified by the next token in
            the stream.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTReader.ReadLineStringText(System.Collections.IList)">
            <summary>
            Creates a <c>LineString</c> using the next token in the stream.
            </summary>
            <param name="tokens">
            Tokenizer over a stream of text in Well-known Text
            format. The next tokens must form a &lt;LineString Text.
            </param>
            <returns>
            A <c>LineString</c> specified by the next
            token in the stream.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTReader.ReadLinearRingText(System.Collections.IList)">
            <summary>
            Creates a <c>LinearRing</c> using the next token in the stream.
            </summary>
            <param name="tokens">
            Tokenizer over a stream of text in Well-known Text
            format. The next tokens must form a &lt;LineString Text.
            </param>
            <returns>A <c>LinearRing</c> specified by the next
            token in the stream.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTReader.ReadMultiPointText(System.Collections.IList)">
            <summary>
            Creates a <c>MultiPoint</c> using the next token in the stream.
            </summary>
            <param name="tokens">
            Tokenizer over a stream of text in Well-known Text
            format. The next tokens must form a &lt;MultiPoint Text.
            </param>
            <returns>
            A <c>MultiPoint</c> specified by the next
            token in the stream.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTReader.ToPoints(GeoAPI.Geometries.ICoordinate[])">
            <summary> 
            Creates an array of <c>Point</c>s having the given <c>Coordinate</c>s.
            </summary>
            <param name="coordinates">
            The <c>Coordinate</c>s with which to create the <c>Point</c>s
            </param>
            <returns>
            <c>Point</c>s created using this <c>WKTReader</c>
            s <c>GeometryFactory</c>.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTReader.ReadPolygonText(System.Collections.IList)">
            <summary>  
            Creates a <c>Polygon</c> using the next token in the stream.
            </summary>
            <param name="tokens">
            Tokenizer over a stream of text in Well-known Text
            format. The next tokens must form a Polygon Text.
            </param>
            <returns>
            A <c>Polygon</c> specified by the next token
            in the stream.        
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTReader.ReadMultiLineStringText(System.Collections.IList)">
            <summary>
            Creates a <c>MultiLineString</c> using the next token in the stream.
            </summary>
            <param name="tokens">
            Tokenizer over a stream of text in Well-known Text
            format. The next tokens must form a MultiLineString Text.
            </param>
            <returns>
            A <c>MultiLineString</c> specified by the
            next token in the stream.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTReader.ReadMultiPolygonText(System.Collections.IList)">
            <summary>  
            Creates a <c>MultiPolygon</c> using the next token in the stream.
            </summary>
            <param name="tokens">Tokenizer over a stream of text in Well-known Text
            format. The next tokens must form a MultiPolygon Text.
            </param>
            <returns>
            A <c>MultiPolygon</c> specified by the next
            token in the stream, or if if the coordinates used to create the
            <c>Polygon</c> shells and holes do not form closed linestrings.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKTReader.ReadGeometryCollectionText(System.Collections.IList)">
            <summary>
            Creates a <c>GeometryCollection</c> using the next token in the
            stream.
            </summary>
            <param name="tokens">
            Tokenizer over a stream of text in Well-known Text
            format. The next tokens must form a &lt;GeometryCollection Text.
            </param>
            <returns>
            A <c>GeometryCollection</c> specified by the
            next token in the stream.</returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Utilities.TokenType">
            <summary>
            Represents the type of token created by the StreamTokenizer class.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Utilities.TokenType.Word">
            <summary>
            Indicates that the token is a word.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Utilities.TokenType.Number">
            <summary>
            Indicates that the token is a number. 
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Utilities.TokenType.Eol">
            <summary>
            Indicates that the end of line has been read. The field can only have this value if the eolIsSignificant method has been called with the argument true. 
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Utilities.TokenType.Eof">
            <summary>
            Indicates that the end of the input stream has been reached.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Utilities.TokenType.Whitespace">
            <summary>
            Indictaes that the token is white space (space, tab, newline).
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Utilities.TokenType.Symbol">
            <summary>
            Characters that are not whitespace, numbers, etc...
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.ShapeWriter">
            <summary>
            Contains methods for writing a single <c>Geometry</c> in binary ESRI shapefile format.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.ShapeWriter.InitCount">
            <summary>
            Standard byte size for each complex point.
            Each complex point (LineString, Polygon, ...) contains
                4 bytes for ShapeTypes and
                32 bytes for Boundingbox.      
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeWriter.#ctor">
            <summary> 
            Creates a <coordinate>ShapeWriter</coordinate> that creates objects using a basic GeometryFactory.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeWriter.Write(GeoAPI.Geometries.ICoordinate,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="coordinate"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeWriter.Write(GeoAPI.Geometries.IPoint,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeWriter.Write(GeoAPI.Geometries.ILineString,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="lineString"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeWriter.Write(GeoAPI.Geometries.IPolygon,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="polygon"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeWriter.Write(GeoAPI.Geometries.IMultiPoint,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="multiPoint"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeWriter.Write(GeoAPI.Geometries.IMultiLineString,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="multiLineString"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeWriter.Write(GeoAPI.Geometries.IMultiPolygon,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="multiPolygon"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeWriter.WriteBoundingBox(GeoAPI.Geometries.IGeometry,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeWriter.GetBytes(GeoAPI.Geometries.IGeometry)">
            <summary>
            Sets correct length for Byte Stream.
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeWriter.GetBytesLength(GeoAPI.Geometries.IGeometry)">
            <summary>
            Return correct length for Byte Stream.
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeWriter.SetByteStreamLength(GeoAPI.Geometries.IMultiPolygon)">
            <summary>
            
            </summary>
            <param name="multiPolygon"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeWriter.SetByteStreamLength(GeoAPI.Geometries.IMultiLineString)">
            <summary>
            
            </summary>
            <param name="multiLineString"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeWriter.SetByteStreamLength(GeoAPI.Geometries.IMultiPoint)">
            <summary>
            
            </summary>
            <param name="multiPoint"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeWriter.SetByteStreamLength(GeoAPI.Geometries.IPolygon)">
            <summary>
            
            </summary>
            <param name="polygon"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeWriter.SetByteStreamLength(GeoAPI.Geometries.ILineString)">
            <summary>
            
            </summary>
            <param name="lineString"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeWriter.SetByteStreamLength(GeoAPI.Geometries.IPoint)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeWriter.CalculateLength(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="numParts"></param>
            <param name="numPoints"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeWriter.CalculateLength(System.Int32)">
            <summary>
            
            </summary>
            <param name="numPoints"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.ShapeReader">
            <summary>
            Contains methods for reading a single <c>Geometry</c> in binary ESRI shapefile format.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.ShapeReader.factory">
            <summary>
            Geometry creator.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeReader.#ctor">
            <summary>
            Initialize reader with a standard <c>GeometryFactory</c>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeReader.#ctor(GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory)">
            <summary>
            Initialize reader with the given <c>GeometryFactory</c>.
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeReader.ReadPoint(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeReader.ReadLineString(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeReader.ReadPolygon(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeReader.ReadMultiPoint(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeReader.CreatePoint(GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeReader.CreateLineString(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Creates a single LineString.
            </summary>
            <param name="coords"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeReader.CreateMultiLineString(System.Int32,System.Int32[],GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Creates a MultiLineString.
            </summary>
            <param name="numPoints"></param>
            <param name="indexParts"></param>
            <param name="coords"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeReader.CreateSingleOrMultiPolygon(System.Int32,System.Int32[],GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Creates a single Polygon with holes.
            </summary>
            <param name="numPoints"></param>
            <param name="indexParts"></param>
            <param name="coords"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeReader.CreateSimpleSinglePolygon(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Creates a single Polygon without holes.
            </summary>
            <param name="coords"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeReader.CreateMultiPoint(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Creates a MultiPoint.
            </summary>
            <param name="coords"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeReader.ReadBoundingBox(System.IO.BinaryReader)">
            <summary>
            Jump values for VeDEx BoundingBox
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeReader.ReadNumParts(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeReader.ReadNumPoints(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeReader.ReadIndexParts(System.IO.BinaryReader,System.Int32)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="numParts"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeReader.ReadCoordinates(System.IO.BinaryReader,System.Int32)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="numPoints"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeReader.ReadCoordinate(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapeReader.CreateGeometryCollection(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.ShapeReader.Factory">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.PostGisWriter">
            <summary>
            Writes a PostGIS binary representation of a <c>Geometry</c>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.#ctor">
            <summary>
            Initializes writer with LittleIndian byte order.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.#ctor(GisSharpBlog.NetTopologySuite.IO.ByteOrder)">
            <summary>
            Initializes writer with the specified byte order.
            </summary>
            <param name="encodingType">Encoding type</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.Write(GeoAPI.Geometries.IGeometry)">
            <summary>
            Writes a binary encoded PostGIS of a given geometry.
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.Write(GeoAPI.Geometries.IGeometry,System.IO.Stream)">
            <summary>
            Writes a binary encoded PostGIS of a given geometry.
            </summary>
            <param name="geometry"></param>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.Write(GeoAPI.Geometries.IGeometry,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.WriteHeader(GeoAPI.Geometries.IGeometry,GisSharpBlog.NetTopologySuite.IO.PostGisGeometryType,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <param name="type"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.Write(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.IGeometry,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="coordinate"></param>
            <param name="baseGeometry"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.Write(GeoAPI.Geometries.IPoint,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.Write(GeoAPI.Geometries.IGeometry[],System.IO.BinaryWriter)">
            <summary>
            Write an Array of "full" Geometries
            </summary>
            <param name="geometries"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.Write(GeoAPI.Geometries.ICoordinate[],GeoAPI.Geometries.IGeometry,System.IO.BinaryWriter)">
            <summary>
            Write an Array of "slim" Points (without endianness, srid and type, 
            part of LinearRing and Linestring, but not MultiPoint!
            </summary>
            <param name="coordinates"></param>
            <param name="baseGeometry"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.Write(GeoAPI.Geometries.ILineString,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="lineString"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.Write(GeoAPI.Geometries.ILinearRing,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="ring"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.Write(GeoAPI.Geometries.IPolygon,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="polygon"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.Write(GeoAPI.Geometries.IMultiPoint,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="multiPoint"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.Write(GeoAPI.Geometries.IMultiLineString,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="multiLineString"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.Write(GeoAPI.Geometries.IMultiPolygon,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="multiPolygon"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.Write(GeoAPI.Geometries.IGeometryCollection,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="geomCollection"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.GetBytes(GeoAPI.Geometries.IGeometry)">
            <summary>
            Sets corrent length for Byte Stream.
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.SetByteStream(GeoAPI.Geometries.IGeometry)">
            <summary>
            Sets corrent length for Byte Stream.
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.SetByteStream(GeoAPI.Geometries.IGeometryCollection)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.SetByteStream(GeoAPI.Geometries.IMultiPolygon)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.SetByteStream(GeoAPI.Geometries.IMultiLineString)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.SetByteStream(GeoAPI.Geometries.IMultiPoint)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.SetByteStream(GeoAPI.Geometries.IPolygon)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.SetByteStream(GeoAPI.Geometries.IGeometry[])">
            <summary>
            Write an Array of "full" Geometries
            </summary>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.SetByteStream(GeoAPI.Geometries.ICoordinate[],GeoAPI.Geometries.IGeometry)">
            <summary>
            Write an Array of "slim" Points (without endianness and type, part of
            LinearRing and Linestring, but not MultiPoint!
            </summary>
            <param name="coordinates"></param>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.SetByteStream(GeoAPI.Geometries.ILineString)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.SetByteStream(GeoAPI.Geometries.ILinearRing)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.SetByteStream(GeoAPI.Geometries.IPoint)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.SetByteStream(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.hasZ(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.PostGisWriter.hasZ(GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            
            </summary>
            <param name="iCoordinateSequence"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.WKBWriter">
            <summary>
            Writes a Well-Known Binary byte data representation of a <c>Geometry</c>.
            </summary>
            <remarks>
            WKBWriter stores <see cref="T:GeoAPI.Geometries.ICoordinate"/> X,Y,Z values if <see cref="P:GeoAPI.Geometries.ICoordinate.Z"/> is not <see cref="F:System.Double.NaN"/>, 
            otherwise <see cref="P:GeoAPI.Geometries.ICoordinate.Z"/> value is discarded and only X,Y are stored.
            </remarks>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.WKBWriter.InitCount">
            <summary>
            Standard byte size for each complex point.
            Each complex point (LineString, Polygon, ...) contains:
                1 byte for ByteOrder and
                4 bytes for WKBType.      
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBWriter.#ctor">
            <summary>
            Initializes writer with LittleIndian byte order.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBWriter.#ctor(GisSharpBlog.NetTopologySuite.IO.ByteOrder)">
            <summary>
            Initializes writer with the specified byte order.
            </summary>
            <param name="encodingType">Encoding type</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBWriter.Write(GeoAPI.Geometries.IGeometry)">
            <summary>
            Writes a WKB representation of a given point.
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBWriter.Write(GeoAPI.Geometries.IGeometry,System.IO.Stream)">
            <summary>
            Writes a WKB representation of a given point.
            </summary>
            <param name="geometry"></param>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBWriter.Write(GeoAPI.Geometries.IGeometry,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBWriter.WriteByteOrder(System.IO.BinaryWriter)">
            <summary>
            Writes LittleIndian ByteOrder.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBWriter.Write(GeoAPI.Geometries.ICoordinate,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="coordinate"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBWriter.Write(GeoAPI.Geometries.IPoint,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBWriter.Write(GeoAPI.Geometries.ILineString,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="lineString"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBWriter.Write(GeoAPI.Geometries.ILinearRing,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="ring"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBWriter.Write(GeoAPI.Geometries.IPolygon,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="polygon"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBWriter.Write(GeoAPI.Geometries.IMultiPoint,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="multiPoint"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBWriter.Write(GeoAPI.Geometries.IMultiLineString,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="multiLineString"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBWriter.Write(GeoAPI.Geometries.IMultiPolygon,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="multiPolygon"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBWriter.Write(GeoAPI.Geometries.IGeometryCollection,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="geomCollection"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBWriter.GetBytes(GeoAPI.Geometries.IGeometry)">
            <summary>
            Sets corrent length for Byte Stream.
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBWriter.SetByteStream(GeoAPI.Geometries.IGeometry)">
            <summary>
            Sets corrent length for Byte Stream.
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBWriter.SetByteStream(GeoAPI.Geometries.IGeometryCollection)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBWriter.SetByteStream(GeoAPI.Geometries.IMultiPolygon)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBWriter.SetByteStream(GeoAPI.Geometries.IMultiLineString)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBWriter.SetByteStream(GeoAPI.Geometries.IMultiPoint)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBWriter.SetByteStream(GeoAPI.Geometries.IPolygon)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBWriter.SetByteStream(GeoAPI.Geometries.ILineString)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBWriter.SetByteStream(GeoAPI.Geometries.IPoint)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.WKBReader">
            <summary>
            Converts a Well-Known Binary byte data to a <c>Geometry</c>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBReader.#ctor">
            <summary>
            Initialize reader with a standard <c>GeometryFactory</c>. 
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBReader.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Initialize reader with the given <c>GeometryFactory</c>.
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBReader.Read(System.Byte[])">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBReader.Read(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBReader.Read(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBReader.ReadByteOrder(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBReader.ReadCoordinate(System.IO.BinaryReader,GisSharpBlog.NetTopologySuite.IO.WKBReader.CoordinateSystem)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="cs"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBReader.ReadRing(System.IO.BinaryReader,GisSharpBlog.NetTopologySuite.IO.WKBReader.CoordinateSystem)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="cs"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBReader.ReadPoint(System.IO.BinaryReader,GisSharpBlog.NetTopologySuite.IO.WKBReader.CoordinateSystem)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="cs"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBReader.ReadLineString(System.IO.BinaryReader,GisSharpBlog.NetTopologySuite.IO.WKBReader.CoordinateSystem)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="cs"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBReader.ReadPolygon(System.IO.BinaryReader,GisSharpBlog.NetTopologySuite.IO.WKBReader.CoordinateSystem)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="cs"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBReader.ReadMultiPoint(System.IO.BinaryReader,GisSharpBlog.NetTopologySuite.IO.WKBReader.CoordinateSystem)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="cs"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBReader.ReadMultiLineString(System.IO.BinaryReader,GisSharpBlog.NetTopologySuite.IO.WKBReader.CoordinateSystem)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="cs"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBReader.ReadMultiPolygon(System.IO.BinaryReader,GisSharpBlog.NetTopologySuite.IO.WKBReader.CoordinateSystem)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="cs"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WKBReader.ReadGeometryCollection(System.IO.BinaryReader,GisSharpBlog.NetTopologySuite.IO.WKBReader.CoordinateSystem)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="cs"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.WKBReader.Factory">
            <summary>
            <c>Geometry</c> builder.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.DbaseFileReader">
            <summary>
            Class that allows records in a dbase file to be enumerated.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFileReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DbaseFileReader class.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFileReader.GetHeader">
            <summary>
            Gets the header information for the dbase file.
            </summary>
            <returns>DbaseFileHeader contain header and field information.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFileReader.GetEnumerator">
            <summary>
            Gets the object that allows iterating through the members of the collection.
            </summary>
            <returns>
            An object that implements the IEnumerator interface.
            </returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.DbaseFileReader.DbaseFileEnumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFileReader.DbaseFileEnumerator.#ctor(GisSharpBlog.NetTopologySuite.IO.DbaseFileReader)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.IO.DbaseFileReader.DbaseFileEnumerator"/> class.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFileReader.DbaseFileEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is 
            before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created. 
            </exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFileReader.DbaseFileEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; 
            false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
             </exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFileReader.DbaseFileEnumerator.ReadHeader">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFileReader.DbaseFileEnumerator.Read">
            <summary>
            Read a single dbase record
            </summary>
            <returns>
            The read shapefile record,
             or null if there are no more records.
             </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFileReader.DbaseFileEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, 
            or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.DbaseFileReader.DbaseFileEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value></value>
            <returns>The current element in the collection.</returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection
            or after the last element.
            </exception>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Quadtree.Quadtree">
            <summary>
            A Quadtree is a spatial index structure for efficient querying
            of 2D rectangles.  If other kinds of spatial objects
            need to be indexed they can be represented by their
            envelopes    
            The quadtree structure is used to provide a primary filter
            for range rectangle queries.  The Query() method returns a list of
            all objects which may intersect the query rectangle.  Note that
            it may return objects which do not in fact intersect.
            A secondary filter is required to test for exact intersection.
            Of course, this secondary filter may consist of other tests besides
            intersection, such as testing other kinds of spatial relationships.
            This implementation does not require specifying the extent of the inserted
            items beforehand.  It will automatically expand to accomodate any extent
            of dataset.
            This data structure is also known as an <c>MX-CIF quadtree</c>
            following the usage of Samet and others.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.ISpatialIndex">
            <summary> 
            The basic insertion and query operations supported by classes
            implementing spatial index algorithms.
            A spatial index typically provides a primary filter for range rectangle queries. A
            secondary filter is required to test for exact intersection. Of course, this
            secondary filter may consist of other tests besides intersection, such as
            testing other kinds of spatial relationships.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.ISpatialIndex.Insert(GeoAPI.Geometries.IEnvelope,System.Object)">
            <summary>
            Adds a spatial item with an extent specified by the given <c>Envelope</c> to the index.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.ISpatialIndex.Query(GeoAPI.Geometries.IEnvelope)">
            <summary> 
            Queries the index for all items whose extents intersect the given search <c>Envelope</c> 
            Note that some kinds of indexes may also return objects which do not in fact
            intersect the query envelope.
            </summary>
            <param name="searchEnv">The envelope to query for.</param>
            <returns>A list of the items found by the query.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.ISpatialIndex.Query(GeoAPI.Geometries.IEnvelope,GisSharpBlog.NetTopologySuite.Index.IItemVisitor)">
            <summary>
            Queries the index for all items whose extents intersect the given search <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Envelope"/>,
            and applies an <see cref="T:GisSharpBlog.NetTopologySuite.Index.IItemVisitor"/> to them.
            Note that some kinds of indexes may also return objects which do not in fact
            intersect the query envelope.
            </summary>
            <param name="searchEnv">The envelope to query for.</param>
            <param name="visitor">A visitor object to apply to the items found.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.ISpatialIndex.Remove(GeoAPI.Geometries.IEnvelope,System.Object)">
            <summary> 
            Removes a single item from the tree.
            </summary>
            <param name="itemEnv">The Envelope of the item to remove.</param>
            <param name="item">The item to remove.</param>
            <returns> <c>true</c> if the item was found.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.Quadtree.EnsureExtent(GeoAPI.Geometries.IEnvelope,System.Double)">
            <summary>
            Ensure that the envelope for the inserted item has non-zero extents.
            Use the current minExtent to pad the envelope, if necessary.
            </summary>
            <param name="itemEnv"></param>
            <param name="minExtent"></param>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Index.Quadtree.Quadtree.minExtent">
            <summary>
            minExtent is the minimum envelope extent of all items
            inserted into the tree so far. It is used as a heuristic value
            to construct non-zero envelopes for features with zero X and/or Y extent.
            Start with a non-zero extent, in case the first feature inserted has
            a zero extent in both directions.  This value may be non-optimal, but
            only one feature will be inserted with this value.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.Quadtree.#ctor">
            <summary>
            Constructs a Quadtree with zero items.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.Quadtree.Insert(GeoAPI.Geometries.IEnvelope,System.Object)">
            <summary>
            
            </summary>
            <param name="itemEnv"></param>
            <param name="item"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.Quadtree.Remove(GeoAPI.Geometries.IEnvelope,System.Object)">
            <summary> 
            Removes a single item from the tree.
            </summary>
            <param name="itemEnv">The Envelope of the item to remove.</param>
            <param name="item">The item to remove.</param>
            <returns><c>true</c> if the item was found.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.Quadtree.Query(GeoAPI.Geometries.IEnvelope)">
            <summary>
            
            </summary>
            <param name="searchEnv"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.Quadtree.Query(GeoAPI.Geometries.IEnvelope,GisSharpBlog.NetTopologySuite.Index.IItemVisitor)">
            <summary>
            
            </summary>
            <param name="searchEnv"></param>
            <param name="visitor"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.Quadtree.QueryAll">
            <summary>
            Return a list of all items in the Quadtree.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.Quadtree.CollectStats(GeoAPI.Geometries.IEnvelope)">
            <summary>
            
            </summary>
            <param name="itemEnv"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Quadtree.Quadtree.Depth">
            <summary> 
            Returns the number of levels in the tree.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Quadtree.Quadtree.Count">
            <summary> 
            Returns the number of items in the tree.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing.startDe">
            <summary>
            The directed edge which starts the list of edges for this EdgeRing.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing.geometryFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing.#ctor(GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="geometryFactory"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing.GetCoordinate(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing.AddHole(GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing)">
            <summary>
            
            </summary>
            <param name="ring"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing.ToPolygon(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            
            </summary>
            <param name="geometryFactory"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing.ComputeRing">
            <summary>
            Compute a LinearRing from the point list previously collected.
            Test if the ring is a hole (i.e. if it is CCW) and set the hole flag
            accordingly.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing.GetNext(GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge)">
            <summary>
            
            </summary>
            <param name="de"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing.SetEdgeRing(GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge,GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing)">
            <summary>
            
            </summary>
            <param name="de"></param>
            <param name="er"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing.ComputePoints(GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge)">
            <summary> 
            Collect all the points from the DirectedEdges of this ring into a contiguous list.
            </summary>
            <param name="start"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing.ComputeMaxNodeDegree">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing.SetInResult">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing.MergeLabel(GisSharpBlog.NetTopologySuite.GeometriesGraph.Label)">
            <summary>
            
            </summary>
            <param name="deLabel"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing.MergeLabel(GisSharpBlog.NetTopologySuite.GeometriesGraph.Label,System.Int32)">
            <summary> 
            Merge the RHS label from a DirectedEdge into the label for this EdgeRing.
            The DirectedEdge label may be null.  This is acceptable - it results
            from a node which is NOT an intersection node between the Geometries
            (e.g. the end node of a LinearRing).  In this case the DirectedEdge label
            does not contribute any information to the overall labelling, and is simply skipped.
            </summary>
            <param name="deLabel"></param>
            <param name="geomIndex"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing.AddPoints(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <param name="isForward"></param>
            <param name="isFirstEdge"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing.ContainsPoint(GeoAPI.Geometries.ICoordinate)">
            <summary> 
            This method will cause the ring to be computed.
            It will also check any holes, if they have been assigned.
            </summary>
            <param name="p"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing.IsIsolated">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing.IsHole">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing.LinearRing">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing.Label">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing.IsShell">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing.Shell">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing.Edges">
            <summary> 
            Returns the list of DirectedEdges that make up this EdgeRing.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing.MaxNodeDegree">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeIntersection">
            <summary> 
            An EdgeIntersection represents a point on an
            edge which intersects with another edge.
            The intersection may either be a single point, or a line segment
            (in which case this point is the start of the line segment)
            The label attached to this intersection point applies to
            the edge from this point forwards, until the next
            intersection or the end of the edge.
            The intersection point must be precise.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeIntersection.#ctor(GeoAPI.Geometries.ICoordinate,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="coord"></param>
            <param name="segmentIndex"></param>
            <param name="dist"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeIntersection.CompareTo(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeIntersection.Compare(System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="segmentIndex"></param>
            <param name="dist"></param>
            <returns>
            -1 this EdgeIntersection is located before the argument location,
            0 this EdgeIntersection is at the argument location,
            1 this EdgeIntersection is located after the argument location.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeIntersection.IsEndPoint(System.Int32)">
            <summary>
            
            </summary>
            <param name="maxSegmentIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeIntersection.Write(System.IO.StreamWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeIntersection.Coordinate">
            <summary>
            The point of intersection.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeIntersection.SegmentIndex">
            <summary>
            The index of the containing line segment in the parent edge.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeIntersection.Distance">
            <summary>
            The edge distance of this point along the containing line segment.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge.DepthFactor(GeoAPI.Geometries.Locations,GeoAPI.Geometries.Locations)">
            <summary>
            Computes the factor for the change in depth when moving from one location to another.
            E.g. if crossing from the Interior to the Exterior the depth decreases, so the factor is -1.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge.isForward">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge.depth">
            <summary> 
            The depth of each side (position) of this edge.
            The 0 element of the array is never used.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge.#ctor(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge,System.Boolean)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <param name="isForward"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge.GetDepth(GisSharpBlog.NetTopologySuite.GeometriesGraph.Positions)">
            <summary>
            
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge.SetDepth(GisSharpBlog.NetTopologySuite.GeometriesGraph.Positions,System.Int32)">
            <summary>
            
            </summary>
            <param name="position"></param>
            <param name="depthVal"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge.ComputeDirectedLabel">
            <summary>
            Compute the label in the appropriate orientation for this DirEdge.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge.SetEdgeDepths(GisSharpBlog.NetTopologySuite.GeometriesGraph.Positions,System.Int32)">
            <summary> 
            Set both edge depths.  
            One depth for a given side is provided.  
            The other is computed depending on the Location 
            transition and the depthDelta of the edge.
            </summary>
            <param name="depth"></param>
            <param name="position"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge.OLDSetEdgeDepths(GisSharpBlog.NetTopologySuite.GeometriesGraph.Positions,System.Int32)">
            <summary> 
            Set both edge depths.  One depth for a given side is provided.  The other is
            computed depending on the Location transition and the depthDelta of the edge.
            </summary>
            <param name="depth"></param>
            <param name="position"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge.Write(System.IO.StreamWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge.WriteEdge(System.IO.StreamWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge.InResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge.IsInResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge.Visited">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge.IsVisited">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge.EdgeRing">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge.MinEdgeRing">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge.DepthDelta">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge.VisitedEdge">
            <summary>
            VisitedEdge get property returns <c>true</c> if bot Visited 
            and Sym.Visited are <c>true</c>.
            VisitedEdge set property marks both DirectedEdges attached to a given Edge.
            This is used for edges corresponding to lines, which will only
            appear oriented in a single direction in the result.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge.IsForward">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge.Sym">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge.Next">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge.NextMin">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge.IsLineEdge">
            <summary>
            This edge is a line edge if
            at least one of the labels is a line label
            any labels which are not line labels have all Locations = Exterior.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge.IsInteriorAreaEdge">
            <summary> 
            This is an interior Area edge if
            its label is an Area label for both Geometries
            and for each Geometry both sides are in the interior.
            </summary>
            <returns><c>true</c> if this is an interior Area edge.</returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.MultiPolygon">
            <summary>
            Basic implementation of <c>MultiPolygon</c>.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection">
            <summary>
            Basic implementation of <c>GeometryCollection</c>.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry">
            <summary>  
            Basic implementation of <c>Geometry</c>.
            <c>Clone</c> returns a deep copy of the object.
            <para>
            Binary Predicates: 
            Because it is not clear at this time what semantics for spatial
            analysis methods involving <c>GeometryCollection</c>s would be useful,
            <c>GeometryCollection</c>s are not supported as arguments to binary
            predicates (other than <c>ConvexHull</c>) or the <c>Relate</c> method.
            </para>
            <para>
            Set-Theoretic Methods: 
            The spatial analysis methods will
            return the most specific class possible to represent the result. If the
            result is homogeneous, a <c>Point</c>, <c>LineString</c>, or
            <c>Polygon</c> will be returned if the result contains a single
            element; otherwise, a <c>MultiPoint</c>, <c>MultiLineString</c>,
            or <c>MultiPolygon</c> will be returned. If the result is
            heterogeneous a <c>GeometryCollection</c> will be returned.
            </para>
            <para>
            Representation of Computed Geometries:  
            The SFS states that the result
            of a set-theoretic method is the "point-set" result of the usual
            set-theoretic definition of the operation (SFS 3.2.21.1). However, there are
            sometimes many ways of representing a point set as a <c>Geometry</c>.
            The SFS does not specify an unambiguous representation of a given point set
            returned from a spatial analysis method. One goal of NTS is to make this
            specification precise and unambiguous. NTS will use a canonical form for
            <c>Geometry</c>s returned from spatial analysis methods. The canonical
            form is a <c>Geometry</c> which is simple and noded:
            Simple means that the Geometry returned will be simple according to
            the NTS definition of <c>IsSimple</c>.
            Noded applies only to overlays involving <c>LineString</c>s. It
            means that all intersection points on <c>LineString</c>s will be
            present as endpoints of <c>LineString</c>s in the result.
            This definition implies that non-simple geometries which are arguments to
            spatial analysis methods must be subjected to a line-dissolve process to
            ensure that the results are simple.
            </para>
            <para>
            Constructed Points And The Precision Model: 
            The results computed by the set-theoretic methods may
            contain constructed points which are not present in the input <c>Geometry</c>s. 
            These new points arise from intersections between line segments in the
            edges of the input <c>Geometry</c>s. In the general case it is not
            possible to represent constructed points exactly. This is due to the fact
            that the coordinates of an intersection point may contain twice as many bits
            of precision as the coordinates of the input line segments. In order to
            represent these constructed points explicitly, NTS must truncate them to fit
            the <c>PrecisionModel</c>. 
            Unfortunately, truncating coordinates moves them slightly. Line segments
            which would not be coincident in the exact result may become coincident in
            the truncated representation. This in turn leads to "topology collapses" --
            situations where a computed element has a lower dimension than it would in
            the exact result. 
            When NTS detects topology collapses during the computation of spatial
            analysis methods, it will throw an exception. If possible the exception will
            report the location of the collapse. 
            </para>
            </summary>
            <remarks>
            <see cref="M:System.Object.Equals(System.Object)"/> and <see cref="M:System.Object.GetHashCode"/> are not overridden, so that when two
            topologically equal Geometries are added to Collections and Dictionaries, they
            remain distinct. This behaviour is desired in many cases.
            </remarks>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.Geometry.SortedClasses">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.Geometry.envelope">
            <summary>
            The bounding box of this <c>Geometry</c>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.HasNonEmptyElements(GeoAPI.Geometries.IGeometry[])">
            <summary>  
            Returns true if the array contains any non-empty <c>Geometry</c>s.
            </summary>
            <param name="geometries"> an array of <c>Geometry</c>s; no elements may be <c>null</c></param>
            <returns>            
            <c>true</c> if any of the <c>Geometry</c>s
            <c>IsEmpty</c> methods return <c>false</c>.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.HasNullElements(System.Object[])">
            <summary>  
            Returns true if the array contains any <c>null</c> elements.
            </summary>
            <param name="array"> an array to validate.</param>
            <returns><c>true</c> if any of <c>array</c>s elements are <c>null</c>.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.GetGeometryN(System.Int32)">
            <summary>
            Returns an element Geometry from a GeometryCollection,
            or <code>this</code>, if the geometry is not a collection.
            </summary>
            <param name="n">The index of the geometry element.</param>
            <returns>The n'th geometry contained in this geometry.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Distance(GeoAPI.Geometries.IGeometry)">
            <summary>  
            Returns the minimum distance between this <c>Geometry</c>
            and the <c>Geometry</c> g.
            </summary>
            <param name="g">The <c>Geometry</c> from which to compute the distance.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.IsWithinDistance(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary> 
            Tests whether the distance from this <c>Geometry</c>
            to another is less than or equal to a specified value.
            </summary>
            <param name="geom">the Geometry to check the distance to.</param>
            <param name="distance">the distance value to compare.</param>
            <returns><c>true</c> if the geometries are less than <c>distance</c> apart.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.GeometryChanged">
            <summary>
            Notifies this Geometry that its Coordinates have been changed by an external
            party (using a CoordinateFilter, for example). The Geometry will flush
            and/or update any information it has cached (such as its Envelope).
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.GeometryChangedAction">
            <summary> 
            Notifies this Geometry that its Coordinates have been changed by an external
            party. When GeometryChanged is called, this method will be called for
            this Geometry and its component Geometries.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Disjoint(GeoAPI.Geometries.IGeometry)">
            <summary>  
            Returns <c>true</c> if the DE-9IM intersection matrix for the two
            <c>Geometry</c>s is FF*FF****.
            </summary>
            <param name="g">The <c>Geometry</c> with which to compare this <c>Geometry</c>.</param>
            <returns><c>true</c> if the two <c>Geometry</c>s are disjoint.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Touches(GeoAPI.Geometries.IGeometry)">
            <summary>  
            Returns <c>true</c> if the DE-9IM intersection matrix for the two
            <c>Geometry</c>s is FT*******, F**T***** or F***T****.
            </summary>
            <param name="g">The <c>Geometry</c> with which to compare this <c>Geometry</c>.</param>
            <returns>
            <c>true</c> if the two <c>Geometry</c>s touch;
            Returns false if both <c>Geometry</c>s are points.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Intersects(GeoAPI.Geometries.IGeometry)">
            <summary>  
            Returns <c>true</c> if <c>disjoint</c> returns false.
            </summary>
            <param name="g">The <c>Geometry</c> with which to compare this <c>Geometry</c>.</param>
            <returns><c>true</c> if the two <c>Geometry</c>s intersect.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Crosses(GeoAPI.Geometries.IGeometry)">
            <summary>  
            Returns <c>true</c> if the DE-9IM intersection matrix for the two
            <c>Geometry</c>s is
             T*T****** (for a point and a curve, a point and an area or a line
            and an area) 0******** (for two curves).
            </summary>
            <param name="g">The <c>Geometry</c> with which to compare this <c>Geometry</c>.</param>
            <returns>
            <c>true</c> if the two <c>Geometry</c>s cross.
            For this function to return <c>true</c>, the <c>Geometry</c>
            s must be a point and a curve; a point and a surface; two curves; or a
            curve and a surface.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Within(GeoAPI.Geometries.IGeometry)">
            <summary>
            Returns <c>true</c> if the DE-9IM intersection matrix for the two
            <c>Geometry</c>s is T*F**F***.
            </summary>
            <param name="g">The <c>Geometry</c> with which to compare this <c>Geometry</c>.</param>
            <returns><c>true</c> if this <c>Geometry</c> is within <c>other</c>.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Contains(GeoAPI.Geometries.IGeometry)">
            <summary>
            Returns <c>true</c> if <c>other.within(this)</c> returns <c>true</c>.
            </summary>
            <param name="g">The <c>Geometry</c> with which to compare this <c>Geometry</c>.</param>
            <returns><c>true</c> if this <c>Geometry</c> contains <c>other</c>.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Overlaps(GeoAPI.Geometries.IGeometry)">
            <summary>
            Returns <c>true</c> if the DE-9IM intersection matrix for the two
            <c>Geometry</c>s is
             T*T***T** (for two points or two surfaces)
             1*T***T** (for two curves).
            </summary>
            <param name="g">The <c>Geometry</c> with which to compare this <c>Geometry</c>.</param>
            <returns>
            <c>true</c> if the two <c>Geometry</c>s overlap.
            For this function to return <c>true</c>, the <c>Geometry</c>
            s must be two points, two curves or two surfaces.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Covers(GeoAPI.Geometries.IGeometry)">
            <summary>
            Returns <c>true</c> if this geometry covers the specified geometry.
            <para>
            The <c>Covers</c> predicate has the following equivalent definitions:
                - Every point of the other geometry is a point of this geometry.
                - The DE-9IM Intersection Matrix for the two geometries is <c>T*****FF*</c> or <c>*T****FF*</c> or <c>***T**FF*</c> or <c>****T*FF*</c>.
                - <c>g.CoveredBy(this)</c> (<c>Covers</c> is the inverse of <c>CoveredBy</c>).
            </para>
            Note the difference between <c>Covers</c> and <c>Contains</c>: <c>Covers</c> is a more inclusive relation.
            In particular, unlike <c>Contains</c> it does not distinguish between
            points in the boundary and in the interior of geometries.        
            </summary>
            <remarks>
            For most situations, <c>Covers</c> should be used in preference to <c>Contains</c>.
            As an added benefit, <c>Covers</c> is more amenable to optimization, and hence should be more performant.
            </remarks>
            <param name="g">The <c>Geometry</c> with which to compare this <c>Geometry</c></param>
            <returns><c>true</c> if this <c>Geometry</c> covers <paramref name="g"/></returns>
            <seealso cref="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Contains(GeoAPI.Geometries.IGeometry)"/>
            <seealso cref="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.CoveredBy(GeoAPI.Geometries.IGeometry)"/>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.CoveredBy(GeoAPI.Geometries.IGeometry)">
            <summary>
            Returns <c>true</c> if this geometry is covered by the specified geometry.
            <para>
            The <c>CoveredBy</c> predicate has the following equivalent definitions:
                - Every point of this geometry is a point of the other geometry.
                - The DE-9IM Intersection Matrix for the two geometries is <c>T*F**F***</c> or <c>*TF**F***</c> or <c>**FT*F***</c> or <c>**F*TF***</c>.
                - <c>g.Covers(this)</c> (<c>CoveredBy</c> is the inverse of <c>Covers</c>).
            </para>
            Note the difference between <c>CoveredBy</c> and <c>Within</c>: <c>CoveredBy</c> is a more inclusive relation.
            </summary>
            <param name="g">The <c>Geometry</c> with which to compare this <c>Geometry</c></param>.
            <returns><c>true</c> if this <c>Geometry</c> is covered by <paramref name="g"/>.</returns>
            <seealso cref="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Within(GeoAPI.Geometries.IGeometry)"/>
            <seealso cref="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Covers(GeoAPI.Geometries.IGeometry)"/>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Relate(GeoAPI.Geometries.IGeometry,System.String)">
            <summary>  
            Returns <c>true</c> if the elements in the DE-9IM intersection
            matrix for the two <c>Geometry</c>s match the elements in <c>intersectionPattern</c>
            , which may be:
             0
             1
             2
             T ( = 0, 1 or 2)
             F ( = -1)
             * ( = -1, 0, 1 or 2)
            For more information on the DE-9IM, see the OpenGIS Simple Features
            Specification.
            </summary>
            <param name="g">The <c>Geometry</c> with which to compare this <c>Geometry</c>.</param>
            <param name="intersectionPattern">The pattern against which to check the intersection matrix for the two <c>Geometry</c>s.</param>
            <returns><c>true</c> if the DE-9IM intersection matrix for the two <c>Geometry</c>s match <c>intersectionPattern</c>.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Relate(GeoAPI.Geometries.IGeometry)">
            <summary>
            Returns the DE-9IM intersection matrix for the two <c>Geometry</c>s.
            </summary>
            <param name="g">The <c>Geometry</c> with which to compare this <c>Geometry</c></param>
            <returns>
            A matrix describing the intersections of the interiors,
            boundaries and exteriors of the two <c>Geometry</c>s.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Equals(GeoAPI.Geometries.IGeometry)">
            <summary>
            Returns <c>true</c> if the DE-9IM intersection matrix for the two
            <c>Geometry</c>s is T*F**FFF*.
            </summary>
            <param name="g">The <c>Geometry</c> with which to compare this <c>Geometry</c>.</param>
            <returns><c>true</c> if the two <c>Geometry</c>s are equal.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.CompareGeometryCollections(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.op_Equality(GisSharpBlog.NetTopologySuite.Geometries.Geometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.op_Inequality(GisSharpBlog.NetTopologySuite.Geometries.Geometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.GetHashCode">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.ToString">
            <summary>
            Returns the Well-known Text representation of this <c>Geometry</c>.
            For a definition of the Well-known Text format, see the OpenGIS Simple
            Features Specification.
            </summary>
            <returns>
            The Well-known Text representation of this <c>Geometry</c>.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.ToText">
            <summary>
            Returns the Well-known Text representation of this <c>Geometry</c>.
            For a definition of the Well-known Text format, see the OpenGIS Simple
            Features Specification.
            </summary>
            <returns>
            The Well-known Text representation of this <c>Geometry</c>.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.AsText">
            <summary>
            <see cref="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.ToText"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.ToBinary">
            <summary>
            Returns the Well-known Binary representation of this <c>Geometry</c>.
            For a definition of the Well-known Binary format, see the OpenGIS Simple
            Features Specification.
            </summary>
            <returns>The Well-known Binary representation of this <c>Geometry</c>.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.AsBinary">
            <summary>
            <see cref="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.ToBinary"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.ToGMLFeature">
            <summary>
            Returns the feature representation as GML 2.1.1 XML document.
            This XML document is based on <c>Geometry.xsd</c> schema.
            NO features or XLink are implemented here!
            </summary>        
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Buffer(System.Double)">
            <summary>
            Returns a buffer region around this <c>Geometry</c> having the given width.
            The buffer of a Geometry is the Minkowski sum or difference of the Geometry with a disc of radius <c>distance</c>.
            </summary>
            <param name="distance">
            The width of the buffer, interpreted according to the
            <c>PrecisionModel</c> of the <c>Geometry</c>.
            </param>
            <returns>
            All points whose distance from this <c>Geometry</c>
            are less than or equal to <c>distance</c>.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Buffer(System.Double,GeoAPI.Operations.Buffer.BufferStyle)">
            <summary>
            Returns a buffer region around this <c>Geometry</c> having the given width.
            The buffer of a Geometry is the Minkowski sum or difference of the Geometry with a disc of radius <c>distance</c>.
            </summary>
            <param name="distance">
            The width of the buffer, interpreted according to the
            <c>PrecisionModel</c> of the <c>Geometry</c>.
            </param>
            <param name="endCapStyle">Cap Style to use for compute buffer.</param>
            <returns>
            All points whose distance from this <c>Geometry</c>
            are less than or equal to <c>distance</c>.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Buffer(System.Double,System.Int32)">
            <summary>
            Returns a buffer region around this <c>Geometry</c> having the given
            width and with a specified number of segments used to approximate curves.
            The buffer of a Geometry is the Minkowski sum of the Geometry with
            a disc of radius <c>distance</c>.  Curves in the buffer polygon are
            approximated with line segments.  This method allows specifying the
            accuracy of that approximation.
            </summary>
            <param name="distance">
            The width of the buffer, interpreted according to the
            <c>PrecisionModel</c> of the <c>Geometry</c>.
            </param>
            <param name="quadrantSegments">The number of segments to use to approximate a quadrant of a circle.</param>
            <returns>
            All points whose distance from this <c>Geometry</c>
            are less than or equal to <c>distance</c>.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Buffer(System.Double,System.Int32,GeoAPI.Operations.Buffer.BufferStyle)">
            <summary>
            Returns a buffer region around this <c>Geometry</c> having the given
            width and with a specified number of segments used to approximate curves.
            The buffer of a Geometry is the Minkowski sum of the Geometry with
            a disc of radius <c>distance</c>.  Curves in the buffer polygon are
            approximated with line segments.  This method allows specifying the
            accuracy of that approximation.
            </summary>
            <param name="distance">
            The width of the buffer, interpreted according to the
            <c>PrecisionModel</c> of the <c>Geometry</c>.
            </param>
            <param name="quadrantSegments">The number of segments to use to approximate a quadrant of a circle.</param>
            <param name="endCapStyle">Cap Style to use for compute buffer.</param>
            <returns>
            All points whose distance from this <c>Geometry</c>
            are less than or equal to <c>distance</c>.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.ConvexHull">
            <summary>
            Returns the smallest convex <c>Polygon</c> that contains all the
            points in the <c>Geometry</c>. This obviously applies only to <c>Geometry</c>
            s which contain 3 or more points.
            </summary>
            <returns>the minimum-area convex polygon containing this <c>Geometry</c>'s points.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Intersection(GeoAPI.Geometries.IGeometry)">
            <summary>
            Returns a <c>Geometry</c> representing the points shared by this
            <c>Geometry</c> and <c>other</c>.
            </summary>
            <param name="other">The <c>Geometry</c> with which to compute the intersection.</param>
            <returns>The points common to the two <c>Geometry</c>s.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Union(GeoAPI.Geometries.IGeometry)">
            <summary>
            Returns a <c>Geometry</c> representing all the points in this <c>Geometry</c>
            and <c>other</c>.
            </summary>
            <param name="other">The <c>Geometry</c> with which to compute the union.</param>
            <returns>A set combining the points of this <c>Geometry</c> and the points of <c>other</c>.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Difference(GeoAPI.Geometries.IGeometry)">
            <summary>
            Returns a <c>Geometry</c> representing the points making up this
            <c>Geometry</c> that do not make up <c>other</c>. This method
            returns the closure of the resultant <c>Geometry</c>.
            </summary>
            <param name="other">The <c>Geometry</c> with which to compute the difference.</param>
            <returns>The point set difference of this <c>Geometry</c> with <c>other</c>.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.SymmetricDifference(GeoAPI.Geometries.IGeometry)">
            <summary>
            Returns a set combining the points in this <c>Geometry</c> not in
            <c>other</c>, and the points in <c>other</c> not in this
            <c>Geometry</c>. This method returns the closure of the resultant
            <c>Geometry</c>.
            </summary>
            <param name="other">The <c>Geometry</c> with which to compute the symmetric difference.</param>
            <returns>The point set symmetric difference of this <c>Geometry</c> with <c>other</c>.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.EqualsExact(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            Returns true if the two <c>Geometry</c>s are exactly equal,
            up to a specified tolerance.
            Two Geometries are exactly within a tolerance equal iff:
            they have the same class,
            they have the same values of Coordinates,
            within the given tolerance distance, in their internal
            Coordinate lists, in exactly the same order.
            If this and the other <c>Geometry</c>s are
            composites and any children are not <c>Geometry</c>s, returns
            false.
            </summary>
            <param name="other">The <c>Geometry</c> with which to compare this <c>Geometry</c></param>
            <param name="tolerance">Distance at or below which two Coordinates will be considered equal.</param>
            <returns>
            <c>true</c> if this and the other <c>Geometry</c>
            are of the same class and have equal internal data.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.EqualsExact(GeoAPI.Geometries.IGeometry)">
            <summary>
            Returns true if the two <c>Geometry</c>s are exactly equal.
            Two Geometries are exactly equal iff:
            they have the same class,
            they have the same values of Coordinates in their internal
            Coordinate lists, in exactly the same order.
            If this and the other <c>Geometry</c>s are
            composites and any children are not <c>Geometry</c>s, returns
            false.
            This provides a stricter test of equality than <c>equals</c>.
            </summary>
            <param name="other">The <c>Geometry</c> with which to compare this <c>Geometry</c>.</param>
            <returns>
            <c>true</c> if this and the other <c>Geometry</c>
            are of the same class and have equal internal data.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Apply(GeoAPI.Geometries.ICoordinateFilter)">
            <summary>
            Performs an operation with or on this <c>Geometry</c>'s
            coordinates. If you are using this method to modify the point, be sure
            to call GeometryChanged() afterwards. Note that you cannot use this
            method to
            modify this Geometry if its underlying CoordinateSequence's Get method
            returns a copy of the Coordinate, rather than the actual Coordinate stored
            (if it even stores Coordinates at all).
            </summary>
            <param name="filter">The filter to apply to this <c>Geometry</c>'s coordinates</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Apply(GeoAPI.Geometries.IGeometryFilter)">
            <summary>
            Performs an operation with or on this <c>Geometry</c> and its
            subelement <c>Geometry</c>s (if any).
            Only GeometryCollections and subclasses
            have subelement Geometry's.
            </summary>
            <param name="filter">
            The filter to apply to this <c>Geometry</c> (and
            its children, if it is a <c>GeometryCollection</c>).
            </param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Apply(GeoAPI.Geometries.IGeometryComponentFilter)">
            <summary>
            Performs an operation with or on this Geometry and its
            component Geometry's. Only GeometryCollections and
            Polygons have component Geometry's; for Polygons they are the LinearRings
            of the shell and holes.
            </summary>
            <param name="filter">The filter to apply to this <c>Geometry</c>.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Normalize">
            <summary>
            Converts this <c>Geometry</c> to normal form (or 
            canonical form ). Normal form is a unique representation for <c>Geometry</c>
            s. It can be used to test whether two <c>Geometry</c>s are equal
            in a way that is independent of the ordering of the coordinates within
            them. Normal form equality is a stronger condition than topological
            equality, but weaker than pointwise equality. The definitions for normal
            form use the standard lexicographical ordering for coordinates. "Sorted in
            order of coordinates" means the obvious extension of this ordering to
            sequences of coordinates.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.CompareTo(System.Object)">
            <summary>
            Returns whether this <c>Geometry</c> is greater than, equal to,
            or less than another <c>Geometry</c>. 
            If their classes are different, they are compared using the following
            ordering:
                Point (lowest),
                MultiPoint,
                LineString,
                LinearRing,
                MultiLineString,
                Polygon,
                MultiPolygon,
                GeometryCollection (highest).
            If the two <c>Geometry</c>s have the same class, their first
            elements are compared. If those are the same, the second elements are
            compared, etc.
            </summary>
            <param name="o">A <c>Geometry</c> with which to compare this <c>Geometry</c></param>
            <returns>
            A positive number, 0, or a negative number, depending on whether
            this object is greater than, equal to, or less than <c>o</c>, as
            defined in "Normal Form For Geometry" in the NTS Technical
            Specifications.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.CompareTo(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.IsEquivalentClass(GeoAPI.Geometries.IGeometry)">
            <summary>
            Returns whether the two <c>Geometry</c>s are equal, from the point
            of view of the <c>EqualsExact</c> method. Called by <c>EqualsExact</c>
            . In general, two <c>Geometry</c> classes are considered to be
            "equivalent" only if they are the same class. An exception is <c>LineString</c>
            , which is considered to be equivalent to its subclasses.
            </summary>
            <param name="other">The <c>Geometry</c> with which to compare this <c>Geometry</c> for equality.</param>
            <returns>
            <c>true</c> if the classes of the two <c>Geometry</c>
            s are considered to be equal by the <c>equalsExact</c> method.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.CheckNotGeometryCollection(GeoAPI.Geometries.IGeometry)">
            <summary>
            Throws an exception if <c>g</c>'s class is <c>GeometryCollection</c>. 
            (its subclasses do not trigger an exception).
            </summary>
            <param name="g">The <c>Geometry</c> to check.</param>
            <exception cref="T:System.ArgumentException">
            if <c>g</c> is a <c>GeometryCollection</c>, but not one of its subclasses.
            </exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.isGeometryCollection(GeoAPI.Geometries.IGeometry)">
            <summary>
            Returns <c>true</c> if <c>g</c>'s class is <c>GeometryCollection</c>. 
            (its subclasses do not trigger an exception).
            </summary>
            <param name="g">The <c>Geometry</c> to check.</param>
            <exception cref="T:System.ArgumentException">
            If <c>g</c> is a <c>GeometryCollection</c>, but not one of its subclasses.
            </exception>        
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.ComputeEnvelopeInternal">
            <summary>
            Returns the minimum and maximum x and y values in this <c>Geometry</c>
            , or a null <c>Envelope</c> if this <c>Geometry</c> is empty.
            Unlike <c>EnvelopeInternal</c>, this method calculates the <c>Envelope</c>
            each time it is called; <c>EnvelopeInternal</c> caches the result
            of this method.        
            </summary>
            <returns>
            This <c>Geometry</c>s bounding box; if the <c>Geometry</c>
            is empty, <c>Envelope.IsNull</c> will return <c>true</c>.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.CompareToSameClass(System.Object)">
            <summary>
            Returns whether this <c>Geometry</c> is greater than, equal to,
            or less than another <c>Geometry</c> having the same class.
            </summary>
            <param name="o">A <c>Geometry</c> having the same class as this <c>Geometry</c>.</param>
            <returns>
            A positive number, 0, or a negative number, depending on whether
            this object is greater than, equal to, or less than <c>o</c>, as
            defined in "Normal Form For Geometry" in the NTS Technical
            Specifications.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Compare(System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Returns the first non-zero result of <c>CompareTo</c> encountered as
            the two <c>Collection</c>s are iterated over. If, by the time one of
            the iterations is complete, no non-zero result has been encountered,
            returns 0 if the other iteration is also complete. If <c>b</c>
            completes before <c>a</c>, a positive number is returned; if a
            before b, a negative number.
            </summary>
            <param name="a">A <c>Collection</c> of <c>IComparable</c>s.</param>
            <param name="b">A <c>Collection</c> of <c>IComparable</c>s.</param>
            <returns>The first non-zero <c>compareTo</c> result, if any; otherwise, zero.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Equal(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Geometry.CreatePointFromInternalCoord(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="coord"></param>
            <param name="exemplar"></param>
            <returns></returns>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.Geometry.DefaultFactory">
            <summary>
            A predefined <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory"/> with <see cref="P:GisSharpBlog.NetTopologySuite.Geometries.Geometry.PrecisionModel"/> <c> == </c> <see cref="F:GeoAPI.Geometries.PrecisionModels.Fixed"/>.
            </summary>
            <seealso cref="F:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.Default"/>
            <seealso cref="F:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.Fixed"/>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Factory">
            <summary> 
            Gets the factory which contains the context in which this point was created.
            </summary>
            <returns>The factory for this point.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Geometry.UserData">
            <summary> 
            Gets/Sets the user data object for this point, if any.
            A simple scheme for applications to add their own custom data to a Geometry.
            An example use might be to add an object representing a Coordinate Reference System.
            Note that user data objects are not present in geometries created by
            construction methods.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Geometry.SRID">
            <summary>  
            Gets/Sets the ID of the Spatial Reference System used by the <c>Geometry</c>. 
            NTS supports Spatial Reference System information in the simple way
            defined in the SFS. A Spatial Reference System ID (SRID) is present in
            each <c>Geometry</c> object. <c>Geometry</c> provides basic
            accessor operations for this field, but no others. The SRID is represented
            as an integer.
            </summary>        
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Geometry.GeometryType">
            <summary>  
            Returns the name of this object's interface.
            </summary>
            <returns>The name of this <c>Geometry</c>s most specific interface.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Geometry.PrecisionModel">
            <summary>  
            Returns the <c>PrecisionModel</c> used by the <c>Geometry</c>.
            </summary>
            <returns>    
            the specification of the grid of allowable points, for this
            <c>Geometry</c> and all other <c>Geometry</c>s.
            </returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Coordinate">
            <summary>  
            Returns a vertex of this <c>Geometry</c>.
            </summary>
            <returns>    
            a Coordinate which is a vertex of this <c>Geometry</c>.
            Returns <c>null</c> if this Geometry is empty.
            </returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Coordinates">
            <summary>  
            Returns this <c>Geometry</c> s vertices. If you modify the coordinates
            in this array, be sure to call GeometryChanged afterwards.
            The <c>Geometry</c>s contained by composite <c>Geometry</c>s
            must be Geometry's; that is, they must implement <c>Coordinates</c>.
            </summary>
            <returns>The vertices of this <c>Geometry</c>.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Geometry.NumPoints">
            <summary>  
            Returns the count of this <c>Geometry</c>s vertices. The <c>Geometry</c>
            s contained by composite <c>Geometry</c>s must be
            Geometry's; that is, they must implement <c>NumPoints</c>.
            </summary>
            <returns>The number of vertices in this <c>Geometry</c>.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Geometry.NumGeometries">
            <summary>
            Returns the number of Geometryes in a GeometryCollection,
            or 1, if the geometry is not a collection.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Geometry.IsSimple">
            <summary> 
            Returns false if the <c>Geometry</c> not simple.
            Subclasses provide their own definition of "simple". If
            this <c>Geometry</c> is empty, returns <c>true</c>. 
            In general, the SFS specifications of simplicity seem to follow the
            following rule:
             A Geometry is simple if the only self-intersections are at boundary points.
            For all empty <c>Geometry</c>s, <c>IsSimple==true</c>.
            </summary>
            <returns>    
            <c>true</c> if this <c>Geometry</c> has any points of
            self-tangency, self-intersection or other anomalous points.
            </returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Geometry.IsValid">
            <summary>  
            Tests the validity of this <c>Geometry</c>.
            Subclasses provide their own definition of "valid".
            </summary>
            <returns><c>true</c> if this <c>Geometry</c> is valid.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Geometry.IsEmpty">
            <summary> 
            Returns whether or not the set of points in this <c>Geometry</c> is empty.
            </summary>
            <returns><c>true</c> if this <c>Geometry</c> equals the empty point.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Area">
            <summary>  
            Returns the area of this <c>Geometry</c>.
            Areal Geometries have a non-zero area.
            They override this function to compute the area.
            Others return 0.0
            </summary>
            <returns>The area of the Geometry.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Length">
            <summary> 
            Returns the length of this <c>Geometry</c>.
            Linear geometries return their length.
            Areal geometries return their perimeter.
            They override this function to compute the length.
            Others return 0.0
            </summary>
            <returns>The length of the Geometry.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Centroid">
            <summary> 
            Computes the centroid of this <c>Geometry</c>.
            The centroid is equal to the centroid of the set of component Geometries of highest
            dimension (since the lower-dimension geometries contribute zero "weight" to the centroid).
            </summary>
            <returns>A Point which is the centroid of this Geometry.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Geometry.InteriorPoint">
            <summary>
            Computes an interior point of this <c>Geometry</c>.
            An interior point is guaranteed to lie in the interior of the Geometry,
            if it possible to calculate such a point exactly. Otherwise,
            the point may lie on the boundary of the point.
            </summary>
            <returns>A <c>Point</c> which is in the interior of this Geometry.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Geometry.PointOnSurface">
            <summary>
            <see cref="P:GisSharpBlog.NetTopologySuite.Geometries.Geometry.InteriorPoint"/>
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Dimension">
            <summary> 
            Returns the dimension of this <c>Geometry</c>.
            </summary>
            <returns>  
            The dimension of the class implementing this interface, whether
            or not this object is the empty point.
            </returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Boundary">
            <summary>  
            Returns the boundary, or the empty point if this <c>Geometry</c>
            is empty. For a discussion of this function, see the OpenGIS Simple
            Features Specification. As stated in SFS Section 2.1.13.1, "the boundary
            of a Geometry is a set of Geometries of the next lower dimension."
            </summary>
            <returns>The closure of the combinatorial boundary of this <c>Geometry</c>.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Geometry.BoundaryDimension">
            <summary> 
            Returns the dimension of this <c>Geometry</c>s inherent boundary.
            </summary>
            <returns>    
            The dimension of the boundary of the class implementing this
            interface, whether or not this object is the empty point. Returns
            <c>Dimension.False</c> if the boundary is the empty point.
            </returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Geometry.Envelope">
            <summary>  
            Returns this <c>Geometry</c>s bounding box. If this <c>Geometry</c>
            is the empty point, returns an empty <c>Point</c>. If the <c>Geometry</c>
            is a point, returns a non-empty <c>Point</c>. Otherwise, returns a
            <c>Polygon</c> whose points are (minx, miny), (maxx, miny), (maxx,
            maxy), (minx, maxy), (minx, miny).
            </summary>
            <returns>    
            An empty <c>Point</c> (for empty <c>Geometry</c>s), a
            <c>Point</c> (for <c>Point</c>s) or a <c>Polygon</c>
            (in all other cases).
            </returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Geometry.EnvelopeInternal">
            <summary> 
            Returns the minimum and maximum x and y values in this <c>Geometry</c>
            , or a null <c>Envelope</c> if this <c>Geometry</c> is empty.
            </summary>
            <returns>    
            This <c>Geometry</c>s bounding box; if the <c>Geometry</c>
            is empty, <c>Envelope.IsNull</c> will return <c>true</c>.
            </returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Geometry.ClassSortIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Geometry.IsRectangle">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection.Empty">
            <summary>
            Represents an empty <c>GeometryCollection</c>.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection.geometries">
            <summary>
            Internal representation of this <c>GeometryCollection</c>.        
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection.#ctor(GeoAPI.Geometries.IGeometry[])">
            <summary>
            
            </summary>
            <param name="geometries">
            The <c>Geometry</c>s for this <c>GeometryCollection</c>,
            or <c>null</c> or an empty array to create the empty
            point. Elements may be empty <c>Geometry</c>s,
            but not <c>null</c>s.
            </param>
            <remarks>
            For create this <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/> is used a standard <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory"/> 
            with <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel"/> <c> == </c> <see cref="F:GeoAPI.Geometries.PrecisionModels.Floating"/>.
            </remarks>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection.#ctor(GeoAPI.Geometries.IGeometry[],GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            
            </summary>
            <param name="geometries">
            The <c>Geometry</c>s for this <c>GeometryCollection</c>,
            or <c>null</c> or an empty array to create the empty
            point. Elements may be empty <c>Geometry</c>s,
            but not <c>null</c>s.
            </param>
            <param name="factory"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection.GetGeometryN(System.Int32)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection.EqualsExact(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection.Apply(GeoAPI.Geometries.ICoordinateFilter)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection.Apply(GeoAPI.Geometries.IGeometryFilter)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection.Apply(GeoAPI.Geometries.IGeometryComponentFilter)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection.Normalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection.ComputeEnvelopeInternal">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection.CompareToSameClass(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection.GetEnumerator">
            <summary>
            Returns a <c>GeometryCollectionEnumerator</c>:
            this IEnumerator returns the parent geometry as first element.
            In most cases is more useful the code
            <c>geometryCollectionInstance.Geometries.GetEnumerator()</c>: 
            this returns an IEnumerator over geometries composing GeometryCollection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection.Coordinate">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection.Coordinates">
            <summary>
            Collects all coordinates of all subgeometries into an Array.
            Note that while changes to the coordinate objects themselves
            may modify the Geometries in place, the returned Array as such 
            is only a temporary container which is not synchronized back.
            </summary>
            <returns>The collected coordinates.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection.Dimension">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection.BoundaryDimension">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection.NumGeometries">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection.Geometries">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection.NumPoints">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection.GeometryType">
            <summary>
            
            </summary>        
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection.IsSimple">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection.Boundary">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection.Area">
            <summary>  
            Returns the area of this <c>GeometryCollection</c>.
            </summary>        
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection.Length">
            <summary>  
            Returns the length of this <c>GeometryCollection</c>.
            </summary>        
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection.IsHomogeneous">
            <summary>
            Return <c>true</c> if all features in collection are of the same type.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection.Item(System.Int32)">
            <summary>
            Returns the iTh element in the collection.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection.Count">
            <summary>
            Returns the number of geometries contained by this <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection"/>.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.MultiPolygon.Empty">
            <summary>
            Represents an empty <c>MultiPolygon</c>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.MultiPolygon.#ctor(GeoAPI.Geometries.IPolygon[])">
            <summary>
            Constructs a <c>MultiPolygon</c>.
            </summary>
            <param name="polygons">
            The <c>Polygon</c>s for this <c>MultiPolygon</c>
            , or <c>null</c> or an empty array to create the empty point.
            Elements may be empty <c>Polygon</c>s, but not <c>null</c>
            s. The polygons must conform to the assertions specified in the 
            <see href="http://www.opengis.org/techno/specs.htm"/> OpenGIS Simple Features
            Specification for SQL.        
            </param>
            <remarks>
            For create this <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/> is used a standard <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory"/> 
            with <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel"/> <c> == </c> <see cref="F:GeoAPI.Geometries.PrecisionModels.Floating"/>.
            </remarks>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.MultiPolygon.#ctor(GeoAPI.Geometries.IPolygon[],GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Constructs a <c>MultiPolygon</c>.
            </summary>
            <param name="polygons">
            The <c>Polygon</c>s for this <c>MultiPolygon</c>
            , or <c>null</c> or an empty array to create the empty point.
            Elements may be empty <c>Polygon</c>s, but not <c>null</c>
            s. The polygons must conform to the assertions specified in the 
            <see href="http://www.opengis.org/techno/specs.htm"/> OpenGIS Simple Features
            Specification for SQL.        
            </param>
            <param name="factory"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.MultiPolygon.EqualsExact(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.MultiPolygon.Dimension">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.MultiPolygon.BoundaryDimension">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.MultiPolygon.GeometryType">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.MultiPolygon.IsSimple">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.MultiPolygon.Boundary">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.Envelope">
            <summary>
            Defines a rectangular region of the 2D coordinate plane.
            It is often used to represent the bounding box of a <c>Geometry</c>,
            e.g. the minimum and maximum x and y values of the <c>Coordinate</c>s.
            Note that Envelopes support infinite or half-infinite regions, by using the values of
            <c>Double.PositiveInfinity</c> and <c>Double.NegativeInfinity</c>.
            When Envelope objects are created or initialized,
            the supplies extent values are automatically sorted into the correct order.    
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.Intersects(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            Test the point q to see whether it intersects the Envelope
            defined by p1-p2.
            </summary>
            <param name="p1">One extremal point of the envelope.</param>
            <param name="p2">Another extremal point of the envelope.</param>
            <param name="q">Point to test for intersection.</param>
            <returns><c>true</c> if q intersects the envelope p1-p2.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.Intersects(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            Test the envelope defined by p1-p2 for intersection
            with the envelope defined by q1-q2
            </summary>
            <param name="p1">One extremal point of the envelope Point.</param>
            <param name="p2">Another extremal point of the envelope Point.</param>
            <param name="q1">One extremal point of the envelope Q.</param>
            <param name="q2">Another extremal point of the envelope Q.</param>
            <returns><c>true</c> if Q intersects Point</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.#ctor">
            <summary>
            Creates a null <c>Envelope</c>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an <c>Envelope</c> for a region defined by maximum and minimum values.
            </summary>
            <param name="x1">The first x-value.</param>
            <param name="x2">The second x-value.</param>
            <param name="y1">The first y-value.</param>
            <param name="y2">The second y-value.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.#ctor(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            Creates an <c>Envelope</c> for a region defined by two Coordinates.
            </summary>
            <param name="p1">The first Coordinate.</param>
            <param name="p2">The second Coordinate.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.#ctor(GeoAPI.Geometries.ICoordinate)">
            <summary>
            Creates an <c>Envelope</c> for a region defined by a single Coordinate.
            </summary>
            <param name="p">The Coordinate.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.#ctor(GeoAPI.Geometries.IEnvelope)">
            <summary>
            Create an <c>Envelope</c> from an existing Envelope.
            </summary>
            <param name="env">The Envelope to initialize from.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.Init">
            <summary>
            Initialize to a null <c>Envelope</c>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.Init(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initialize an <c>Envelope</c> for a region defined by maximum and minimum values.
            </summary>
            <param name="x1">The first x-value.</param>
            <param name="x2">The second x-value.</param>
            <param name="y1">The first y-value.</param>
            <param name="y2">The second y-value.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.Init(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            Initialize an <c>Envelope</c> for a region defined by two Coordinates.
            </summary>
            <param name="p1">The first Coordinate.</param>
            <param name="p2">The second Coordinate.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.Init(GeoAPI.Geometries.ICoordinate)">
            <summary>
            Initialize an <c>Envelope</c> for a region defined by a single Coordinate.
            </summary>
            <param name="p">The Coordinate.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.Init(GeoAPI.Geometries.IEnvelope)">
            <summary>
            Initialize an <c>Envelope</c> from an existing Envelope.
            </summary>
            <param name="env">The Envelope to initialize from.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.SetToNull">
            <summary>
            Makes this <c>Envelope</c> a "null" envelope..
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.ExpandBy(System.Double)">
            <summary>
            Expands this envelope by a given distance in all directions.
            Both positive and negative distances are supported.
            </summary>
            <param name="distance">The distance to expand the envelope.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.ExpandBy(System.Double,System.Double)">
            <summary>
            Expands this envelope by a given distance in all directions.
            Both positive and negative distances are supported.
            </summary>
            <param name="deltaX">The distance to expand the envelope along the the X axis.</param>
            <param name="deltaY">The distance to expand the envelope along the the Y axis.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.ExpandToInclude(GeoAPI.Geometries.ICoordinate)">
            <summary>
            Enlarges the boundary of the <c>Envelope</c> so that it contains (p).
            Does nothing if (p) is already on or within the boundaries.
            </summary>
            <param name="p">The Coordinate.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.ExpandToInclude(System.Double,System.Double)">
            <summary>
            Enlarges the boundary of the <c>Envelope</c> so that it contains
            (x,y). Does nothing if (x,y) is already on or within the boundaries.
            </summary>
            <param name="x">The value to lower the minimum x to or to raise the maximum x to.</param>
            <param name="y">The value to lower the minimum y to or to raise the maximum y to.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.ExpandToInclude(GeoAPI.Geometries.IEnvelope)">
            <summary>
            Enlarges the boundary of the <c>Envelope</c> so that it contains
            <c>other</c>. Does nothing if <c>other</c> is wholly on or
            within the boundaries.
            </summary>
            <param name="other">the <c>Envelope</c> to merge with.</param>        
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.Translate(System.Double,System.Double)">
            <summary>
            Translates this envelope by given amounts in the X and Y direction.
            </summary>
            <param name="transX">The amount to translate along the X axis.</param>
            <param name="transY">The amount to translate along the Y axis.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.Intersection(GeoAPI.Geometries.IEnvelope)">
            <summary>
            
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.Intersects(GeoAPI.Geometries.IEnvelope)">
            <summary> 
            Check if the region defined by <c>other</c>
            overlaps (intersects) the region of this <c>Envelope</c>.
            </summary>
            <param name="other"> the <c>Envelope</c> which this <c>Envelope</c> is
            being checked for overlapping.
            </param>
            <returns>        
            <c>true</c> if the <c>Envelope</c>s overlap.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.Overlaps(GeoAPI.Geometries.IEnvelope)">
            <summary>
            Use Intersects instead. In the future, Overlaps may be
            changed to be a true overlap check; that is, whether the intersection is
            two-dimensional.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.Overlaps(GeoAPI.Geometries.ICoordinate)">
            <summary>
            Use Intersects instead.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.Overlaps(System.Double,System.Double)">
            <summary>
            Use Intersects instead.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.Intersects(GeoAPI.Geometries.ICoordinate)">
            <summary>  
            Check if the point <c>p</c> overlaps (lies inside) the region of this <c>Envelope</c>.
            </summary>
            <param name="p"> the <c>Coordinate</c> to be tested.</param>
            <returns><c>true</c> if the point overlaps this <c>Envelope</c>.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.Intersects(System.Double,System.Double)">
            <summary>  
            Check if the point <c>(x, y)</c> overlaps (lies inside) the region of this <c>Envelope</c>.
            </summary>
            <param name="x"> the x-ordinate of the point.</param>
            <param name="y"> the y-ordinate of the point.</param>
            <returns><c>true</c> if the point overlaps this <c>Envelope</c>.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.Contains(GeoAPI.Geometries.ICoordinate)">
            <summary>  
            Returns <c>true</c> if the given point lies in or on the envelope.
            </summary>
            <param name="p"> the point which this <c>Envelope</c> is
            being checked for containing.</param>
            <returns>    
            <c>true</c> if the point lies in the interior or
            on the boundary of this <c>Envelope</c>.
            </returns>                
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.Contains(System.Double,System.Double)">
            <summary>  
            Returns <c>true</c> if the given point lies in or on the envelope.
            </summary>
            <param name="x"> the x-coordinate of the point which this <c>Envelope</c> is
            being checked for containing.</param>
            <param name="y"> the y-coordinate of the point which this <c>Envelope</c> is
            being checked for containing.</param>
            <returns><c>true</c> if <c>(x, y)</c> lies in the interior or
            on the boundary of this <c>Envelope</c>.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.Contains(GeoAPI.Geometries.IEnvelope)">
            <summary>  
            Returns <c>true</c> if the <c>Envelope other</c>
            lies wholely inside this <c>Envelope</c> (inclusive of the boundary).
            </summary>
            <param name="other"> the <c>Envelope</c> which this <c>Envelope</c> is being checked for containing.</param>
            <returns><c>true</c> if <c>other</c> is contained in this <c>Envelope</c>.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.Distance(GeoAPI.Geometries.IEnvelope)">
            <summary> 
            Computes the distance between this and another
            <c>Envelope</c>.
            The distance between overlapping Envelopes is 0.  Otherwise, the
            distance is the Euclidean distance between the closest points.
            </summary>
            <returns>The distance between this and another <c>Envelope</c>.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.Equals(GeoAPI.Geometries.IEnvelope)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.CompareTo(System.Object)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.CompareTo(GeoAPI.Geometries.IEnvelope)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.GetHashCode">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.GetHashCode(System.Double)">
            <summary>
            Return HashCode.
            </summary>
            <param name="x">Value from HashCode computation.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.op_Equality(GisSharpBlog.NetTopologySuite.Geometries.Envelope,GisSharpBlog.NetTopologySuite.Geometries.Envelope)">
             <summary>
            
             </summary>
             <param name="obj1"></param>
             <param name="obj2"></param>
             <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.op_Inequality(GisSharpBlog.NetTopologySuite.Geometries.Envelope,GisSharpBlog.NetTopologySuite.Geometries.Envelope)">
            <summary>
            
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.Clone">
            <summary>
            Creates a deep copy of the current envelope.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.Union(GeoAPI.Geometries.IPoint)">
            <summary>
            Calculates the union of the current box and the given point.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.Union(GeoAPI.Geometries.ICoordinate)">
            <summary>
            Calculates the union of the current box and the given coordinate.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.Union(GeoAPI.Geometries.IEnvelope)">
            <summary>
            Calculates the union of the current box and the given box.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.SetCentre(GeoAPI.Geometries.ICoordinate)">
            <summary>
            Moves the envelope to the indicated coordinate.
            </summary>
            <param name="centre">The new centre coordinate.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.SetCentre(GeoAPI.Geometries.IPoint)">
            <summary>
            Moves the envelope to the indicated point.
            </summary>
            <param name="centre">The new centre point.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.SetCentre(System.Double,System.Double)">
            <summary>
            Resizes the envelope to the indicated point.
            </summary>
            <param name="width">The new width.</param>
            <param name="height">The new height.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.SetCentre(GeoAPI.Geometries.IPoint,System.Double,System.Double)">
            <summary>
            Moves and resizes the current envelope.
            </summary>
            <param name="centre">The new centre point.</param>
            <param name="width">The new width.</param>
            <param name="height">The new height.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.SetCentre(GeoAPI.Geometries.ICoordinate,System.Double,System.Double)">
            <summary>
            Moves and resizes the current envelope.
            </summary>
            <param name="centre">The new centre coordinate.</param>
            <param name="width">The new width.</param>
            <param name="height">The new height.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Envelope.Zoom(System.Double)">
            <summary>
            Zoom the box. 
            Possible values are e.g. 50 (to zoom in a 50%) or -50 (to zoom out a 50%).
            </summary>
            <param name="perCent"> 
            Negative do Envelope smaller.
            Positive do Envelope bigger.
            </param>
            <example> 
             perCent = -50 compact the envelope a 50% (make it smaller).
             perCent = 200 enlarge envelope by 2.
            </example>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Envelope.IsNull">
            <summary>
            Returns <c>true</c> if this <c>Envelope</c> is a "null" envelope.
            </summary>
            <returns>
            <c>true</c> if this <c>Envelope</c> is uninitialized
            or is the envelope of the empty point.
            </returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Envelope.Width">
            <summary>
            Returns the difference between the maximum and minimum x values.
            </summary>
            <returns>max x - min x, or 0 if this is a null <c>Envelope</c>.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Envelope.Height">
            <summary>
            Returns the difference between the maximum and minimum y values.
            </summary>
            <returns>max y - min y, or 0 if this is a null <c>Envelope</c>.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Envelope.MinX">
            <summary>
            Returns the <c>Envelope</c>s minimum x-value. min x > max x
            indicates that this is a null <c>Envelope</c>.
            </summary>
            <returns>The minimum x-coordinate.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Envelope.MaxX">
            <summary>
            Returns the <c>Envelope</c>s maximum x-value. min x > max x
            indicates that this is a null <c>Envelope</c>.
            </summary>
            <returns>The maximum x-coordinate.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Envelope.MinY">
            <summary>
            Returns the <c>Envelope</c>s minimum y-value. min y > max y
            indicates that this is a null <c>Envelope</c>.
            </summary>
            <returns>The minimum y-coordinate.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Envelope.MaxY">
            <summary>
            Returns the <c>Envelope</c>s maximum y-value. min y > max y
            indicates that this is a null <c>Envelope</c>.
            </summary>
            <returns>The maximum y-coordinate.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Envelope.Centre">
            <summary>
            Computes the coordinate of the centre of this envelope (as long as it is non-null).
            </summary>
            <returns>
            The centre coordinate of this envelope, 
            or <c>null</c> if the envelope is null.
            </returns>.
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Envelope.Area">
            <summary>
            Returns the area of the envelope.
            </summary>
        </member>
        <member name="T:Iesi_NTS.Collections.Generic.ListSet`1">
            <summary>
            Implements a <c>Set</c> based on a list.  Performance is much better for very small lists 
            than either <c>HashedSet</c> or <c>SortedSet</c>.  However, performance degrades rapidly as 
            the data-set gets bigger.  Use a <c>HybridSet</c> instead if you are not sure your data-set
            will always remain very small.  Iteration produces elements in the order they were added.
            However, element order is not guaranteed to be maintained by the various <c>Set</c>
            mathematical operators.  
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.ListSet`1.#ctor">
            <summary>
            Creates a new set instance based on a list.
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.ListSet`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Creates a new set instance based on a list and
            initializes it based on a collection of elements.
            </summary>
            <param name="initialValues">A collection of elements that defines the initial set contents.</param>
        </member>
        <member name="T:Iesi_NTS.Collections.Generic.HybridSet`1">
            <summary>
            Implements a <c>Set</c> that automatically changes from a list to a hash table
            when the size reaches a certain threshold.  This is good if you are unsure about
            whether you data-set will be tiny or huge.  Because this uses a dual implementation,
            iteration order is not guaranteed!
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.HybridSet`1.#ctor">
            <summary>
            Creates a new set instance based on either a list or a hash table, depending on which 
            will be more efficient based on the data-set size.
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.HybridSet`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Creates a new set instance based on either a list or a hash table, depending on which 
            will be more efficient based on the data-set size, and
            initializes it based on a collection of elements.
            </summary>
            <param name="initialValues">A collection of elements that defines the initial set contents.</param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineString">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineString.#ctor(GeoAPI.Geometries.ILineString)">
            <summary>
            
            </summary>
            <param name="parentLine"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineString.#ctor(GeoAPI.Geometries.ILineString,System.Int32)">
            <summary>
            
            </summary>
            <param name="parentLine"></param>
            <param name="minimumSize"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineString.GetSegment(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineString.Init">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineString.AddToResult(GisSharpBlog.NetTopologySuite.Geometries.LineSegment)">
            <summary>
            
            </summary>
            <param name="seg"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineString.AsLineString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineString.AsLinearRing">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineString.ExtractCoordinates(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="segs"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineString.MinimumSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineString.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineString.ParentCoordinates">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineString.ResultCoordinates">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineString.ResultSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineString.Segments">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateOp">
            <summary>
            Implements the <c>Relate()</c> operation on <c>Geometry</c>s.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.GeometryGraphOperation">
            <summary>
            The base class for operations that require <c>GeometryGraph</c>s.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.GeometryGraphOperation.resultPrecisionModel">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.GeometryGraphOperation.arg">
            <summary>
            The operation args into an array so they can be accessed by index.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.GeometryGraphOperation.#ctor(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g0"></param>
            <param name="g1"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.GeometryGraphOperation.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g0"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.GeometryGraphOperation.GetArgGeometry(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.GeometryGraphOperation.lineIntersector">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.GeometryGraphOperation.ComputationPrecision">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateOp.Relate(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateOp.#ctor(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g0"></param>
            <param name="g1"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateOp.IntersectionMatrix">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Noding.SegmentNodeList">
            <summary>
            A list of the <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentNode"/>s present along a noded <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentNodeList.#ctor(GisSharpBlog.NetTopologySuite.Noding.SegmentString)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentNodeList"/> class.
            </summary>
            <param name="edge">The edge.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentNodeList.Add(GeoAPI.Geometries.ICoordinate,System.Int32)">
            <summary>
            Adds an intersection into the list, if it isn't already there.
            The input segmentIndex and dist are expected to be normalized.
            </summary>
            <param name="intPt"></param>
            <param name="segmentIndex"></param>
            <returns>The SegmentIntersection found or added.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentNodeList.GetEnumerator">
            <summary>
            Returns an iterator of SegmentNodes.
            </summary>
            <returns>An iterator of SegmentNodes.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentNodeList.AddEndPoints">
            <summary>
            Adds nodes for the first and last points of the edge.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentNodeList.AddCollapsedNodes">
            <summary>
            Adds nodes for any collapsed edge pairs.
            Collapsed edge pairs can be caused by inserted nodes, or they can be
            pre-existing in the edge vertex list.
            In order to provide the correct fully noded semantics,
            the vertex at the base of a collapsed pair must also be added as a node.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentNodeList.FindCollapsesFromExistingVertices(System.Collections.IList)">
            <summary>
            Adds nodes for any collapsed edge pairs
            which are pre-existing in the vertex list.
            </summary>
            <param name="collapsedVertexIndexes"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentNodeList.FindCollapsesFromInsertedNodes(System.Collections.IList)">
            <summary>
            Adds nodes for any collapsed edge pairs caused by inserted nodes
            Collapsed edge pairs occur when the same coordinate is inserted as a node
            both before and after an existing edge vertex.
            To provide the correct fully noded semantics,
            the vertex must be added as a node as well.
            </summary>
            <param name="collapsedVertexIndexes"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentNodeList.FindCollapseIndex(GisSharpBlog.NetTopologySuite.Noding.SegmentNode,GisSharpBlog.NetTopologySuite.Noding.SegmentNode,System.Int32[])">
            <summary>
            
            </summary>
            <param name="ei0"></param>
            <param name="ei1"></param>
            <param name="collapsedVertexIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentNodeList.AddSplitEdges(System.Collections.IList)">
            <summary>
            Creates new edges for all the edges that the intersections in this
            list split the parent edge into.
            Adds the edges to the provided argument list
            (this is so a single list can be used to accumulate all split edges
            for a set of <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s).
            </summary>
            <param name="edgeList"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentNodeList.CheckSplitEdgesCorrectness(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="splitEdges"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentNodeList.CreateSplitEdge(GisSharpBlog.NetTopologySuite.Noding.SegmentNode,GisSharpBlog.NetTopologySuite.Noding.SegmentNode)">
            <summary>
             Create a new "split edge" with the section of points between
            (and including) the two intersections.
            The label for the new edge is the same as the label for the parent edge.
            </summary>
            <param name="ei0"></param>
            <param name="ei1"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentNodeList.Write(System.IO.StreamWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Noding.SegmentNodeList.Edge">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Noding.NodeVertexIterator">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.NodeVertexIterator.#ctor(GisSharpBlog.NetTopologySuite.Noding.SegmentNodeList)">
            <summary>
            
            </summary>
            <param name="nodeList"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.NodeVertexIterator.ReadNextNode">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.NodeVertexIterator.Remove">
            <summary>
            Not implemented.
            </summary>
            <exception cref="T:System.NotSupportedException">This method is not implemented.</exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.NodeVertexIterator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.NodeVertexIterator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Noding.NodeVertexIterator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthIndexOfPoint">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthIndexOfPoint.IndexOf(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="linearGeom"></param>
            <param name="inputPt"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthIndexOfPoint.IndexOfAfter(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.ICoordinate,System.Double)">
            <summary>
            
            </summary>
            <param name="linearGeom"></param>
            <param name="inputPt"></param>
            <param name="minIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthIndexOfPoint.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthIndexOfPoint"/> class.
            </summary>
            <param name="linearGeom">A linear geometry.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthIndexOfPoint.IndexOf(GeoAPI.Geometries.ICoordinate)">
            <summary>
            Find the nearest location along a linear {@link Geometry} to a given point.
            </summary>
            <param name="inputPt">The coordinate to locate.</param>
            <returns>The location of the nearest point.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthIndexOfPoint.IndexOfAfter(GeoAPI.Geometries.ICoordinate,System.Double)">
            <summary>
            Finds the nearest index along the linear <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/>
            to a given <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/> after the specified minimum index.
            If possible the location returned will be strictly 
            greater than the <paramref name="minIndex"/>.
            If this is not possible, the value returned 
            will equal <paramref name="minIndex"/>.
            (An example where this is not possible is when
            <paramref name="minIndex"/> = [end of line] ).
            </summary>
            <param name="inputPt">The coordinate to locate.</param>
            <param name="minIndex">The minimum location for the point location.</param>
            <returns>The location of the nearest point.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthIndexOfPoint.IndexOfFromStart(GeoAPI.Geometries.ICoordinate,System.Double)">
            <summary>
            
            </summary>
            <param name="inputPt"></param>
            <param name="minIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthIndexOfPoint.SegmentNearestMeasure(GisSharpBlog.NetTopologySuite.Geometries.LineSegment,GeoAPI.Geometries.ICoordinate,System.Double)">
            <summary>
            
            </summary>
            <param name="seg"></param>
            <param name="inputPt"></param>
            <param name="segmentStartMeasure"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.Handlers.MultiPointHandler">
            <summary>
            Converts a Shapefile point to a OGIS Polygon.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.MultiPointHandler.Read(GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryReader,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Reads a stream and converts the shapefile record to an equilivant geometry object.
            </summary>
            <param name="file">The stream to read.</param>
            <param name="geometryFactory">The geometry factory to use when making the object.</param>
            <returns>The Geometry object that represents the shape file record.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.MultiPointHandler.Write(GeoAPI.Geometries.IGeometry,System.IO.BinaryWriter,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Writes a Geometry to the given binary wirter.
            </summary>
            <param name="geometry">The geometry to write.</param>
            <param name="file">The file stream to write to.</param>
            <param name="geometryFactory">The geometry factory to use.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.MultiPointHandler.GetLength(GeoAPI.Geometries.IGeometry)">
            <summary>
            Gets the length of the shapefile record using the geometry passed in.
            </summary>
            <param name="geometry">The geometry to get the length for.</param>
            <returns>The length in bytes this geometry is going to use when written out as a shapefile record.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.Handlers.MultiPointHandler.ShapeType">
            <summary>
            The ShapeType this handler handles.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.DbaseFileWriter">
            <summary>
            This class aids in the writing of Dbase IV files. 
            </summary>
            <remarks>
            Attribute information of an ESRI Shapefile is written using Dbase IV files.
            </remarks>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFileWriter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DbaseFileWriter class.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFileWriter.Write(GisSharpBlog.NetTopologySuite.IO.DbaseFileHeader)">
            <summary>
            
            </summary>
            <param name="header"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFileWriter.Write(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="columnValues"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFileWriter.IsRealType(System.Type)">
            <summary>
            Determine if the type provided is a "real" or "float" type.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFileWriter.IsIntegerType(System.Type)">
            <summary>
            Determine if the type provided is a "whole" number type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFileWriter.Write(System.Decimal,System.Int32,System.Int32)">
            <summary>
            Write a decimal value to the file.
            </summary>
            <param name="number">The value to write.</param>
            <param name="length">The overall width of the column being written to.</param>
            <param name="decimalCount">The number of decimal places in the column.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFileWriter.Write(System.Double,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="number"></param>
            <param name="length"></param>
            <param name="decimalCount"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFileWriter.Write(System.Single,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="number"></param>
            <param name="length"></param>
            <param name="decimalCount"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFileWriter.Write(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="length"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFileWriter.Write(System.DateTime)">
            <summary>
            
            </summary>
            <param name="date"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFileWriter.Write(System.Boolean)">
            <summary>
            
            </summary>
            <param name="flag"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFileWriter.Write(System.Char,System.Int32)">
            <summary>
            Write a character to the file.
            </summary>
            <param name="c">The character to write.</param>
            <param name="length">The length of the column to write in. Writes
            left justified, filling with spaces.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFileWriter.Close">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.DbaseFileHeader">
            <summary>
            Class for holding the information assicated with a dbase header.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFileHeader.#ctor">
            <summary>
            Initializes a new instance of the DbaseFileHeader class.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFileHeader.AddColumn(System.String,System.Char,System.Int32,System.Int32)">
            <summary>
             Add a column to this DbaseFileHeader.
            </summary>
            <param name="fieldName">The name of the field to add.</param>
            <param name="fieldType">The type is one of (C N L or D) character, number, logical(true/false), or date.</param>
            <param name="fieldLength"> The Field length is the total length in bytes reserved for this column.</param>
            <param name="decimalCount">The decimal count only applies to numbers(N), and floating point values (F), and refers to the number of characters to reserve after the decimal point.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFileHeader.RemoveColumn(System.String)">
            <summary>
            Remove a column from this DbaseFileHeader.
            </summary>
            <param name="fieldName"></param>
            <returns>return index of the removed column, -1 if no found.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFileHeader.ReadHeader(System.IO.BinaryReader)">
            <summary>
            Read the header data from the DBF file.
            </summary>
            <param name="reader">BinaryReader containing the header.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFileHeader.SetNumRecords(System.Int32)">
            <summary>
            Set the number of records in the file
            </summary>
            <param name="inNumRecords"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.DbaseFileHeader.WriteHeader(System.IO.BinaryWriter)">
            <summary>
            Write the header data to the DBF file.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.DbaseFileHeader.LastUpdateDate">
            <summary>
            Return the date this file was last updated.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.DbaseFileHeader.NumFields">
            <summary>
            Return the number of fields in the records.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.DbaseFileHeader.NumRecords">
            <summary>
            Return the number of records in the file.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.DbaseFileHeader.RecordLength">
            <summary>
            Return the length of the records in bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.DbaseFileHeader.HeaderLength">
            <summary>
            Return the length of the header.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.DbaseFileHeader.Fields">
            <summary>
            Returns the fields in the dbase file.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Quadtree.NodeBase">
            <summary>
            The base class for nodes in a <c>Quadtree</c>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.NodeBase.GetSubnodeIndex(GeoAPI.Geometries.IEnvelope,GeoAPI.Geometries.ICoordinate)">
            <summary> 
            Returns the index of the subquad that wholly contains the given envelope.
            If none does, returns -1.
            </summary>
            <param name="env"></param>
            <param name="centre"></param>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Index.Quadtree.NodeBase.items">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Index.Quadtree.NodeBase.subnode">
            <summary>
            subquads are numbered as follows:
            2 | 3
            --+--
            0 | 1
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.NodeBase.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.NodeBase.Add(System.Object)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.NodeBase.Remove(GeoAPI.Geometries.IEnvelope,System.Object)">
            <summary> 
            Removes a single item from this subtree.
            </summary>
            <param name="itemEnv">The envelope containing the item.</param>
            <param name="item">The item to remove.</param>
            <returns><c>true</c> if the item was found and removed.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.NodeBase.AddAllItems(System.Collections.IList@)">
            <summary>
            Insert items in <c>this</c> into the parameter!
            </summary>
            <param name="resultItems">IList for adding items.</param>
            <returns>Parameter IList with <c>this</c> items.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.NodeBase.IsSearchMatch(GeoAPI.Geometries.IEnvelope)">
            <summary>
            
            </summary>
            <param name="searchEnv"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.NodeBase.AddAllItemsFromOverlapping(GeoAPI.Geometries.IEnvelope,System.Collections.IList@)">
            <summary>
            
            </summary>
            <param name="searchEnv"></param>
            <param name="resultItems"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.NodeBase.Visit(GeoAPI.Geometries.IEnvelope,GisSharpBlog.NetTopologySuite.Index.IItemVisitor)">
            <summary>
            
            </summary>
            <param name="searchEnv"></param>
            <param name="visitor"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.NodeBase.VisitItems(GeoAPI.Geometries.IEnvelope,GisSharpBlog.NetTopologySuite.Index.IItemVisitor)">
            <summary>
            
            </summary>
            <param name="searchEnv"></param>
            <param name="visitor"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Quadtree.NodeBase.Items">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Quadtree.NodeBase.HasItems">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Quadtree.NodeBase.IsPrunable">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Quadtree.NodeBase.HasChildren">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Quadtree.NodeBase.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Quadtree.NodeBase.Depth">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Quadtree.NodeBase.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Quadtree.NodeBase.NodeCount">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.TopologyLocation">
            <summary> 
            A TopologyLocation is the labelling of a
            GraphComponent's topological relationship to a single Geometry.
            If the parent component is an area edge, each side and the edge itself
            have a topological location.  These locations are named:
             On: on the edge
             Left: left-hand side of the edge
             Right: right-hand side
            If the parent component is a line edge or node, there is a single
            topological relationship attribute, On.
            The possible values of a topological location are
            { Location.Null, Location.Exterior, Location.Boundary, Location.Interior } 
            The labelling is stored in an array location[j] where
            where j has the values On, Left, Right.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.TopologyLocation.#ctor(GeoAPI.Geometries.Locations[])">
            <summary>
            
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.TopologyLocation.#ctor(GeoAPI.Geometries.Locations,GeoAPI.Geometries.Locations,GeoAPI.Geometries.Locations)">
            <summary> 
            Constructs a TopologyLocation specifying how points on, to the left of, and to the
            right of some GraphComponent relate to some Geometry. Possible values for the
            parameters are Location.Null, Location.Exterior, Location.Boundary, 
            and Location.Interior.
            </summary>        
            <param name="on"></param>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.TopologyLocation.#ctor(GeoAPI.Geometries.Locations)">
            <summary>
            
            </summary>
            <param name="on"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.TopologyLocation.#ctor(GisSharpBlog.NetTopologySuite.GeometriesGraph.TopologyLocation)">
            <summary>
            
            </summary>
            <param name="gl"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.TopologyLocation.Init(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.TopologyLocation.Get(GisSharpBlog.NetTopologySuite.GeometriesGraph.Positions)">
            <summary>
            
            </summary>
            <param name="posIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.TopologyLocation.IsEqualOnSide(GisSharpBlog.NetTopologySuite.GeometriesGraph.TopologyLocation,System.Int32)">
            <summary>
            
            </summary>
            <param name="le"></param>
            <param name="locIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.TopologyLocation.Flip">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.TopologyLocation.SetAllLocations(GeoAPI.Geometries.Locations)">
            <summary>
            
            </summary>
            <param name="locValue"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.TopologyLocation.SetAllLocationsIfNull(GeoAPI.Geometries.Locations)">
            <summary>
            
            </summary>
            <param name="locValue"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.TopologyLocation.SetLocation(GisSharpBlog.NetTopologySuite.GeometriesGraph.Positions,GeoAPI.Geometries.Locations)">
            <summary>
            
            </summary>
            <param name="locIndex"></param>
            <param name="locValue"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.TopologyLocation.SetLocation(GeoAPI.Geometries.Locations)">
            <summary>
            
            </summary>
            <param name="locValue"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.TopologyLocation.GetLocations">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.TopologyLocation.SetLocations(GeoAPI.Geometries.Locations,GeoAPI.Geometries.Locations,GeoAPI.Geometries.Locations)">
            <summary>
            
            </summary>
            <param name="on"></param>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.TopologyLocation.SetLocations(GisSharpBlog.NetTopologySuite.GeometriesGraph.TopologyLocation)">
            <summary>
            
            </summary>
            <param name="gl"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.TopologyLocation.AllPositionsEqual(GeoAPI.Geometries.Locations)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.TopologyLocation.Merge(GisSharpBlog.NetTopologySuite.GeometriesGraph.TopologyLocation)">
            <summary>
            Merge updates only the Null attributes of this object
            with the attributes of another.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.TopologyLocation.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.TopologyLocation.Item(GisSharpBlog.NetTopologySuite.GeometriesGraph.Positions)">
            <summary>
            Get calls Get(Positions posIndex),
            Set calls SetLocation(Positions locIndex, Locations locValue)
            </summary>
            <param name="posIndex"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.TopologyLocation.IsNull">
            <returns>
            <c>true</c> if all locations are Null.
            </returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.TopologyLocation.IsAnyNull">
            <returns> 
            <c>true</c> if any locations are Null.
            </returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.TopologyLocation.IsArea">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.TopologyLocation.IsLine">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.NodeFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.NodeFactory.CreateNode(GeoAPI.Geometries.ICoordinate)">
            <summary> 
            The basic node constructor does not allow for incident edges.
            </summary>
            <param name="coord"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.GraphComponent">
            <summary>
            A GraphComponent is the parent class for the objects'
            that form a graph.  Each GraphComponent can carry a
            Label.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.GeometriesGraph.GraphComponent.label">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.GraphComponent.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.GraphComponent.#ctor(GisSharpBlog.NetTopologySuite.GeometriesGraph.Label)">
            <summary>
            
            </summary>
            <param name="label"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.GraphComponent.ComputeIM(GeoAPI.Geometries.IntersectionMatrix)">
            <summary>
            Compute the contribution to an IM for this component.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.GraphComponent.UpdateIM(GeoAPI.Geometries.IntersectionMatrix)">
            <summary>
            Update the IM with the contribution for this component.
            A component only contributes if it has a labelling for both parent geometries.
            </summary>
            <param name="im"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.GraphComponent.Label">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.GraphComponent.InResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.GraphComponent.IsInResult">
            <summary> 
            IsInResult indicates if this component has already been included in the result.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.GraphComponent.Covered">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.GraphComponent.IsCovered">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.GraphComponent.IsCoveredSet">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.GraphComponent.Visited">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.GraphComponent.IsVisited">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.GraphComponent.Coordinate">
            <summary>
            
            </summary>
            <returns>
            A coordinate in this component (or null, if there are none).
            </returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.GraphComponent.IsIsolated">
            <summary>
            An isolated component is one that does not intersect or touch any other
            component.  This is the case if the label has valid locations for
            only a single Geometry.
            </summary>
            <returns><c>true</c> if this component is isolated.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.UpdateIM(GisSharpBlog.NetTopologySuite.GeometriesGraph.Label,GeoAPI.Geometries.IntersectionMatrix)">
            <summary> 
            Updates an IM from the label for an edge.
            Handles edges from both L and A geometries.
            </summary>
            <param name="im"></param>
            <param name="label"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.#ctor(GeoAPI.Geometries.ICoordinate[],GisSharpBlog.NetTopologySuite.GeometriesGraph.Label)">
            <summary>
            
            </summary>
            <param name="pts"></param>
            <param name="label"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.#ctor(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            
            </summary>
            <param name="pts"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.GetCoordinate(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.AddIntersections(GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector,System.Int32,System.Int32)">
            <summary>
            Adds EdgeIntersections for one or both
            intersections found for a segment of an edge to the edge intersection list.
            </summary>
            <param name="li"></param>
            <param name="segmentIndex"></param>
            <param name="geomIndex"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.AddIntersection(GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add an EdgeIntersection for intersection intIndex.
            An intersection that falls exactly on a vertex of the edge is normalized
            to use the higher of the two possible segmentIndexes.
            </summary>
            <param name="li"></param>
            <param name="segmentIndex"></param>
            <param name="geomIndex"></param>
            <param name="intIndex"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.ComputeIM(GeoAPI.Geometries.IntersectionMatrix)">
            <summary>
            Update the IM with the contribution for this component.
            A component only contributes if it has a labelling for both parent geometries.
            </summary>
            <param name="im"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.Equals(System.Object)">
            <summary>
            Equals is defined to be:
            e1 equals e2
            iff
            the coordinates of e1 are the same or the reverse of the coordinates in e2.
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.Equals(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge)">
            <summary>
            Equals is defined to be:
            e1 equals e2
            iff
            the coordinates of e1 are the same or the reverse of the coordinates in e2.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.op_Equality(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge,GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge)">
            <summary>
            
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.op_Inequality(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge,GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge)">
            <summary>
            
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.IsPointwiseEqual(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge)">
            <returns> 
            <c>true</c> if the coordinate sequences of the Edges are identical.
            </returns>
            <param name="e"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.Write(System.IO.TextWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.WriteReverse(System.IO.TextWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.Points">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.NumPoints">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.Coordinates">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.Coordinate">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.Envelope">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.Depth">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.DepthDelta">
            <summary>
            The depthDelta is the change in depth as an edge is crossed from R to L.
            </summary>
            <returns>The change in depth as the edge is crossed from R to L.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.MaximumSegmentIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.EdgeIntersectionList">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.MonotoneChainEdge">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.IsClosed">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.IsCollapsed">
            <summary> 
            An Edge is collapsed if it is an Area edge and it consists of
            two segments which are equal and opposite (eg a zero-width V).
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.CollapsedEdge">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.Isolated">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge.IsIsolated">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryTransformer">
            <summary>
            A framework for processes which transform an input <c>Geometry</c> into
            an output <c>Geometry</c>, possibly changing its structure and type(s).
            This class is a framework for implementing subclasses
            which perform transformations on
            various different Geometry subclasses.
            It provides an easy way of applying specific transformations
            to given point types, while allowing unhandled types to be simply copied.
            Also, the framework handles ensuring that if subcomponents change type
            the parent geometries types change appropriately to maintain valid structure.
            Subclasses will override whichever <c>TransformX</c> methods
            they need to to handle particular Geometry types.
            A typically usage would be a transformation that may transform Polygons into
            Polygons, LineStrings
            or Points.  This class would likely need to override the TransformMultiPolygon
            method to ensure that if input Polygons change type the result is a GeometryCollection,
            not a MultiPolygon.
            The default behaviour of this class is to simply recursively transform
            each Geometry component into an identical object by copying.
            Note that all <c>TransformX</c> methods may return <c>null</c>,
            to avoid creating empty point objects. This will be handled correctly
            by the transformer.
            The Transform method itself will always
            return a point object.
            </summary>    
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryTransformer.factory">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryTransformer.pruneEmptyGeometry">
            <summary>
            <c>true</c> if empty geometries should not be included in the result.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryTransformer.preserveGeometryCollectionType">
            <summary> 
            <c>true</c> if a homogenous collection result
            from a <c>GeometryCollection</c> should still
            be a general GeometryCollection.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryTransformer.preserveType">
            <summary> 
            <c>true</c> if the type of the input should be preserved.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryTransformer.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryTransformer.Transform(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="inputGeom"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryTransformer.CreateCoordinateSequence(GeoAPI.Geometries.ICoordinate[])">
            <summary> 
            Convenience method which provides standard way of
            creating a <c>CoordinateSequence</c>.
            </summary>
            <param name="coords">The coordinate array to copy.</param>
            <returns>A coordinate sequence for the array.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryTransformer.Copy(GeoAPI.Geometries.ICoordinateSequence)">
            <summary> 
            Convenience method which provides statndard way of copying {CoordinateSequence}s
            </summary>
            <param name="seq">The sequence to copy.</param>
            <returns>A deep copy of the sequence.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryTransformer.TransformCoordinates(GeoAPI.Geometries.ICoordinateSequence,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="coords"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryTransformer.TransformPoint(GeoAPI.Geometries.IPoint,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryTransformer.TransformMultiPoint(GeoAPI.Geometries.IMultiPoint,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryTransformer.TransformLinearRing(GeoAPI.Geometries.ILinearRing,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryTransformer.TransformLineString(GeoAPI.Geometries.ILineString,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryTransformer.TransformMultiLineString(GeoAPI.Geometries.IMultiLineString,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryTransformer.TransformPolygon(GeoAPI.Geometries.IPolygon,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryTransformer.TransformMultiPolygon(GeoAPI.Geometries.IMultiPolygon,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryTransformer.TransformGeometryCollection(GeoAPI.Geometries.IGeometryCollection,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryTransformer.InputGeometry">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollectionEnumerator">
            <summary>
            Iterates over all <c>Geometry</c>'s in a <c>GeometryCollection</c>. 
            Implements a pre-order depth-first traversal of the <c>GeometryCollection</c>
            (which may be nested). The original <c>GeometryCollection</c> is
            returned as well (as the first object), as are all sub-collections. It is
            simple to ignore the <c>GeometryCollection</c> objects if they are not
            needed.
            </summary>    
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollectionEnumerator.parent">
            <summary>
            The <c>GeometryCollection</c> being iterated over.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollectionEnumerator.atStart">
            <summary>
            Indicates whether or not the first element (the <c>GeometryCollection</c>)
            has been returned.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollectionEnumerator.max">
            <summary>
            The number of <c>Geometry</c>s in the the <c>GeometryCollection</c>.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollectionEnumerator.index">
            <summary>
            The index of the <c>Geometry</c> that will be returned when <c>next</c>
            is called.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollectionEnumerator.subcollectionEnumerator">
            <summary>
            The iterator over a nested <c>GeometryCollection</c>, or <c>null</c>
            if this <c>GeometryCollectionIterator</c> is not currently iterating
            over a nested <c>GeometryCollection</c>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollectionEnumerator.#ctor(GeoAPI.Geometries.IGeometryCollection)">
            <summary>
            Constructs an iterator over the given <c>GeometryCollection</c>.
            </summary>
            <param name="parent">
            The collection over which to iterate; also, the first
            element returned by the iterator.
            </param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollectionEnumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollectionEnumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollectionEnumerator.Current">
            <summary>
            
            </summary>
            <remarks> The parent GeometryCollection is the first object returned!</remarks>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArraySequence">
            <summary>
            The <c>ICoordinateSequence</c> implementation that <c>Geometry</c>s use by default.
            In this implementation, Coordinates returned by ToArray and Coordinate are live --
            modifications to them are actually changing the
            CoordinateSequence's underlying data.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArraySequence.#ctor(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Constructs a sequence based on the given array (the array is not copied).
            </summary>
            <param name="coordinates">The coordinate array that will be referenced.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArraySequence.#ctor(System.Int32)">
            <summary>
            Constructs a sequence of a given size, populated with new Coordinates.
            </summary>
            <param name="size">The size of the sequence to create.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArraySequence.#ctor(GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Constructs a sequence based on the given array (the array is not copied).
            </summary>
            <param name="coordSeq">The coordinate array that will be referenced.</param>      
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArraySequence.GetCoordinate(System.Int32)">
            <summary>
            Get the Coordinate with index i.
            </summary>
            <param name="i">The index of the coordinate.</param>
            <returns>The requested Coordinate instance.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArraySequence.GetCoordinateCopy(System.Int32)">
            <summary>
            Get a copy of the Coordinate with index i.
            </summary>
            <param name="i">The index of the coordinate.</param>
            <returns>A copy of the requested Coordinate.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArraySequence.GetCoordinate(System.Int32,GeoAPI.Geometries.ICoordinate)">
            <summary>
            Copies the i'th coordinate in the sequence to the supplied Coordinate.
            Only the first two dimensions are copied.
            </summary>
            <param name="index">The index of the coordinate to copy.</param>
            <param name="coord">A Coordinate to receive the value.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArraySequence.GetX(System.Int32)">
            <summary>
            Returns ordinate X (0) of the specified coordinate.
            </summary>
            <param name="index"></param>
            <returns>
            The value of the X ordinate in the index'th coordinate.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArraySequence.GetY(System.Int32)">
            <summary>
            Returns ordinate Y (1) of the specified coordinate.
            </summary>
            <param name="index"></param>
            <returns>
            The value of the Y ordinate in the index'th coordinate.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArraySequence.GetOrdinate(System.Int32,GeoAPI.Geometries.Ordinates)">
            <summary>
            Returns the ordinate of a coordinate in this sequence.
            Ordinate indices 0 and 1 are assumed to be X and Y.
            Ordinates indices greater than 1 have user-defined semantics
            (for instance, they may contain other dimensions or measure values).
            </summary>
            <param name="index">The coordinate index in the sequence.</param>
            <param name="ordinate">The ordinate index in the coordinate (in range [0, dimension-1]).</param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArraySequence.Clone">
            <summary>
            Creates a deep copy of the object.
            </summary>
            <returns>The deep copy.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArraySequence.GetClonedCoordinates">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArraySequence.SetOrdinate(System.Int32,GeoAPI.Geometries.Ordinates,System.Double)">
            <summary>
            Sets the value for a given ordinate of a coordinate in this sequence.
            </summary>
            <param name="index">The coordinate index in the sequence.</param>
            <param name="ordinate">The ordinate index in the coordinate (in range [0, dimension-1]).</param>
            <param name="value">The new ordinate value.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArraySequence.ToCoordinateArray">
             <summary>
            This method exposes the internal Array of Coordinate Objects.       
             </summary>
             <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArraySequence.ExpandEnvelope(GeoAPI.Geometries.IEnvelope)">
            <summary>
            Expands the given Envelope to include the coordinates in the sequence.
            Allows implementing classes to optimize access to coordinate values.
            </summary>
            <param name="env">The envelope to expand.</param>
            <returns>A reference to the expanded envelope.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArraySequence.ToString">
            <summary>
            Returns the string representation of the coordinate array.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArraySequence.Dimension">
            <summary>
            Returns the dimension (number of ordinates in each coordinate) for this sequence.
            </summary>
            <value></value>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArraySequence.Count">
            <summary>
            Returns the length of the coordinate sequence.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Algorithm.IPointInRing">
            <summary> 
            An interface for classes which test whether a <c>Coordinate</c> lies inside a ring.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.IPointInRing.IsInside(GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Algorithm.NonRobustCGAlgorithms">
            <summary> 
            Non-robust versions of various fundamental Computational Geometric algorithms,
            FOR TESTING PURPOSES ONLY!.
            The non-robustness is due to rounding error in floating point computation.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.NonRobustCGAlgorithms.IsPointInRing(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate[])">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="ring"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.NonRobustCGAlgorithms.IsCCW(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Computes whether a ring defined by an array of <c>Coordinate</c> is
            oriented counter-clockwise.
            This will handle coordinate lists which contain repeated points.
            </summary>
            <param name="ring">an array of coordinates forming a ring.</param>
            <returns>
            <c>true</c> if the ring is oriented counter-clockwise.
            throws <c>ArgumentException</c> if the ring is degenerate (does not contain 3 different points)
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.NonRobustCGAlgorithms.ComputeOrientation(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="T:RTools_NTS.Util.Token">
            <summary>
            Token class used by StreamTokenizer.
            This represents a single token in the input stream.
            This is subclassed to provide specific token types,
            such as CharToken, FloatToken, etc.
            </summary>
        </member>
        <member name="F:RTools_NTS.Util.Token.lineNumber">
            <summary>
            The line number in the input stream where this token originated.
            This is base-1.
            </summary>
        </member>
        <member name="F:RTools_NTS.Util.Token.obj">
            <summary>
            A storage object for the data of this token.
            </summary>
        </member>
        <member name="F:RTools_NTS.Util.Token.untermError">
            <summary>
            Backer for UntermError.
            </summary>
        </member>
        <member name="F:RTools_NTS.Util.Token.untermErrorMsg">
            An error message associated with unterm error.
        </member>
        <member name="M:RTools_NTS.Util.Token.#ctor(System.Int32)">
            <summary>
            Construct a Token with the specified line number.
            </summary>
            <param name="line">The line number where this
            token comes from.</param>
        </member>
        <member name="M:RTools_NTS.Util.Token.Equals(System.Object)">
            <summary>
            Equals override.
            </summary>
            <param name="other">The object to compare to.</param>
            <returns>bool - true for equals, false otherwise.</returns>
        </member>
        <member name="M:RTools_NTS.Util.Token.Equals(System.String)">
            <summary>
            Equals overload.
            </summary>
            <param name="s">The string to compare to.</param>
            <returns>bool</returns>
        </member>
        <member name="M:RTools_NTS.Util.Token.Equals(System.Char)">
            <summary>
            Equals overload.
            </summary>
            <param name="c">The char to compare to.</param>
            <returns>bool</returns>
        </member>
        <member name="M:RTools_NTS.Util.Token.op_Equality(RTools_NTS.Util.Token,System.Object)">
            <summary>
            Operator== overload.  Compare a token and an object.
            </summary>
            <param name="t">The token to compare.</param>
            <param name="o">The other object.</param>
            <returns>bool</returns>
        </member>
        <member name="M:RTools_NTS.Util.Token.op_Inequality(RTools_NTS.Util.Token,System.Object)">
            <summary>
            Operator!= overload.  Compare a token and an object.
            </summary>
            <param name="t">The token to compare.</param>
            <param name="o">The other object.</param>
            <returns>bool</returns>
        </member>
        <member name="M:RTools_NTS.Util.Token.op_Equality(RTools_NTS.Util.Token,System.Char)">
            <summary>
            Operator== overload.  Compare a token and a char.
            </summary>
            <param name="t">The token to compare.</param>
            <param name="c">The char.</param>
            <returns>bool</returns>
        </member>
        <member name="M:RTools_NTS.Util.Token.op_Inequality(RTools_NTS.Util.Token,System.Char)">
            <summary>
            Operator!= overload.  Compare a token and a char.
            </summary>
            <param name="t">The token to compare.</param>
            <param name="c">The char.</param>
            <returns>bool</returns>
        </member>
        <member name="M:RTools_NTS.Util.Token.op_Equality(RTools_NTS.Util.Token,System.String)">
            <summary>
            Operator== overload.  Compare a token and a string.
            </summary>
            <param name="t">The token to compare.</param>
            <param name="s">The string.</param>
            <returns>bool</returns>
        </member>
        <member name="M:RTools_NTS.Util.Token.op_Inequality(RTools_NTS.Util.Token,System.String)">
            <summary>
            Operator!= overload.  Compare a token and a string.
            </summary>
            <param name="t">The token to compare.</param>
            <param name="s">The string.</param>
            <returns>bool</returns>
        </member>
        <member name="M:RTools_NTS.Util.Token.GetHashCode">
            <summary>
            Override.  Returns the ToString().GetHashCode().
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:RTools_NTS.Util.Token.ToLineString">
            <summary>
            Produce a string which includes the line number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTools_NTS.Util.Token.ToDebugString">
            <summary>
            Produce a string which includes the token type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTools_NTS.Util.Token.ConvertToType(System.Type)">
            <summary>
            Create an object of the specified type corresponding to
            this token.
            </summary>
            <param name="t">The type of object to create.</param>
            <returns>The new object, or null for error.</returns>
        </member>
        <member name="P:RTools_NTS.Util.Token.LineNumber">
            <summary>
            The line number where this token was found.  This is base-1.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.Token.Object">
            <summary>
            The Object stored by this token.  This will be
            a primitive C# type.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.Token.UntermError">
            <summary>
            Whether or not there was an unterminated token problem
            when creating this token.  See UntermErrorMessage for
            a message associated with the problem.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.Token.UntermErrorMsg">
            <summary>
            The error message if there was an unterminated token error
            creating this token.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.Token.StringValue">
            <summary>
            Return this token's value as a string.
            </summary>
            <returns>This token's value as a string.</returns>
        </member>
        <member name="T:RTools_NTS.Util.EolToken">
            <summary>
            Represents end-of-lines (line separator characters).
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.EolToken.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:RTools_NTS.Util.EolToken.#ctor(System.Int32)">
            <summary>Constructor that takes line number.</summary>
        </member>
        <member name="M:RTools_NTS.Util.EolToken.ToDebugString">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="M:RTools_NTS.Util.EolToken.ToString">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="M:RTools_NTS.Util.EolToken.Equals(System.Object)">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="M:RTools_NTS.Util.EolToken.GetHashCode">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="P:RTools_NTS.Util.EolToken.StringValue">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="T:RTools_NTS.Util.EofToken">
            <summary>
            Represents end of file/stream.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.EofToken.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:RTools_NTS.Util.EofToken.#ctor(System.Int32)">
            <summary>Constructor that takes line number.</summary>
        </member>
        <member name="M:RTools_NTS.Util.EofToken.ToString">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="M:RTools_NTS.Util.EofToken.ToDebugString">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="M:RTools_NTS.Util.EofToken.Equals(System.Object)">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="M:RTools_NTS.Util.EofToken.GetHashCode">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="P:RTools_NTS.Util.EofToken.StringValue">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="T:RTools_NTS.Util.StringToken">
            <summary>
            Abstract base class for string tokens.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StringToken.#ctor(System.String)">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:RTools_NTS.Util.StringToken.#ctor(System.String,System.Int32)">
            <summary>Constructor with the specified value
            and line number.</summary>
        </member>
        <member name="M:RTools_NTS.Util.StringToken.ToDebugString">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="M:RTools_NTS.Util.StringToken.ToString">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="M:RTools_NTS.Util.StringToken.GetHashCode">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="P:RTools_NTS.Util.StringToken.StringValue">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="T:RTools_NTS.Util.WordToken">
            <summary>
            Token type for words, meaning sequences of word
            characters.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.WordToken.#ctor(System.String)">
            <summary>Constructor with the specified value.</summary>
        </member>
        <member name="M:RTools_NTS.Util.WordToken.#ctor(System.String,System.Int32)">
            <summary>Constructor with the specified value
            and line number.</summary>
        </member>
        <member name="T:RTools_NTS.Util.QuoteToken">
            <summary>
            Token type for Quotes such as "this is a quote".
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.QuoteToken.#ctor(System.String)">
            <summary>Constructor with the specified value.</summary>
        </member>
        <member name="M:RTools_NTS.Util.QuoteToken.#ctor(System.String,System.Int32)">
            <summary>Constructor with the specified value
            and line number.</summary>
        </member>
        <member name="T:RTools_NTS.Util.CommentToken">
            <summary>
            Token type for comments, including line and block
            comments.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.CommentToken.#ctor(System.String)">
            <summary>Constructor with the specified value.</summary>
        </member>
        <member name="M:RTools_NTS.Util.CommentToken.#ctor(System.String,System.Int32)">
            <summary>Constructor with the specified value
            and line number.</summary>
        </member>
        <member name="T:RTools_NTS.Util.WhitespaceToken">
            <summary>
            Token type for whitespace such as spaces and tabs.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.WhitespaceToken.#ctor(System.String)">
            <summary>Constructor with the specified value.</summary>
        </member>
        <member name="M:RTools_NTS.Util.WhitespaceToken.#ctor(System.String,System.Int32)">
            <summary>Constructor with the specified value
            and line number.</summary>
        </member>
        <member name="T:RTools_NTS.Util.CharToken">
            <summary>
            Token type for characters, meaning non-word characters.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.CharToken.#ctor(System.String,System.Int32)">
            <summary>Constructor with the specified value
            and line number.</summary>
        </member>
        <member name="M:RTools_NTS.Util.CharToken.#ctor(System.Char)">
            <summary>Constructor with the specified value.</summary>
        </member>
        <member name="M:RTools_NTS.Util.CharToken.#ctor(System.Char,System.Int32)">
            <summary>Constructor with the specified value.</summary>
        </member>
        <member name="M:RTools_NTS.Util.CharToken.ToDebugString">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="M:RTools_NTS.Util.CharToken.ToString">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="M:RTools_NTS.Util.CharToken.GetHashCode">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="M:RTools_NTS.Util.CharToken.Equals(System.Object)">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="P:RTools_NTS.Util.CharToken.StringValue">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="T:RTools_NTS.Util.FloatToken">
            <summary>
            Token type for floating point numbers, stored internally as a Double.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.FloatToken.#ctor(System.String)">
            <summary>
            Constructor with the specified value.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.FloatToken.#ctor(System.Single)">
            <summary>
            Constructor with the specified value.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.FloatToken.#ctor(System.Double)">
            <summary>
            Constructor with the specified value.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.FloatToken.#ctor(System.String,System.Int32)">
            <summary>
            Constructor with the specified value and line number.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.FloatToken.#ctor(System.Double,System.Int32)">
            <summary>
            Constructor with the specified value and line number.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.FloatToken.ToDebugString">
            <summary>
            Override, see base <see cref="T:RTools_NTS.Util.Token"/>
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.FloatToken.ToString">
            <summary>
            Override, see base <see cref="T:RTools_NTS.Util.Token"/>
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.FloatToken.GetHashCode">
            <summary>
            Override, see base <see cref="T:RTools_NTS.Util.Token"/>
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.FloatToken.Equals(System.Object)">
            <summary>
            Override, see base <see cref="T:RTools_NTS.Util.Token"/>
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.FloatToken.StringValue">
            <summary>
            Override, see base <see cref="T:RTools_NTS.Util.Token"/>
            </summary>
        </member>
        <member name="T:RTools_NTS.Util.IntToken">
            <summary>
            Token type for integer tokens. This handles both Int32 and Int64.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.IntToken.#ctor(System.Int32)">
            <summary>Constructor with the specified value.</summary>
        </member>
        <member name="M:RTools_NTS.Util.IntToken.#ctor(System.Int64)">
            <summary>Constructor with the specified value.</summary>
        </member>
        <member name="M:RTools_NTS.Util.IntToken.#ctor(System.String)">
            <summary>Constructor with the specified value.</summary>
        </member>
        <member name="M:RTools_NTS.Util.IntToken.#ctor(System.String,System.Int32)">
            <summary>Constructor with the specified value
            and line number.</summary>
        </member>
        <member name="M:RTools_NTS.Util.IntToken.#ctor(System.Int32,System.Int32)">
            <summary>Constructor with the specified value
            and line number.</summary>
        </member>
        <member name="M:RTools_NTS.Util.IntToken.#ctor(System.Int64,System.Int32)">
            <summary> 
            Constructor for a 64 bit int 
            </summary> 
        </member>
        <member name="M:RTools_NTS.Util.IntToken.ParseHex(System.String,System.Int32)">
            <summary>
            Parse a string known to be a hex string.  This is faster
            than Parse which doesn't assume the number is Hex.  This will
            throw an exception if the input number isn't hex.
            </summary>
            <param name="s">The hex number as a string.</param>
            <param name="lineNumber">The line where this token was found.</param>
            <returns>A new IntToken set to the value in the input string.</returns>
        </member>
        <member name="M:RTools_NTS.Util.IntToken.Parse(System.String)">
            <summary>
            Convert the input string to an integer, if possible
            </summary>
            <param name="s">The string to parse.</param>
        </member>
        <member name="M:RTools_NTS.Util.IntToken.ToDebugString">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="M:RTools_NTS.Util.IntToken.ToString">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="M:RTools_NTS.Util.IntToken.GetHashCode">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="M:RTools_NTS.Util.IntToken.Equals(System.Object)">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="P:RTools_NTS.Util.IntToken.StringValue">
            <summary>Override, see base <see cref="T:RTools_NTS.Util.Token"/></summary>
        </member>
        <member name="T:RTools_NTS.Util.SoftwarePackage">
            <summary>
            This class represents an installed software package on a Windows
            system.  This has some static utility methods that will get the
            list of installed software packages, letting you uninstall one.
            </summary>
            <remarks>
            <para>This is motivated by the desire to get the version of an installed
            package, and by the fact that I wasn't able to find an easier way to 
            uninstall an Msi by product name (msiexec needs the product code).
            </para>
            <para>
            This looks for uninstallable packages in the registry in:
            HKLM\Software\Microsoft\Windows\CurrentVersion\Uninstall
            </para>
            </remarks>
        </member>
        <member name="M:RTools_NTS.Util.SoftwarePackage.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.SoftwarePackage.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor which sets all values.
            </summary>
            <param name="name">The product name.</param>
            <param name="productCode">The ProductCode.</param>
            <param name="uninstallString">The uninstall string.</param>
            <param name="displayVersion">The display version.</param>
        </member>
        <member name="M:RTools_NTS.Util.SoftwarePackage.Uninstall(System.Boolean)">
            <summary>
            Uninstall this setup.
            </summary>
            <param name="interactive">Whether or not to use the interactive
            interface.</param>
            <returns>bool - true for success, false for failure</returns>
        </member>
        <member name="M:RTools_NTS.Util.SoftwarePackage.ToString">
            <summary>
            ToString override.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTools_NTS.Util.SoftwarePackage.GetList">
            <summary>
            This returns an array of potentially unstallable SoftwarePackages.
            See SoftwarePackage.IsUninstallable to see whether this class
            can uninstall a particular SoftwarePackage.
            </summary>
            <returns>The SoftwarePackage[], null for error.</returns>
        </member>
        <member name="M:RTools_NTS.Util.SoftwarePackage.GetPackage(System.String)">
            <summary>
            Get a particular software package, by product name. This returns
            the first package found with the specified product name.
            </summary>
            <param name="productName">The product name of the package to 
            get.</param>
            <returns>SoftwarePackage</returns>
        </member>
        <member name="M:RTools_NTS.Util.SoftwarePackage.FindOne(System.String,RTools_NTS.Util.SoftwarePackage[])">
            <summary>
            This returns the requested SoftwarePackage only if it only appears 
            exactly once (as determined solely by name) in the input SoftwarePackage
            array.
            </summary>
            <param name="name">The product name to look for.</param>
            <param name="list">The array of SoftwarePackages to search.</param>
            <returns>The SoftwarePackage found, or null for none found or more
            than one found.</returns>
        </member>
        <member name="M:RTools_NTS.Util.SoftwarePackage.UninstallMultiple(System.String,System.Boolean)">
            <summary>
            Uninstall all uninstallable packages with the specified product name.
            </summary>
            <param name="productName">The product name of the packages to 
            uninstall.</param>
            <param name="interactive">Whether to run Msiexec in interactive mode
            or not.</param>
            <returns>bool - true for 1 or more found and uninstalled, false
            otherwise.</returns>
        </member>
        <member name="P:RTools_NTS.Util.SoftwarePackage.Name">
            <summary>Product name.</summary>
        </member>
        <member name="P:RTools_NTS.Util.SoftwarePackage.ProductCode">
            <summary>Product Code.</summary>
        </member>
        <member name="P:RTools_NTS.Util.SoftwarePackage.UninstallString">
            <summary>Uninstall string (a shell command to use to remove this SoftwarePackage).</summary>
        </member>
        <member name="P:RTools_NTS.Util.SoftwarePackage.DisplayVersion">
            <summary>The DisplayVersion for this SoftwarePackage.</summary>
        </member>
        <member name="P:RTools_NTS.Util.SoftwarePackage.IsUninstallable">
            <summary>Whether or not this SoftwarePackage is uninstallable (by this class).</summary>
        </member>
        <member name="T:RTools_NTS.Util.Logger">
            <summary>
            This is a simple implementation of a Logger class.
            The purpose is to threshold output based on a verbosity setting,
            format messages similarly, and collect all message writes such that
            they can be redirected easily.  You (and I) should probably use
            the some other library for this, but I haven't found one that suits
            my needs.
            </summary>
            <remarks>
            This doesn't implement much of the functionality possible
            with this interface.  This could redirect messages to other
            text writers, forward messages to subscribers, etc.
            </remarks>
        </member>
        <member name="F:RTools_NTS.Util.Logger.log">
            <summary>Backer for Log.</summary>
        </member>
        <member name="F:RTools_NTS.Util.Logger.name">
            <summary>The name is prepended to all messages. </summary>
        </member>
        <member name="F:RTools_NTS.Util.Logger.verbosity">
            <summary>
            The verbosity of this logger.  Messages are filtered
            based on this setting.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.Logger.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.Logger.#ctor(System.String)">
            <summary>
            Construct and set name.
            </summary>
            <param name="name">The name for this logger.  This name
            is prepended to output messages (except Out messages).</param>
        </member>
        <member name="M:RTools_NTS.Util.Logger.Write(System.String,System.Object[])">
            <summary>
            Write a string with no verbosity checking and no formatting.
            </summary>
            <param name="msg">The format string.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:RTools_NTS.Util.Logger.WriteLine(System.String,System.Object[])">
            <summary>
            Write a line with no verbosity checking and no formatting.
            </summary>
            <param name="msg">The format string.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:RTools_NTS.Util.Logger.Debug(System.String,System.Object[])">
            <summary>
            Write a string of this particular verbosity.
            This will not output the string unless the verbosity is
            greater than or equal to this object's threshold.
            This prepends the level of the message and
            the name of this Logger.
            </summary>
            <param name="msg">The format string.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:RTools_NTS.Util.Logger.Info(System.String,System.Object[])">
            <summary>
            Write a string of this particular verbosity.
            This will not output the string unless the verbosity is
            greater than or equal to this object's threshold.
            This prepends the level of the message and
            the name of this Logger.
            </summary>
            <param name="msg">The format string.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:RTools_NTS.Util.Logger.Warn(System.String,System.Object[])">
            <summary>
            Write a string of this particular verbosity.
            This will not output the string unless the verbosity is
            greater than or equal to this object's threshold.
            This prepends the level of the message and
            the name of this Logger.
            </summary>
            <param name="msg">The format string.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:RTools_NTS.Util.Logger.Error(System.String,System.Object[])">
            <summary>
            Write a string of this particular verbosity.
            This will not output the string unless the verbosity is
            greater than or equal to this object's threshold.
            This prepends the level of the message and
            the name of this Logger.
            </summary>
            <param name="msg">The format string.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:RTools_NTS.Util.Logger.TestSelf">
            <summary>
            A simple static self test method.
            </summary>
            <returns>bool - currently always true</returns>
        </member>
        <member name="P:RTools_NTS.Util.Logger.Log">
            <summary>
            A static instance you can use without creating your own.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.Logger.Verbosity">
            <summary>
            The verbosity of this logger.  Messages are filtered
            based on this setting.
            </summary>
        </member>
        <member name="T:Iesi_NTS.Collections.Generic.EnumeratorWrapper`1">
            <summary>
            Simple Wrapper for wrapping an regular Enumerator as a generic Enumberator&lt;T&gt;
            </summary>
            <typeparam name="T"></typeparam>
            <exception cref="T:System.InvalidCastException">
            If the wrapped has any item that is not of Type T, InvalidCastException could be thrown at any time
            </exception>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Precision.CommonBitsOp">
            <summary> 
            Provides versions of Geometry spatial functions which use
            common bit removal to reduce the likelihood of robustness problems.
            In the current implementation no rounding is performed on the
            reshifted result point, which means that it is possible
            that the returned Geometry is invalid.
            Client classes should check the validity of the returned result themselves.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.CommonBitsOp.#ctor">
            <summary>
            Creates a new instance of class, which reshifts result <c>Geometry</c>s.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.CommonBitsOp.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of class, specifying whether
            the result <c>Geometry</c>s should be reshifted.
            </summary>
            <param name="returnToOriginalPrecision"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.CommonBitsOp.Intersection(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes the set-theoretic intersection of two <c>Geometry</c>s, using enhanced precision.
            </summary>
            <param name="geom0">The first Geometry.</param>
            <param name="geom1">The second Geometry.</param>
            <returns>The Geometry representing the set-theoretic intersection of the input Geometries.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.CommonBitsOp.Union(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes the set-theoretic union of two <c>Geometry</c>s, using enhanced precision.
            </summary>
            <param name="geom0">The first Geometry.</param>
            <param name="geom1">The second Geometry.</param>
            <returns>The Geometry representing the set-theoretic union of the input Geometries.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.CommonBitsOp.Difference(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes the set-theoretic difference of two <c>Geometry</c>s, using enhanced precision.
            </summary>
            <param name="geom0">The first Geometry.</param>
            <param name="geom1">The second Geometry, to be subtracted from the first.</param>
            <returns>The Geometry representing the set-theoretic difference of the input Geometries.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.CommonBitsOp.SymDifference(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary
            > Computes the set-theoretic symmetric difference of two geometries,
            using enhanced precision.
            </summary>
            <param name="geom0">The first Geometry.</param>
            <param name="geom1">The second Geometry.</param>
            <returns>The Geometry representing the set-theoretic symmetric difference of the input Geometries.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.CommonBitsOp.Buffer(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            Computes the buffer a point, using enhanced precision.
            </summary>
            <param name="geom0">The Geometry to buffer.</param>
            <param name="distance">The buffer distance.</param>
            <returns>The Geometry representing the buffer of the input Geometry.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.CommonBitsOp.ComputeResultPrecision(GeoAPI.Geometries.IGeometry)">
            <summary>
            If required, returning the result to the orginal precision if required.
            In this current implementation, no rounding is performed on the
            reshifted result point, which means that it is possible
            that the returned Geometry is invalid.
            </summary>
            <param name="result">The result Geometry to modify.</param>
            <returns>The result Geometry with the required precision.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.CommonBitsOp.RemoveCommonBits(GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes a copy of the input <c>Geometry</c> with the calculated common bits
            removed from each coordinate.
            </summary>
            <param name="geom0">The Geometry to remove common bits from.</param>
            <returns>A copy of the input Geometry with common bits removed.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.CommonBitsOp.RemoveCommonBits(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes a copy of each input <c>Geometry</c>s with the calculated common bits
            removed from each coordinate.
            </summary>
            <param name="geom0">A Geometry to remove common bits from.</param>
            <param name="geom1">A Geometry to remove common bits from.</param>
            <returns>
            An array containing copies
            of the input Geometry's with common bits removed.
            </returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.SnapOverlayOp">
            <summary>
            Performs an overlay operation using snapping and enhanced precision
            to improve the robustness of the result.
            This class always uses snapping.  
            This is less performant than the standard JTS overlay code, 
            and may even introduce errors which were not present in the original data.
            For this reason, this class should only be used 
            if the standard overlay code fails to produce a correct result. 
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.SnapOverlayOp.Overlay(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry,GisSharpBlog.NetTopologySuite.Operation.Overlay.SpatialFunction)">
            <summary>
            
            </summary>
            <param name="g0"></param>
            <param name="g1"></param>
            <param name="opCode"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.SnapOverlayOp.Intersection(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g0"></param>
            <param name="g1"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.SnapOverlayOp.Union(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g0"></param>
            <param name="g1"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.SnapOverlayOp.Difference(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g0"></param>
            <param name="g1"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.SnapOverlayOp.SymDifference(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g0"></param>
            <param name="g1"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.SnapOverlayOp.#ctor(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g1"></param>
            <param name="g2"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.SnapOverlayOp.ComputeSnapTolerance">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.SnapOverlayOp.GetResultGeometry(GisSharpBlog.NetTopologySuite.Operation.Overlay.SpatialFunction)">
            <summary>
            
            </summary>
            <param name="opCode"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.SnapOverlayOp.Snap">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.SnapOverlayOp.PrepareResult(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.SnapOverlayOp.RemoveCommonBits(GeoAPI.Geometries.IGeometry[])">
            <summary>
            
            </summary>
            <param name="geom"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.SnapOverlayOp.CheckValid(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Overlay.MaximalEdgeRing">
            <summary>
            A ring of edges which may contain nodes of degree > 2.
            A MaximalEdgeRing may represent two different spatial entities:
            a single polygon possibly containing inversions (if the ring is oriented CW)
            a single hole possibly containing exversions (if the ring is oriented CCW)    
            If the MaximalEdgeRing represents a polygon,
            the interior of the polygon is strongly connected.
            These are the form of rings used to define polygons under some spatial data models.
            However, under the OGC SFS model, MinimalEdgeRings are required.
            A MaximalEdgeRing can be converted to a list of MinimalEdgeRings using the
            <c>BuildMinimalRings()</c> method.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.MaximalEdgeRing.#ctor(GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="geometryFactory"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.MaximalEdgeRing.GetNext(GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge)">
            <summary>
            
            </summary>
            <param name="de"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.MaximalEdgeRing.SetEdgeRing(GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge,GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing)">
            <summary>
            
            </summary>
            <param name="de"></param>
            <param name="er"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.MaximalEdgeRing.LinkDirectedEdgesForMinimalEdgeRings">
            <summary> 
            For all nodes in this EdgeRing,
            link the DirectedEdges at the node to form minimalEdgeRings
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.MaximalEdgeRing.BuildMinimalRings">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.ShapefileException">
            <summary>
            The exception that is thrown when a non-fatal application error occurs related to Topology functionality.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileException.#ctor">
            <summary>
            Initializes a new instance of the ShapefileException class.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ShapefileException class with a specified error message.
            </summary>
            <param name="message">A message that describes the error. </param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the ApplicationException class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data. </param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ApplicationException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception</param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractNode">
            <summary> 
            A node of the STR tree. The children of this node are either more nodes
            (AbstractNodes) or real data (ItemBoundables). If this node contains real data
            (rather than nodes), then we say that this node is a "leaf node".
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Strtree.IBoundable">
            <summary>
            A spatial object in an AbstractSTRtree.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Strtree.IBoundable.Bounds">
            <summary> 
            Returns a representation of space that encloses this Boundable, preferably
            not much bigger than this Boundable's boundary yet fast to test for intersection
            with the bounds of other Boundables. The class of object returned depends
            on the subclass of AbstractSTRtree.
            </summary>
            <returns> 
            An Envelope (for STRtrees), an Interval (for SIRtrees), or other object
            (for other subclasses of AbstractSTRtree).
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractNode.#ctor(System.Int32)">
            <summary> 
            Constructs an AbstractNode at the given level in the tree
            </summary>
            <param name="level">
            0 if this node is a leaf, 1 if a parent of a leaf, and so on; the
            root node will have the highest level.
            </param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractNode.ComputeBounds">
            <summary>
            Returns a representation of space that encloses this Boundable,
            preferably not much bigger than this Boundable's boundary yet fast to
            test for intersection with the bounds of other Boundables. The class of
            object returned depends on the subclass of AbstractSTRtree.
            </summary>
            <returns> 
            An Envelope (for STRtrees), an Interval (for SIRtrees), or other
            object (for other subclasses of AbstractSTRtree).
            </returns>        
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractNode.AddChildBoundable(GisSharpBlog.NetTopologySuite.Index.Strtree.IBoundable)">
            <summary>
            Adds either an AbstractNode, or if this is a leaf node, a data object
            (wrapped in an ItemBoundable).
            </summary>
            <param name="childBoundable"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractNode.ChildBoundables">
            <summary> 
            Returns either child AbstractNodes, or if this is a leaf node, real data (wrapped
            in ItemBoundables).
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractNode.Bounds">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractNode.Level">
            <summary>
            Returns 0 if this node is a leaf, 1 if a parent of a leaf, and so on; the
            root node will have the highest level.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.ArrayListVisitor">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.IItemVisitor">
            <summary>
            A visitor for items in an index.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.IItemVisitor.VisitItem(System.Object)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.ArrayListVisitor.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.ArrayListVisitor.VisitItem(System.Object)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.ArrayListVisitor.Items">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SweepLineEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SweepLineEvent.Insert">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SweepLineEvent.Delete">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SweepLineEvent.#ctor(System.Object,System.Double,GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SweepLineEvent,System.Object)">
            <summary>
            
            </summary>
            <param name="edgeSet"></param>
            <param name="x"></param>
            <param name="insertEvent"></param>
            <param name="obj"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SweepLineEvent.CompareTo(System.Object)">
            <summary>
            ProjectionEvents are ordered first by their x-value, and then by their eventType.
            It is important that Insert events are sorted before Delete events, so that
            items whose Insert and Delete events occur at the same x-value will be
            correctly handled.
            </summary>
            <param name="o"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SweepLineEvent.EdgeSet">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SweepLineEvent.IsInsert">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SweepLineEvent.IsDelete">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SweepLineEvent.InsertEvent">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SweepLineEvent.DeleteEventIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SweepLineEvent.Object">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SimpleSweepLineIntersector">
            <summary>
            Finds all intersections in one or two sets of edges,
            using a simple x-axis sweepline algorithm.
            While still O(n^2) in the worst case, this algorithm
            drastically improves the average-case time.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SimpleSweepLineIntersector.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SimpleSweepLineIntersector.ComputeIntersections(System.Collections.IList,GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector,System.Boolean)">
            <summary>
            
            </summary>
            <param name="edges"></param>
            <param name="si"></param>
            <param name="testAllSegments"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SimpleSweepLineIntersector.ComputeIntersections(System.Collections.IList,System.Collections.IList,GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector)">
            <summary>
            
            </summary>
            <param name="edges0"></param>
            <param name="edges1"></param>
            <param name="si"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SimpleSweepLineIntersector.Add(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="edges"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SimpleSweepLineIntersector.Add(System.Collections.IList,System.Object)">
            <summary>
            
            </summary>
            <param name="edges"></param>
            <param name="edgeSet"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SimpleSweepLineIntersector.Add(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge,System.Object)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <param name="edgeSet"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SimpleSweepLineIntersector.PrepareEvents">
            <summary> 
            Because Delete Events have a link to their corresponding Insert event,
            it is possible to compute exactly the range of events which must be
            compared to a given Insert event object.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SimpleSweepLineIntersector.ComputeIntersections(GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector)">
            <summary>
            
            </summary>
            <param name="si"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SimpleSweepLineIntersector.ProcessOverlaps(System.Int32,System.Int32,GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SweepLineEvent,GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="ev0"></param>
            <param name="si"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.MonotoneChainIndexer">
            <summary> 
            MonotoneChains are a way of partitioning the segments of an edge to
            allow for fast searching of intersections.
            They have the following properties:
            the segments within a monotone chain will never intersect each other, and
            the envelope of any contiguous subset of the segments in a monotone chain
            is simply the envelope of the endpoints of the subset.
            Property 1 means that there is no need to test pairs of segments from within
            the same monotone chain for intersection.
            Property 2 allows
            binary search to be used to find the intersection points of two monotone chains.
            For many types of real-world data, these properties eliminate a large number of
            segment comparisons, producing substantial speed gains.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.MonotoneChainIndexer.ToIntArray(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.MonotoneChainIndexer.#ctor">
            <summary>
            Default empty constructor.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.MonotoneChainIndexer.GetChainStartIndices(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            
            </summary>
            <param name="pts"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.MonotoneChainIndexer.FindChainEnd(GeoAPI.Geometries.ICoordinate[],System.Int32)">
            <returns> 
            The index of the last point in the monotone chain.
            
            </returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph">
            <summary>
            A GeometryGraph is a graph that models a given Geometry.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.PlanarGraph">
            <summary> 
            The computation of the <c>IntersectionMatrix</c> relies on the use of a structure
            called a "topology graph". The topology graph contains nodes and edges
            corresponding to the nodes and line segments of a <c>Geometry</c>. Each
            node and edge in the graph is labeled with its topological location relative to
            the source point.
            Note that there is no requirement that points of self-intersection be a vertex.
            Thus to obtain a correct topology graph, <c>Geometry</c>s must be
            self-noded before constructing their graphs.
            Two fundamental operations are supported by topology graphs:
            Computing the intersections between all the edges and nodes of a single graph
            Computing the intersections between the edges and nodes of two different graphs
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.PlanarGraph.LinkResultDirectedEdges(System.Collections.IList)">
            <summary> 
            For nodes in the Collection, link the DirectedEdges at the node that are in the result.
            This allows clients to link only a subset of nodes in the graph, for
            efficiency (because they know that only a subset is of interest).
            </summary>
            <param name="nodes"></param>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.GeometriesGraph.PlanarGraph.edges">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.GeometriesGraph.PlanarGraph.nodes">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.GeometriesGraph.PlanarGraph.edgeEndList">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.PlanarGraph.#ctor(GisSharpBlog.NetTopologySuite.GeometriesGraph.NodeFactory)">
            <summary>
            
            </summary>
            <param name="nodeFact"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.PlanarGraph.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.PlanarGraph.GetEdgeEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.PlanarGraph.IsBoundaryNode(System.Int32,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <param name="coord"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.PlanarGraph.InsertEdge(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.PlanarGraph.Add(GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.PlanarGraph.GetNodeEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.PlanarGraph.AddNode(GisSharpBlog.NetTopologySuite.GeometriesGraph.Node)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.PlanarGraph.AddNode(GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="coord"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.PlanarGraph.Find(GeoAPI.Geometries.ICoordinate)">
            <returns> 
            The node if found; null otherwise
            </returns>
            <param name="coord"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.PlanarGraph.AddEdges(System.Collections.IList)">
            <summary> 
            Add a set of edges to the graph.  For each edge two DirectedEdges
            will be created.  DirectedEdges are NOT linked by this method.
            </summary>
            <param name="edgesToAdd"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.PlanarGraph.LinkResultDirectedEdges">
            <summary> 
            Link the DirectedEdges at the nodes of the graph.
            This allows clients to link only a subset of nodes in the graph, for
            efficiency (because they know that only a subset is of interest).
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.PlanarGraph.LinkAllDirectedEdges">
            <summary> 
            Link the DirectedEdges at the nodes of the graph.
            This allows clients to link only a subset of nodes in the graph, for
            efficiency (because they know that only a subset is of interest).
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.PlanarGraph.FindEdgeEnd(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge)">
            <summary> 
            Returns the EdgeEnd which has edge e as its base edge
            (MD 18 Feb 2002 - this should return a pair of edges).
            </summary>
            <param name="e"></param>
            <returns> The edge, if found <c>null</c> if the edge was not found.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.PlanarGraph.FindEdge(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            Returns the edge whose first two coordinates are p0 and p1.
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <returns> The edge, if found <c>null</c> if the edge was not found.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.PlanarGraph.FindEdgeInSameDirection(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
             <summary>
             Returns the edge which starts at p0 and whose first segment is
             parallel to p1.
             </summary>
             <param name="p0"></param>
            <param name="p1"></param>
             <returns> The edge, if found <c>null</c> if the edge was not found.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.PlanarGraph.MatchInSameDirection(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            The coordinate pairs match if they define line segments lying in the same direction.
            E.g. the segments are parallel and in the same quadrant
            (as opposed to parallel and opposite!).
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="ep0"></param>
            <param name="ep1"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.PlanarGraph.WriteEdges(System.IO.StreamWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.PlanarGraph.EdgeEnds">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.PlanarGraph.Nodes">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph.IsInBoundary(System.Int32)">
            <summary> 
            This method implements the Boundary Determination Rule
            for determining whether
            a component (node or edge) that appears multiple times in elements
            of a MultiGeometry is in the boundary or the interior of the Geometry.
            The SFS uses the "Mod-2 Rule", which this function implements.
            An alternative (and possibly more intuitive) rule would be
            the "At Most One Rule":
            isInBoundary = (componentCount == 1)
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph.DetermineBoundary(System.Int32)">
            <summary>
            
            </summary>
            <param name="boundaryCount"></param>
            <returns></returns>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph.lineEdgeMap">
            <summary>
            The lineEdgeMap is a map of the linestring components of the
            parentGeometry to the edges which are derived from them.
            This is used to efficiently perform findEdge queries
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph.useBoundaryDeterminationRule">
            <summary>
            If this flag is true, the Boundary Determination Rule will used when deciding
            whether nodes are in the boundary or not
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph.CreateEdgeSetIntersector">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph.#ctor(System.Int32,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="argIndex"></param>
            <param name="parentGeom"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph.GetBoundaryPoints">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph.FindEdge(GeoAPI.Geometries.ILineString)">
            <summary>
            
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph.ComputeSplitEdges(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="edgelist"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph.Add(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph.AddCollection(GeoAPI.Geometries.IGeometryCollection)">
            <summary>
            
            </summary>
            <param name="gc"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph.AddPoint(GeoAPI.Geometries.IPoint)">
            <summary> 
            Add a Point to the graph.
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph.AddPolygonRing(GeoAPI.Geometries.ILinearRing,GeoAPI.Geometries.Locations,GeoAPI.Geometries.Locations)">
            <summary> 
            The left and right topological location arguments assume that the ring is oriented CW.
            If the ring is in the opposite orientation,
            the left and right locations must be interchanged.
            </summary>
            <param name="lr"></param>
            <param name="cwLeft"></param>
            <param name="cwRight"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph.AddPolygon(GeoAPI.Geometries.IPolygon)">
            <summary>
            
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph.AddLineString(GeoAPI.Geometries.ILineString)">
            <summary>
            
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph.AddEdge(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge)">
            <summary> 
            Add an Edge computed externally.  The label on the Edge is assumed
            to be correct.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph.AddPoint(GeoAPI.Geometries.ICoordinate)">
            <summary>
            Add a point computed externally.  The point is assumed to be a
            Point Geometry part, which has a location of INTERIOR.
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph.ComputeSelfNodes(GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector,System.Boolean)">
            <summary>
            Compute self-nodes, taking advantage of the Geometry type to
            minimize the number of intersection tests.  (E.g. rings are
            not tested for self-intersection, since they are assumed to be valid).
            </summary>
            <param name="li">The <c>LineIntersector</c> to use.</param>
            <param name="computeRingSelfNodes">If <c>false</c>, intersection checks are optimized to not test rings for self-intersection.</param>
            <returns>The SegmentIntersector used, containing information about the intersections found.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph.ComputeEdgeIntersections(GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph,GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector,System.Boolean)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="li"></param>
            <param name="includeProper"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph.InsertPoint(System.Int32,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.Locations)">
            <summary>
            
            </summary>
            <param name="argIndex"></param>
            <param name="coord"></param>
            <param name="onLocation"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph.InsertBoundaryPoint(System.Int32,GeoAPI.Geometries.ICoordinate)">
            <summary> 
            Adds points using the mod-2 rule of SFS.  This is used to add the boundary
            points of dim-1 geometries (Curves/MultiCurves).  According to the SFS,
            an endpoint of a Curve is on the boundary
            if it is in the boundaries of an odd number of Geometries.
            </summary>
            <param name="argIndex"></param>
            <param name="coord"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph.AddSelfIntersectionNodes(System.Int32)">
            <summary>
            
            </summary>
            <param name="argIndex"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph.AddSelfIntersectionNode(System.Int32,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.Locations)">
            <summary>
            Add a node for a self-intersection.
            If the node is a potential boundary node (e.g. came from an edge which
            is a boundary) then insert it as a potential boundary node.
            Otherwise, just add it as a regular node.
            </summary>
            <param name="argIndex"></param>
            <param name="coord"></param>
            <param name="loc"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph.HasTooFewPoints">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph.InvalidPoint">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph.Geometry">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph.BoundaryNodes">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequence">
            <summary>
            A <c>CoordinateSequence</c> implementation based on a packed arrays.
            A <c>CoordinateSequence</c> implementation based on a packed arrays.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequence.coordRef">
            <summary>
            A soft reference to the Coordinate[] representation of this sequence.
            Makes repeated coordinate array accesses more efficient.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequence.dimension">
            <summary>
            The dimensions of the coordinates hold in the packed array
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequence.GetCoordinate(System.Int32)">
            <summary>
            Returns (possibly a copy of) the ith Coordinate in this collection.
            Whether or not the Coordinate returned is the actual underlying
            Coordinate or merely a copy depends on the implementation.
            Note that in the future the semantics of this method may change
            to guarantee that the Coordinate returned is always a copy. Callers are
            advised not to assume that they can modify a CoordinateSequence by
            modifying the Coordinate returned by this method.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequence.GetCoordinateCopy(System.Int32)">
            <summary>
            Returns a copy of the i'th coordinate in this sequence.
            This method optimizes the situation where the caller is
            going to make a copy anyway - if the implementation
            has already created a new Coordinate object, no further copy is needed.
            </summary>
            <param name="i">The index of the coordinate to retrieve.</param>
            <returns>
            A copy of the i'th coordinate in the sequence
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequence.GetCoordinate(System.Int32,GeoAPI.Geometries.ICoordinate)">
            <summary>
            Copies the i'th coordinate in the sequence to the supplied Coordinate.  
            Only the first two dimensions are copied.        
            </summary>
            <param name="i">The index of the coordinate to copy.</param>
            <param name="c">A Coordinate to receive the value.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequence.ToCoordinateArray">
            <summary>
            Returns (possibly copies of) the Coordinates in this collection.
            Whether or not the Coordinates returned are the actual underlying
            Coordinates or merely copies depends on the implementation. 
            Note that if this implementation does not store its data as an array of Coordinates,
            this method will incur a performance penalty because the array needs to
            be built from scratch.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequence.GetCachedCoords">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequence.GetX(System.Int32)">
            <summary>
            Returns ordinate X (0) of the specified coordinate.
            </summary>
            <param name="index"></param>
            <returns>
            The value of the X ordinate in the index'th coordinate.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequence.GetY(System.Int32)">
            <summary>
            Returns ordinate Y (1) of the specified coordinate.
            </summary>
            <param name="index"></param>
            <returns>
            The value of the Y ordinate in the index'th coordinate.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequence.GetOrdinate(System.Int32,GeoAPI.Geometries.Ordinates)">
            <summary>
            Returns the ordinate of a coordinate in this sequence.
            Ordinate indices 0 and 1 are assumed to be X and Y.
            Ordinates indices greater than 1 have user-defined semantics
            (for instance, they may contain other dimensions or measure values).
            </summary>
            <param name="index">The coordinate index in the sequence.</param>
            <param name="ordinate">The ordinate index in the coordinate (in range [0, dimension-1]).</param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequence.SetX(System.Int32,System.Double)">
            <summary>
            Sets the first ordinate of a coordinate in this sequence.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequence.setY(System.Int32,System.Double)">
            <summary>
            Sets the second ordinate of a coordinate in this sequence.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequence.SetOrdinate(System.Int32,GeoAPI.Geometries.Ordinates,System.Double)">
            <summary>
            Sets the ordinate of a coordinate in this sequence.
            </summary>
            <remarks>
            Warning: for performance reasons the ordinate index is not checked:
            if it is over dimensions you may not get an exception but a meaningless value.
            </remarks>        
            <param name="index">The coordinate index.</param>
            <param name="ordinate">The ordinate index in the coordinate, 0 based, 
            smaller than the number of dimensions.</param>
            <param name="value">The new ordinate value.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequence.GetCoordinateInternal(System.Int32)">
            <summary>
            Returns a Coordinate representation of the specified coordinate, by always
            building a new Coordinate object.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequence.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequence.ExpandEnvelope(GeoAPI.Geometries.IEnvelope)">
            <summary>
            Expands the given Envelope to include the coordinates in the sequence.
            Allows implementing classes to optimize access to coordinate values.
            </summary>
            <param name="env">The envelope to expand.</param>
            <returns>A reference to the expanded envelope.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequence.Dimension">
            <summary>
            Returns the dimension (number of ordinates in each coordinate) for this sequence.
            </summary>
            <value></value>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.PackedCoordinateSequence.Count">
            <summary>
            Returns the number of coordinates in this sequence.
            </summary>
            <value></value>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.PackedDoubleCoordinateSequence">
            <summary>
            Packed coordinate sequence implementation based on doubles.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.PackedDoubleCoordinateSequence.coords">
            <summary>
            The packed coordinate array
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedDoubleCoordinateSequence.#ctor(System.Double[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.PackedDoubleCoordinateSequence"/> class.
            </summary>
            <param name="coords"></param>
            <param name="dimensions"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedDoubleCoordinateSequence.#ctor(System.Single[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.PackedDoubleCoordinateSequence"/> class.
            </summary>
            <param name="coordinates"></param>
            <param name="dimensions"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedDoubleCoordinateSequence.#ctor(GeoAPI.Geometries.ICoordinate[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.PackedDoubleCoordinateSequence"/> class.
            </summary>
            <param name="coordinates"></param>
            <param name="dimension"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedDoubleCoordinateSequence.#ctor(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.PackedDoubleCoordinateSequence"/> class.
            </summary>
            <param name="coordinates"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedDoubleCoordinateSequence.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.PackedDoubleCoordinateSequence"/> class.
            </summary>
            <param name="size"></param>
            <param name="dimension"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedDoubleCoordinateSequence.GetCoordinateInternal(System.Int32)">
            <summary>
            Returns a Coordinate representation of the specified coordinate, by always
            building a new Coordinate object.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedDoubleCoordinateSequence.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedDoubleCoordinateSequence.GetOrdinate(System.Int32,GeoAPI.Geometries.Ordinates)">
            <summary>
            Returns the ordinate of a coordinate in this sequence.
            Ordinate indices 0 and 1 are assumed to be X and Y.
            Ordinates indices greater than 1 have user-defined semantics
            (for instance, they may contain other dimensions or measure values).
            </summary>
            <param name="index">The coordinate index in the sequence.</param>
            <param name="ordinate">The ordinate index in the coordinate (in range [0, dimension-1]).</param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedDoubleCoordinateSequence.SetOrdinate(System.Int32,GeoAPI.Geometries.Ordinates,System.Double)">
            <summary>
            Sets the ordinate of a coordinate in this sequence.
            </summary>
            <param name="index">The coordinate index.</param>
            <param name="ordinate">The ordinate index in the coordinate, 0 based,
            smaller than the number of dimensions.</param>
            <param name="value">The new ordinate value.</param>
            <remarks>
            Warning: for performance reasons the ordinate index is not checked:
            if it is over dimensions you may not get an exception but a meaningless value.
            </remarks>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedDoubleCoordinateSequence.ExpandEnvelope(GeoAPI.Geometries.IEnvelope)">
            <summary>
            Expands the given Envelope to include the coordinates in the sequence.
            Allows implementing classes to optimize access to coordinate values.
            </summary>
            <param name="env">The envelope to expand.</param>
            <returns>A reference to the expanded envelope.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.PackedDoubleCoordinateSequence.Count">
            <summary>
            Returns the number of coordinates in this sequence.
            </summary>
            <value></value>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.PackedFloatCoordinateSequence">
            <summary>
            Packed coordinate sequence implementation based on floats.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.PackedFloatCoordinateSequence.coords">
            <summary>
            The packed coordinate array
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedFloatCoordinateSequence.#ctor(System.Single[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.PackedFloatCoordinateSequence"/> class.
            </summary>
            <param name="coords"></param>
            <param name="dimensions"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedFloatCoordinateSequence.#ctor(System.Double[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.PackedFloatCoordinateSequence"/> class.
            </summary>
            <param name="coordinates"></param>
            <param name="dimensions"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedFloatCoordinateSequence.#ctor(GeoAPI.Geometries.ICoordinate[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.PackedFloatCoordinateSequence"/> class.
            </summary>
            <param name="coordinates"></param>
            <param name="dimension"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedFloatCoordinateSequence.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.PackedFloatCoordinateSequence"/> class.
            </summary>
            <param name="size"></param>
            <param name="dimension"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedFloatCoordinateSequence.GetCoordinateInternal(System.Int32)">
            <summary>
            Returns a Coordinate representation of the specified coordinate, by always
            building a new Coordinate object.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedFloatCoordinateSequence.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedFloatCoordinateSequence.GetOrdinate(System.Int32,GeoAPI.Geometries.Ordinates)">
            <summary>
            Returns the ordinate of a coordinate in this sequence.
            Ordinate indices 0 and 1 are assumed to be X and Y.
            Ordinates indices greater than 1 have user-defined semantics
            (for instance, they may contain other dimensions or measure values).
            </summary>
            <param name="index">The coordinate index in the sequence.</param>
            <param name="ordinate">The ordinate index in the coordinate (in range [0, dimension-1]).</param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedFloatCoordinateSequence.SetOrdinate(System.Int32,GeoAPI.Geometries.Ordinates,System.Double)">
            <summary>
            Sets the ordinate of a coordinate in this sequence.
            </summary>
            <param name="index">The coordinate index.</param>
            <param name="ordinate">The ordinate index in the coordinate, 0 based,
            smaller than the number of dimensions.</param>
            <param name="value">The new ordinate value.</param>
            <remarks>
            Warning: for performance reasons the ordinate index is not checked:
            if it is over dimensions you may not get an exception but a meaningless value.
            </remarks>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PackedFloatCoordinateSequence.ExpandEnvelope(GeoAPI.Geometries.IEnvelope)">
            <summary>
            Expands the given Envelope to include the coordinates in the sequence.
            Allows implementing classes to optimize access to coordinate values.
            </summary>
            <param name="env">The envelope to expand.</param>
            <returns>A reference to the expanded envelope.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.PackedFloatCoordinateSequence.Count">
            <summary>
            Returns the number of coordinates in this sequence.
            </summary>
            <value></value>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.CoordinateList">
            <summary>
            A list of Coordinates, which may
            be set to prevent repeated coordinates from occuring in the list.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateList.#ctor">
            <summary>
            Constructs a new list without any coordinates
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateList.#ctor(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            The basic constructor for a CoordinateArray allows repeated points
            (i.e produces a CoordinateList with exactly the same set of points).
            </summary>
            <param name="coord">Initial coordinates</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateList.#ctor(System.Collections.Generic.List{GeoAPI.Geometries.ICoordinate})">
            <summary>
            Constructs a new list from a collection of Coordinates,
            allows repeated points.
            </summary>
            <param name="coordList">Collection of coordinates to load into the list.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateList.#ctor(System.Collections.Generic.List{GeoAPI.Geometries.ICoordinate},System.Boolean)">
            <summary>
            Constructs a new list from a collection of Coordinates,
            allowing caller to specify if repeated points are to be removed.
            </summary>
            <param name="coordList">Collection of coordinates to load into the list.</param>
            <param name="allowRepeated">If <c>false</c>, repeated points are removed.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateList.#ctor(GeoAPI.Geometries.ICoordinate[],System.Boolean)">
            <summary>
            Constructs a new list from an array of Coordinates,
            allowing caller to specify if repeated points are to be removed.
            </summary>
            <param name="coord">Array of coordinates to load into the list.</param>
            <param name="allowRepeated">If <c>false</c>, repeated points are removed.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateList.GetCoordinate(System.Int32)">
            <summary>
            Returns the coordinate at specified index.
            </summary>
            <param name="i">Coordinate index.</param>
            <return>Coordinate specified.</return>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateList.Add(GeoAPI.Geometries.ICoordinate[],System.Boolean,System.Boolean)">
            <summary>
            Add an array of coordinates.
            </summary>
            <param name="coord">Coordinates to be inserted.</param>
            <param name="allowRepeated">If set to false, repeated coordinates are collapsed.</param>
            <param name="direction">If false, the array is added in reverse order.</param>
            <returns>Return true.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateList.Add(GeoAPI.Geometries.ICoordinate[],System.Boolean)">
            <summary>
            Add an array of coordinates.
            </summary>
            <param name="coord">Coordinates to be inserted.</param>
            <param name="allowRepeated">If set to false, repeated coordinates are collapsed.</param>
            <returns>Return true.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateList.Add(System.Object,System.Boolean)">
            <summary>
            Add a coordinate.
            </summary>
            <param name="obj">Coordinate to be inserted, as object.</param>
            <param name="allowRepeated">If set to false, repeated coordinates are collapsed.</param>
            <returns>Return true.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateList.Add(GeoAPI.Geometries.ICoordinate,System.Boolean)">
            <summary>
            Add a coordinate.
            </summary>
            <param name="coord">Coordinate to be inserted.</param>
            <param name="allowRepeated">If set to false, repeated coordinates are collapsed.</param>
            <returns>Return true if all ok.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateList.Add(System.Int32,GeoAPI.Geometries.ICoordinate,System.Boolean)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="coord"></param>
            <param name="allowRepeated"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateList.AddAll(System.Collections.Generic.List{GeoAPI.Geometries.ICoordinate},System.Boolean)">
            <summary>
            Add an array of coordinates.
            </summary>
            <param name="coll">Coordinates collection to be inserted.</param>
            <param name="allowRepeated">If set to false, repeated coordinates are collapsed.</param>
            <returns>Return true if at least one element has added (IList not empty).</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateList.CloseRing">
            <summary>
            Ensure this coordList is a ring, by adding the start point if necessary.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateList.ToCoordinateArray">
            <summary>
            Returns the Coordinates in this collection.
            </summary>
            <returns>Coordinater as <c>Coordinate[]</c> array.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateList.Clone">
            <summary>
            Returns a deep copy of this collection.
            </summary>
            <returns>The copied object.</returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Features.AttributesTable">
            <summary>
            Stores all attributes associated with a single <c>Geometry</c> feature.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Features.IAttributesTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Features.IAttributesTable.AddAttribute(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="attributeName"></param>
            <param name="value"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Features.IAttributesTable.DeleteAttribute(System.String)">
            <summary>
            
            </summary>
            <param name="attributeName"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Features.IAttributesTable.GetType(System.String)">
            <summary>
            
            </summary>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Features.IAttributesTable.Exists(System.String)">
            <summary>
            
            </summary>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Features.IAttributesTable.GetNames">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Features.IAttributesTable.GetValues">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Features.IAttributesTable.Item(System.String)">
            <summary>
            
            </summary>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Features.IAttributesTable.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Features.AttributesTable.#ctor">
            <summary>
            Initialize a new attribute table.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Features.AttributesTable.GetNames">
            <summary>
            Returns a <c>string</c> array containing 
            all names of present attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Features.AttributesTable.GetValues">
            <summary>
            Returns a <c>object</c> array containing 
            all values of present attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Features.AttributesTable.Exists(System.String)">
            <summary>
            Verifies if attribute specified already exists.
            </summary>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Features.AttributesTable.AddAttribute(System.String,System.Object)">
            <summary>
            Build a field with the given value and add it to attributes table.        
            </summary>
            <param name="attributeName">Name of the new attribute.</param>        
            <param name="attributeValue">Value for attribute (can be null).</param>
            <exception cref="T:System.ArgumentException">If attribute already exists.</exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Features.AttributesTable.DeleteAttribute(System.String)">
            <summary>
            Delete the specified attribute from the table.
            </summary>
            <param name="attributeName"></param>       
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Features.AttributesTable.GetType(System.String)">
            <summary>
            Return the <c>System.Type</c> of the specified attribute, 
            useful for casting values retrieved with GetValue methods.
            </summary>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Features.AttributesTable.GetValue(System.String)">
            <summary>
            Get the value of the specified attribute.
            </summary>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Features.AttributesTable.SetValue(System.String,System.Object)">
            <summary>
            Set the value of the specified attribute.
            </summary>
            <param name="attributeName"></param>
            <param name="attributeValue"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Features.AttributesTable.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Features.AttributesTable.Item(System.String)">
            <summary>
            Get / Set the value of the specified attribute.
            </summary>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="T:RTools_NTS.Util.Opts">
            <summary>
            A command-line option parser similar to Perl's getopts. 
            This is for parsing command-line
            options like "-name foo -type theType -v -d".  This parses a string[]
            (like main usually takes) and collects argument information
            based on a parse specification.
            </summary>
            <remarks>
            <para>
            The UsageSpec endCapStyle parse is unfinished.  
            Basically the UsageSpec endCapStyle parse is more expressive than the
            ParseSpec endCapStyle parse (see below).  But in this current implementation,
            none of the additional expressiveness is used.  In other words
            this class does not currently do anything with the optional/required
            switches (-file [-help]) and does not do anything with the pipe
            operator.
            </para>
            <para>
            This takes two types of parse specifications, a perl getopts endCapStyle
            such as "file=s, type:s, v, d" (see the ParseSpec property), 
            or a unix usage endCapStyle such as
            "-file fileName -type [typeName] [-v|-d]" (see the UsageSpec property).
            </para>
            <para>
            For the ParseSpec property, the rules are as follows:
            1) The string is comma-separated like "file=s, type:s, v, d"
            2) = means must have an argument
            3) : means may have an argument
            </para>
            <para>
            For the UsageSpec property, the rules are as follows:
            1) Optional arguments must be enclosed in square brackets [].
            2) Argument names must be all word characters (- is considered to be a 
               word character).
            </para>
            <para>
            
            </para>
            <para>
            Here's an example use:
            <code>
            Opts opts = new Opts();
            opts.ParseSpec = "file=s, type:s, v, d");
             - or -
            opts.UsageSpec = "-file fileName -type [typeName] [-v|-d]";
            if (!opts.Parse(args, out errorMessage)) { // display error message and usage }
            if (opts.Options.ContainsKey("v")) // -v was specified
            if (!opts.Options.ContainsKey("file")) { error... // need -file specified }
            Console.WriteLine("-file specified is {0}", opts.Options["file"]);
            </code>
            </para>
            </remarks>
        </member>
        <member name="F:RTools_NTS.Util.Opts.log">
            <summary>
            Peer class for logging.
            </summary>
        </member>
        <member name="F:RTools_NTS.Util.Opts.options">
            <summary>
            Has all the info after the parse... presence, and arguments.
            </summary>
        </member>
        <member name="F:RTools_NTS.Util.Opts.unswitchedArgs">
            <summary>
            After the parse, has the arguments which were unswitched
            (not after an option like -file).
            </summary>
        </member>
        <member name="F:RTools_NTS.Util.Opts.parseSpec">
            <summary>
            The specification.
            </summary>
        </member>
        <member name="F:RTools_NTS.Util.Opts.requireArg">
            <summary>
            Set from the parseSpec. This is for options which require arguments.
            </summary>
        </member>
        <member name="F:RTools_NTS.Util.Opts.mayHaveArg">
            <summary>
            Set from the parseSpec. This is for options which may have arguments.
            </summary>
        </member>
        <member name="F:RTools_NTS.Util.Opts.noArg">
            <summary>
            Set from the parseSpec. This is for options which do not have arguments.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.Opts.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.Opts.Initialize">
            <summary>
            Utility function, things common to constructors.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.Opts.Display">
            <summary>
            Display the state of this object.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.Opts.Display(System.String)">
            <summary>
            Display the state of this object, with a per-line prefix.
            </summary>
            <param name="prefix">The pre-line prefix.</param>
        </member>
        <member name="M:RTools_NTS.Util.Opts.DisplayParseSpec">
            <summary>
            Display the information gained from the parseSpec.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.Opts.DisplayParseSpec(System.String)">
            <summary>
            Display the information gained from the parseSpec.
            </summary>
            <param name="prefix">A prefix to prepend to each line.</param>
        </member>
        <member name="M:RTools_NTS.Util.Opts.IsSwitch(System.String)">
            <summary>
            Utility method to determine whether a string is a switch or not.
            This currently just checks if it starts with a - which is not
            followed by a digit.
            </summary>
            <param name="s">The string to test.</param>
            <returns>bool - true for yes it's a switch</returns>
        </member>
        <member name="M:RTools_NTS.Util.Opts.Parse(System.String[],System.String@)">
            <summary>
            Parse the options string[], determine if the parse spec
            requirements are met, and provide an error message string
            if not.
            </summary>
            <param name="args">The string[] to parse.</param>
            <param name="errorMessage">Output error message. This
            is set if the input options don't have all the pieces
            required by the parseSpec string.</param>
            <returns>bool - true if parseSpec requirements are met, 
            false otherwise.</returns>
        </member>
        <member name="M:RTools_NTS.Util.Opts.TestSelf">
            <summary>
            Simple self test.
            </summary>
            <returns>bool - true for success, false for failure.</returns>
        </member>
        <member name="P:RTools_NTS.Util.Opts.ParseSpec">
            <summary>
            The specification of what options to look for, which
            have arguments, etc.  This is the "name=s, type:s, v, d"
            endCapStyle.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.Opts.UsageSpec">
            <summary>
            The specification of what options to look for, which
            have arguments, etc.  This is the "-name fileName [-v|-d]"
            endCapStyle.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.Opts.Options">
            <summary>
            This hashtable is built during Parse.  This contains the results
            of the parse for switches (options). Options which don't take
            arguments will map to bool True.  Options which may have arguments
            will map to the argument string if present, and null if not present.
            Options which must have arguments will map to the argument string
            if the Parse succeeds.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.Opts.UnswitchedArgs">
            <summary>
            These are the rest of the command line arguments which are
            not associated with options (switches like "-file").
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.Opts.Verbosity">
            <summary>
            The verbosity level for this object's Logger.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Utilities.Radians">
            <summary>
            Converts radians to degress.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.Radians.ToDegrees(System.Double)">
            <summary>
            Converts radians to degress.
            </summary>
            <param name="radians">Angle in radians.</param>
            <returns>The angle in degrees.</returns>
        </member>
        <member name="T:Iesi_NTS.Collections.HashedSet">
            <summary>
            Implements a <c>Set</c> based on a hash table.  This will give the best lookup, add, and remove
            performance for very large data-sets, but iteration will occur in no particular order.
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.HashedSet.#ctor">
            <summary>
            Creates a new set instance based on a hash table.
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.HashedSet.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a new set instance based on a hash table and
            initializes it based on a collection of elements.
            </summary>
            <param name="initialValues">A collection of elements that defines the initial set contents.</param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Utilities.GeometricShapeFactory">
            <summary>
            Computes various kinds of common geometric shapes.
            Allows various ways of specifying the location and extent of the shapes,
            as well as number of line segments used to form them.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.GeometricShapeFactory.#ctor">
            <summary>
            Create a shape factory which will create shapes using the default GeometryFactory.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.GeometricShapeFactory.#ctor(GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory)">
            <summary>
            Create a shape factory which will create shapes using the given GeometryFactory.
            </summary>
            <param name="geomFact">The factory to use.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.GeometricShapeFactory.CreateRectangle">
            <summary>
            Creates a rectangular <c>Polygon</c>.
            </summary>
            <returns>A rectangular polygon.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.GeometricShapeFactory.CreateCircle">
            <summary>
            Creates a circular <c>Polygon</c>.
            </summary>
            <returns>A circular polygon.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.GeometricShapeFactory.CreateArc(System.Double,System.Double)">
            <summary>
            Creates a elliptical arc, as a LineString.
            </summary>
            <param name="startAng"></param>
            <param name="endAng"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Utilities.GeometricShapeFactory.Base">
            <summary>
            Gets/Sets the location of the shape by specifying the base coordinate
            (which in most cases is the
            lower left point of the envelope containing the shape).
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Utilities.GeometricShapeFactory.Centre">
            <summary>
            Gets/Sets the location of the shape by specifying the centre of
            the shape's bounding box.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Utilities.GeometricShapeFactory.NumPoints">
            <summary>
            Gets/Sets the total number of points in the created Geometry.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Utilities.GeometricShapeFactory.Size">
            <summary>
            Gets/Sets the size of the extent of the shape in both x and y directions.        
            </summary>                
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Utilities.GeometricShapeFactory.Width">
            <summary>
            Gets/Sets the width of the shape.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Utilities.GeometricShapeFactory.Height">
            <summary>
            Gets/Sets the height of the shape.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Utilities.GeometricShapeFactory.Dimensions">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Utilities.GeometricShapeFactory.Dimensions.Base">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Utilities.GeometricShapeFactory.Dimensions.Centre">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Utilities.GeometricShapeFactory.Dimensions.Width">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Utilities.GeometricShapeFactory.Dimensions.Height">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Utilities.GeometricShapeFactory.Dimensions.Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Utilities.GeometricShapeFactory.Dimensions.Envelope">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineSegment">
            <summary>
            A LineSegment which is tagged with its location in a <c>Geometry</c>.
            Used to index the segments in a point and recover the segment locations
            from the index.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.LineSegment">
            <summary> 
            Represents a line segment defined by two <c>Coordinate</c>s.
            Provides methods to compute various geometric properties
            and relationships of line segments.
            This class is designed to be easily mutable (to the extent of
            having its contained points public).
            This supports a common pattern of reusing a single LineSegment
            object as a way of computing segment properties on the
            segments defined by arrays or lists of <c>Coordinate</c>s.
            </summary>    
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.#ctor(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.#ctor(GisSharpBlog.NetTopologySuite.Geometries.LineSegment)">
            <summary>
            
            </summary>
            <param name="ls"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.GetCoordinate(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.SetCoordinates(GisSharpBlog.NetTopologySuite.Geometries.LineSegment)">
            <summary>
            
            </summary>
            <param name="ls"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.SetCoordinates(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.OrientationIndex(GisSharpBlog.NetTopologySuite.Geometries.LineSegment)">
            <summary> 
            Determines the orientation of a LineSegment relative to this segment.
            The concept of orientation is specified as follows:
            Given two line segments A and L,
            A is to the left of a segment L if A lies wholly in the
            closed half-plane lying to the left of L
            A is to the right of a segment L if A lies wholly in the
            closed half-plane lying to the right of L
            otherwise, A has indeterminate orientation relative to L. This
            happens if A is collinear with L or if A crosses the line determined by L.
            </summary>
            <param name="seg">The <c>LineSegment</c> to compare.</param>
            <returns>
            1 if <c>seg</c> is to the left of this segment,        
            -1 if <c>seg</c> is to the right of this segment,
            0 if <c>seg</c> has indeterminate orientation relative to this segment.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.Reverse">
            <summary> 
            Reverses the direction of the line segment.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.Normalize">
            <summary> 
            Puts the line segment into a normalized form.
            This is useful for using line segments in maps and indexes when
            topological equality rather than exact equality is desired.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.Distance(GisSharpBlog.NetTopologySuite.Geometries.LineSegment)">
            <summary> 
            Computes the distance between this line segment and another one.
            </summary>
            <param name="ls"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.Distance(GeoAPI.Geometries.ICoordinate)">
            <summary> 
            Computes the distance between this line segment and a point.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.DistancePerpendicular(GeoAPI.Geometries.ICoordinate)">
            <summary> 
            Computes the perpendicular distance between the (infinite) line defined
            by this line segment and a point.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.ProjectionFactor(GeoAPI.Geometries.ICoordinate)">
            <summary>
            Compute the projection factor for the projection of the point p
            onto this <c>LineSegment</c>. The projection factor is the constant k
            by which the vector for this segment must be multiplied to
            equal the vector for the projection of p.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.Project(GeoAPI.Geometries.ICoordinate)">
            <summary> 
            Compute the projection of a point onto the line determined
            by this line segment.
            Note that the projected point
            may lie outside the line segment.  If this is the case,
            the projection factor will lie outside the range [0.0, 1.0].
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.Project(GisSharpBlog.NetTopologySuite.Geometries.LineSegment)">
            <summary> 
            Project a line segment onto this line segment and return the resulting
            line segment.  The returned line segment will be a subset of
            the target line line segment.  This subset may be null, if
            the segments are oriented in such a way that there is no projection.
            Note that the returned line may have zero length (i.e. the same endpoints).
            This can happen for instance if the lines are perpendicular to one another.
            </summary>
            <param name="seg">The line segment to project.</param>
            <returns>The projected line segment, or <c>null</c> if there is no overlap.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.ClosestPoint(GeoAPI.Geometries.ICoordinate)">
            <summary> 
            Computes the closest point on this line segment to another point.
            </summary>
            <param name="p">The point to find the closest point to.</param>
            <returns>
            A Coordinate which is the closest point on the line segment to the point p.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.ClosestPoints(GisSharpBlog.NetTopologySuite.Geometries.LineSegment)">
            <summary>
            Computes the closest points on a line segment.
            </summary>
            <param name="line"></param>
            <returns>
            A pair of Coordinates which are the closest points on the line segments.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.Intersection(GisSharpBlog.NetTopologySuite.Geometries.LineSegment)">
            <summary>
            Computes an intersection point between two segments, if there is one.
            There may be 0, 1 or many intersection points between two segments.
            If there are 0, null is returned. If there is 1 or more, a single one
            is returned (chosen at the discretion of the algorithm).  If
            more information is required about the details of the intersection,
            the {RobustLineIntersector} class should be used.
            </summary>
            <param name="line"></param>
            <returns> An intersection point, or <c>null</c> if there is none.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.Equals(System.Object)">
            <summary>  
            Returns <c>true</c> if <c>o</c> has the same values for its points.
            </summary>
            <param name="o">A <c>LineSegment</c> with which to do the comparison.</param>
            <returns>
            <c>true</c> if <c>o</c> is a <c>LineSegment</c>
            with the same values for the x and y ordinates.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.op_Equality(GisSharpBlog.NetTopologySuite.Geometries.LineSegment,GisSharpBlog.NetTopologySuite.Geometries.LineSegment)">
            <summary>
            
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.op_Inequality(GisSharpBlog.NetTopologySuite.Geometries.LineSegment,GisSharpBlog.NetTopologySuite.Geometries.LineSegment)">
            <summary>
            
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.CompareTo(System.Object)">
            <summary>
            Compares this object with the specified object for order.
            Uses the standard lexicographic ordering for the points in the LineSegment.
            </summary>
            <param name="o">
            The <c>LineSegment</c> with which this <c>LineSegment</c>
            is being compared.
            </param>
            <returns>
            A negative integer, zero, or a positive integer as this <c>LineSegment</c>
            is less than, equal to, or greater than the specified <c>LineSegment</c>.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.EqualsTopologically(GisSharpBlog.NetTopologySuite.Geometries.LineSegment)">
            <summary>
            Returns <c>true</c> if <c>other</c> is
            topologically equal to this LineSegment (e.g. irrespective
            of orientation).
            </summary>
            <param name="other">
            A <c>LineSegment</c> with which to do the comparison.
            </param>
            <returns>
            <c>true</c> if <c>other</c> is a <c>LineSegment</c>
            with the same values for the x and y ordinates.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.GetHashCode">
            <summary>
            Return HashCode.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.P1">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.P0">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.Length">
            <summary>
            Computes the length of the line segment.
            </summary>
            <returns>The length of the line segment.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.IsHorizontal">
            <summary> 
            Tests whether the segment is horizontal.
            </summary>
            <returns><c>true</c> if the segment is horizontal.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.IsVertical">
            <summary>
            Tests whether the segment is vertical.
            </summary>
            <returns><c>true</c> if the segment is vertical.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.LineSegment.Angle">
            <returns> 
            The angle this segment makes with the x-axis (in radians).
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineSegment.#ctor(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.IGeometry,System.Int32)">
            <summary>
            
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="parent"></param>
            <param name="index"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineSegment.#ctor(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineSegment.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineSegment.Index">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Predicate.SegmentIntersectionTester">
            <summary>
            Tests if any line segments in two sets of CoordinateSequences intersect.
            Optimized for small geometry size.
            Short-circuited to return as soon an intersection is found.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Predicate.SegmentIntersectionTester.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Predicate.SegmentIntersectionTester.HasIntersectionWithLineStrings(GeoAPI.Geometries.ICoordinateSequence,System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="seq"></param>
            <param name="lines"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Predicate.SegmentIntersectionTester.HasIntersection(GeoAPI.Geometries.ICoordinateSequence,GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            
            </summary>
            <param name="seq0"></param>
            <param name="seq1"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Predicate.RectangleIntersects">
            <summary>
            Optimized implementation of spatial predicate "intersects"
            for cases where the first {@link Geometry} is a rectangle.    
            As a further optimization,
            this class can be used directly to test many geometries against a single
            rectangle.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.Predicate.RectangleIntersects.MaximumScanSegmentCount">
            <summary>     
            Crossover size at which brute-force intersection scanning
            is slower than indexed intersection detection.
            Must be determined empirically.  Should err on the
            safe side by making value smaller rather than larger.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Predicate.RectangleIntersects.Intersects(GeoAPI.Geometries.IPolygon,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="rectangle"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Predicate.RectangleIntersects.#ctor(GeoAPI.Geometries.IPolygon)">
            <summary>
            Create a new intersects computer for a rectangle.
            </summary>
            <param name="rectangle">A rectangular geometry.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Predicate.RectangleIntersects.Intersects(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Predicate.EnvelopeIntersectsVisitor">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.Utilities.ShortCircuitedGeometryVisitor">
            <summary>
            A visitor to Geometry elements which can
            be short-circuited by a given condition.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.ShortCircuitedGeometryVisitor.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.ShortCircuitedGeometryVisitor.ApplyTo(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.ShortCircuitedGeometryVisitor.Visit(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.ShortCircuitedGeometryVisitor.IsDone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Predicate.EnvelopeIntersectsVisitor.#ctor(GeoAPI.Geometries.IEnvelope)">
            <summary>
            
            </summary>
            <param name="rectEnv"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Predicate.EnvelopeIntersectsVisitor.Intersects">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Predicate.EnvelopeIntersectsVisitor.Visit(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Predicate.EnvelopeIntersectsVisitor.IsDone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Predicate.ContainsPointVisitor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Predicate.ContainsPointVisitor.#ctor(GeoAPI.Geometries.IPolygon)">
            <summary>
            
            </summary>
            <param name="rectangle"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Predicate.ContainsPointVisitor.ContainsPoint">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Predicate.ContainsPointVisitor.Visit(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Predicate.ContainsPointVisitor.IsDone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Predicate.LineIntersectsVisitor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Predicate.LineIntersectsVisitor.#ctor(GeoAPI.Geometries.IPolygon)">
            <summary>
            
            </summary>
            <param name="rectangle"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Predicate.LineIntersectsVisitor.Intersects">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Predicate.LineIntersectsVisitor.Visit(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Predicate.LineIntersectsVisitor.ComputeSegmentIntersection(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Predicate.LineIntersectsVisitor.IsDone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Predicate.RectangleContains">
            <summary>
            Optimized implementation of spatial predicate "contains"
            for cases where the first <c>Geometry</c> is a rectangle.    
            As a further optimization,
            this class can be used directly to test many geometries against a single rectangle.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Predicate.RectangleContains.Contains(GeoAPI.Geometries.IPolygon,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="rectangle"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Predicate.RectangleContains.#ctor(GeoAPI.Geometries.IPolygon)">
            <summary>
            Create a new contains computer for two geometries.
            </summary>
            <param name="rectangle">A rectangular geometry.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Predicate.RectangleContains.Contains(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Predicate.RectangleContains.IsContainedInBoundary(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Predicate.RectangleContains.IsPointContainedInBoundary(GeoAPI.Geometries.IPoint)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Predicate.RectangleContains.IsPointContainedInBoundary(GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Predicate.RectangleContains.IsLineStringContainedInBoundary(GeoAPI.Geometries.ILineString)">
            <summary>
            
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Predicate.RectangleContains.IsLineSegmentContainedInBoundary(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Overlay.MinimalEdgeRing">
            <summary>
            A ring of edges with the property that no node
            has degree greater than 2.  These are the form of rings required
            to represent polygons under the OGC SFS spatial data model.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.MinimalEdgeRing.#ctor(GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="geometryFactory"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.MinimalEdgeRing.GetNext(GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge)">
            <summary>
            
            </summary>
            <param name="de"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.MinimalEdgeRing.SetEdgeRing(GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge,GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing)">
            <summary>
            
            </summary>
            <param name="de"></param>
            <param name="er"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferOp">
            <summary>
            Computes the buffer of a point, for both positive and negative buffer distances.    
            In GIS, the buffer of a point is defined as
            the Minkowski sum or difference of the point
            with a circle with radius equal to the absolute value of the buffer distance.
            In the CAD/CAM world buffers are known as offset curves.
            Since true buffer curves may contain circular arcs,
            computed buffer polygons can only be approximations to the true point.
            The user can control the accuracy of the curve approximation by specifying
            the number of linear segments with which to approximate a curve.
            The end cap endCapStyle of a linear buffer may be specified. The
            following end cap styles are supported:
            <para>
            {CAP_ROUND} - the usual round end caps
            {CAP_BUTT} - end caps are truncated flat at the line ends
            {CAP_SQUARE} - end caps are squared off at the buffer distance beyond the line ends
            </para>
            The computation uses an algorithm involving iterated noding and precision reduction
            to provide a high degree of robustness.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferOp.PrecisionScaleFactor(GeoAPI.Geometries.IGeometry,System.Double,System.Int32)">
            <summary>
            Compute a reasonable scale factor to limit the precision of
            a given combination of Geometry and buffer distance.
            The scale factor is based on a heuristic.
            </summary>
            <param name="g">The Geometry being buffered.</param>
            <param name="distance">The buffer distance.</param>
            <param name="maxPrecisionDigits">The mzx # of digits that should be allowed by
            the precision determined by the computed scale factor.</param>
            <returns>A scale factor that allows a reasonable amount of precision for the buffer computation.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferOp.Buffer(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            Computes the buffer of a point for a given buffer distance.
            </summary>
            <param name="g">The point to buffer.</param>
            <param name="distance">The buffer distance.</param>
            <returns> The buffer of the input point.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferOp.Buffer(GeoAPI.Geometries.IGeometry,System.Double,GeoAPI.Operations.Buffer.BufferStyle)">
            <summary>
            Computes the buffer of a point for a given buffer distance,
            using the given Cap Style for borders of the point.
            </summary>
            <param name="g">The point to buffer.</param>
            <param name="distance">The buffer distance.</param>        
            <param name="endCapStyle">Cap Style to use for compute buffer.</param>
            <returns> The buffer of the input point.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferOp.Buffer(GeoAPI.Geometries.IGeometry,System.Double,System.Int32)">
            <summary>
            Computes the buffer for a point for a given buffer distance
            and accuracy of approximation.
            </summary>
            <param name="g">The point to buffer.</param>
            <param name="distance">The buffer distance.</param>
            <param name="quadrantSegments">The number of segments used to approximate a quarter circle.</param>
            <returns>The buffer of the input point.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferOp.Buffer(GeoAPI.Geometries.IGeometry,System.Double,System.Int32,GeoAPI.Operations.Buffer.BufferStyle)">
            <summary>
            Computes the buffer for a point for a given buffer distance
            and accuracy of approximation.
            </summary>
            <param name="g">The point to buffer.</param>
            <param name="distance">The buffer distance.</param>
            <param name="quadrantSegments">The number of segments used to approximate a quarter circle.</param>
            <param name="endCapStyle">Cap Style to use for compute buffer.</param>
            <returns>The buffer of the input point.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferOp.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Initializes a buffer computation for the given point.
            </summary>
            <param name="g">The point to buffer.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferOp.GetResultGeometry(System.Double)">
            <summary>
            
            </summary>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferOp.GetResultGeometry(System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="distance"></param>
            <param name="quadrantSegments"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferOp.ComputeGeometry">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferOp.BufferOriginalPrecision">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferOp.BufferFixedPrecision(GeoAPI.Geometries.IPrecisionModel)">
            <summary>
            
            </summary>
            <param name="fixedPM"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferOp.BufferReducedPrecision">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferOp.BufferReducedPrecision(System.Int32)">
            <summary>
            
            </summary>
            <param name="precisionDigits"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferOp.EndCapStyle">
            <summary> 
            Specifies the end cap endCapStyle of the generated buffer.
            The styles supported are CapRound, CapButt, and CapSquare.
            The default is CapRound.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferOp.QuadrantSegments">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.ColumnStructure">
            <summary>
            This class is used in conjunction with RowStructure. 
            </summary>
            <remarks>
            For an explaination of PropertyDescriptor see http://www.devx.com/dotnet/Article/7874
            and the remarks for RowStructure. This class inherits from PropertyDescriptor. 
            The PropertyDescriptor describes a property - in this case a dynamically generated property.
            </remarks>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ColumnStructure.#ctor(GisSharpBlog.NetTopologySuite.IO.DbaseFieldDescriptor,System.Int32)">
            <summary>
            Initializes a new instance of the ColumnStructure class.
            </summary>
            <param name="dbaseField"></param>
            <param name="index"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ColumnStructure.CanResetValue(System.Object)">
            <summary>
            
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ColumnStructure.ResetValue(System.Object)">
            <summary>
            
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ColumnStructure.ShouldSerializeValue(System.Object)">
            <summary>
            
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ColumnStructure.SetValue(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ColumnStructure.GetValue(System.Object)">
            <summary>
            
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.ColumnStructure.ComponentType">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.ColumnStructure.PropertyType">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.ColumnStructure.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.ColumnStructure.Length">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.QuadrantOp">
            <summary> 
            Utility functions for working with quadrants, which are numbered as follows:
            <para>
            1 | 0
            --+--
            2 | 3
            </para>
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.QuadrantOp.#ctor">
            <summary>
            Only static methods!
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.QuadrantOp.Quadrant(System.Double,System.Double)">
            <summary> 
            Returns the quadrant of a directed line segment (specified as x and y
            displacements, which cannot both be 0).
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.QuadrantOp.Quadrant(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary> 
            Returns the quadrant of a directed line segment from p0 to p1.
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.QuadrantOp.IsOpposite(System.Int32,System.Int32)">
            <summary>
            Returns true if the quadrants are 1 and 3, or 2 and 4.
            </summary>
            <param name="quad1"></param>
            <param name="quad2"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.QuadrantOp.CommonHalfPlane(System.Int32,System.Int32)">
            <summary>
            Returns the right-hand quadrant of the halfplane defined by the two quadrants,
            or -1 if the quadrants are opposite, or the quadrant if they are identical.
            </summary>
            <param name="quad1"></param>
            <param name="quad2"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.QuadrantOp.IsInHalfPlane(System.Int32,System.Int32)">
            <summary> 
            Returns whether the given quadrant lies within the given halfplane (specified
            by its right-hand quadrant).
            </summary>
            <param name="quad"></param>
            <param name="halfPlane"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.QuadrantOp.IsNorthern(System.Int32)">
            <summary> 
            Returns true if the given quadrant is 0 or 1.
            </summary>
            <param name="quad"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SimpleEdgeSetIntersector">
            <summary>
            Finds all intersections in one or two sets of edges,
            using the straightforward method of
            comparing all segments.
            This algorithm is too slow for production use, but is useful for testing purposes.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SimpleEdgeSetIntersector.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SimpleEdgeSetIntersector.ComputeIntersections(System.Collections.IList,GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector,System.Boolean)">
            <summary>
            
            </summary>
            <param name="edges"></param>
            <param name="si"></param>
            <param name="testAllSegments"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SimpleEdgeSetIntersector.ComputeIntersections(System.Collections.IList,System.Collections.IList,GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector)">
            <summary>
            
            </summary>
            <param name="edges0"></param>
            <param name="edges1"></param>
            <param name="si"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SimpleEdgeSetIntersector.ComputeIntersects(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge,GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge,GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector)">
            <summary>
            Performs a brute-force comparison of every segment in each Edge.
            This has n^2 performance, and is about 100 times slower than using
            monotone chains.
            </summary>
            <param name="e0"></param>
            <param name="e1"></param>
            <param name="si"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeIntersectionList">
            <summary>
            A list of edge intersections along an Edge.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeIntersectionList.#ctor(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge)">
            <summary>
            
            </summary>
            <param name="edge"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeIntersectionList.Add(GeoAPI.Geometries.ICoordinate,System.Int32,System.Double)">
            <summary> 
            Adds an intersection into the list, if it isn't already there.
            The input segmentIndex and dist are expected to be normalized.
            </summary>
            <param name="intPt"></param>
            <param name="segmentIndex"></param>
            <param name="dist"></param>
            <returns>The EdgeIntersection found or added.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeIntersectionList.GetEnumerator">
            <summary> 
            Returns an iterator of EdgeIntersections.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeIntersectionList.IsIntersection(GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeIntersectionList.AddEndpoints">
            <summary>
            Adds entries for the first and last points of the edge to the list.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeIntersectionList.AddSplitEdges(System.Collections.IList)">
            <summary> 
            Creates new edges for all the edges that the intersections in this
            list split the parent edge into.
            Adds the edges to the input list (this is so a single list
            can be used to accumulate all split edges for a Geometry).
            </summary>
            <param name="edgeList"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeIntersectionList.CreateSplitEdge(GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeIntersection,GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeIntersection)">
            <summary>
            Create a new "split edge" with the section of points between
            (and including) the two intersections.
            The label for the new edge is the same as the label for the parent edge.
            </summary>
            <param name="ei0"></param>
            <param name="ei1"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeIntersectionList.Write(System.IO.StreamWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeIntersectionList.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryEditor">
            <summary> 
            Supports creating a new <c>Geometry</c> which is a modification of an existing one.
            Geometry objects are intended to be treated as immutable.
            This class allows you to "modify" a Geometry
            by traversing it and creating a new Geometry with the same overall structure but
            possibly modified components.
            The following kinds of modifications can be made:
            <para>
            The values of the coordinates may be changed.
            Changing coordinate values may make the result Geometry invalid;
            this is not checked by the GeometryEditor.
            </para>
            <para>The coordinate lists may be changed
            (e.g. by adding or deleting coordinates).
            The modifed coordinate lists must be consistent with their original parent component
            (e.g. a LinearRing must always have at least 4 coordinates, and the first and last
            coordinate must be equal).
            </para>
            <para>Components of the original point may be deleted
            (e.g. holes may be removed from a Polygon, or LineStrings removed from a MultiLineString).
            Deletions will be propagated up the component tree appropriately.
            </para>
            Note that all changes must be consistent with the original Geometry's structure
            (e.g. a Polygon cannot be collapsed into a LineString).
            The resulting Geometry is not checked for validity.
            If validity needs to be enforced, the new Geometry's IsValid should be checked.
            </summary>    
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryEditor.factory">
            <summary> 
            The factory used to create the modified Geometry.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryEditor.#ctor">
            <summary> 
            Creates a new GeometryEditor object which will create
            an edited <c>Geometry</c> with the same {GeometryFactory} as the input Geometry.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryEditor.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary> 
            Creates a new GeometryEditor object which will create
            the edited Geometry with the given GeometryFactory.
            </summary>
            <param name="factory">The GeometryFactory to create the edited Geometry with.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryEditor.Edit(GeoAPI.Geometries.IGeometry,GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryEditor.GeometryEditorOperation)">
            <summary> 
            Edit the input <c>Geometry</c> with the given edit operation.
            Clients will create subclasses of GeometryEditorOperation or
            CoordinateOperation to perform required modifications.
            </summary>
            <param name="geometry">The Geometry to edit.</param>
            <param name="operation">The edit operation to carry out.</param>
            <returns>A new <c>Geometry</c> which is the result of the editing.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryEditor.EditPolygon(GeoAPI.Geometries.IPolygon,GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryEditor.GeometryEditorOperation)">
            <summary>
            
            </summary>
            <param name="polygon"></param>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryEditor.EditGeometryCollection(GeoAPI.Geometries.IGeometryCollection,GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryEditor.GeometryEditorOperation)">
            <summary>
            
            </summary>
            <param name="collection"></param>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryEditor.GeometryEditorOperation">
            <summary> 
            A interface which specifies an edit operation for Geometries.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryEditor.GeometryEditorOperation.Edit(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Edits a Geometry by returning a new Geometry with a modification.
            The returned Geometry might be the same as the Geometry passed in.
            </summary>
            <param name="geometry">The Geometry to modify.</param>
            <param name="factory">
            The factory with which to construct the modified Geometry
            (may be different to the factory of the input point).
            </param>
            <returns>A new Geometry which is a modification of the input Geometry.</returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryEditor.CoordinateOperation">
            <summary>
            A GeometryEditorOperation which modifies the coordinate list of a <c>Geometry</c>.
            Operates on Geometry subclasses which contains a single coordinate list.
            </summary>      
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryEditor.CoordinateOperation.Edit(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.GeometryEditor.CoordinateOperation.Edit(GeoAPI.Geometries.ICoordinate[],GeoAPI.Geometries.IGeometry)">
            <summary> 
            Edits the array of <c>Coordinate</c>s from a <c>Geometry</c>.
            </summary>
            <param name="coordinates">The coordinate array to operate on.</param>
            <param name="geometry">The point containing the coordinate list.</param>
            <returns>An edited coordinate array (which may be the same as the input).</returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.CoordinateSequences">
            <summary>
            Utility functions for manipulating <see cref="T:GeoAPI.Geometries.ICoordinateSequence"/>s.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateSequences.Reverse(GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Reverses the coordinates in a sequence in-place.
            </summary>
            <param name="seq"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateSequences.Swap(GeoAPI.Geometries.ICoordinateSequence,System.Int32,System.Int32)">
            <summary>
            Swaps two coordinates in a sequence.
            </summary>
            <param name="seq"></param>
            <param name="i"></param>
            <param name="j"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Algorithm.RobustLineIntersector">
            <summary> 
            A robust version of <c>LineIntersector</c>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.RobustLineIntersector.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.RobustLineIntersector.ComputeIntersection(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="p1"></param>
            <param name="p2"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.RobustLineIntersector.ComputeIntersect(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="q1"></param>
            <param name="q2"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.RobustLineIntersector.ComputeCollinearIntersection(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="q1"></param>
            <param name="q2"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.RobustLineIntersector.Intersection(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary> 
            This method computes the actual value of the intersection point.
            To obtain the maximum precision from the intersection calculation,
            the coordinates are normalized by subtracting the minimum
            ordinate values (in absolute value).  This has the effect of
            removing common significant digits from the calculation to
            maintain more bits of precision.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="q1"></param>
            <param name="q2"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.RobustLineIntersector.NormalizeToMinimum(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="n1"></param>
            <param name="n2"></param>
            <param name="n3"></param>
            <param name="n4"></param>
            <param name="normPt"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.RobustLineIntersector.NormalizeToEnvCentre(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
             Normalize the supplied coordinates to
            so that the midpoint of their intersection envelope
            lies at the origin.
            </summary>
            <param name="n00"></param>
            <param name="n01"></param>
            <param name="n10"></param>
            <param name="n11"></param>
            <param name="normPt"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.RobustLineIntersector.SmallestInAbsValue(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x1"></param>
            <param name="x2"></param>
            <param name="x3"></param>
            <param name="x4"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.RobustLineIntersector.IsInSegmentEnvelopes(GeoAPI.Geometries.ICoordinate)">
            <summary> 
            Test whether a point lies in the envelopes of both input segments.
            A correctly computed intersection point should return <c>true</c>
            for this test.
            Since this test is for debugging purposes only, no attempt is
            made to optimize the envelope test.
            </summary>
            <param name="intPt"></param>
            <returns><c>true</c> if the input point lies within both input segment envelopes.</returns>
        </member>
        <member name="T:Iesi_NTS.Collections.ListSet">
            <summary>
            Implements a <c>Set</c> based on a list.  Performance is much better for very small lists 
            than either <c>HashedSet</c> or <c>SortedSet</c>.  However, performance degrades rapidly as 
            the data-set gets bigger.  Use a <c>HybridSet</c> instead if you are not sure your data-set
            will always remain very small.  Iteration produces elements in the order they were added.
            However, element order is not guaranteed to be maintained by the various <c>Set</c>
            mathematical operators.  
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.ListSet.#ctor">
            <summary>
            Creates a new set instance based on a list.
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.ListSet.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a new set instance based on a list and
            initializes it based on a collection of elements.
            </summary>
            <param name="initialValues">A collection of elements that defines the initial set contents.</param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineStringSimplifier">
            <summary>
            Simplifies a TaggedLineString, preserving topology
            (in the sense that no new intersections are introduced).
            Uses the recursive D-P algorithm.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineStringSimplifier.#ctor(GisSharpBlog.NetTopologySuite.Simplify.LineSegmentIndex,GisSharpBlog.NetTopologySuite.Simplify.LineSegmentIndex)">
            <summary>
            
            </summary>
            <param name="inputIndex"></param>
            <param name="outputIndex"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineStringSimplifier.Simplify(GisSharpBlog.NetTopologySuite.Simplify.TaggedLineString)">
            <summary>
            
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineStringSimplifier.SimplifySection(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <param name="depth"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineStringSimplifier.FindFurthestPoint(GeoAPI.Geometries.ICoordinate[],System.Int32,System.Int32,System.Double[])">
            <summary>
            
            </summary>
            <param name="pts"></param>
            <param name="i"></param>
            <param name="j"></param>
            <param name="maxDistance"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineStringSimplifier.Flatten(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineStringSimplifier.HasBadIntersection(GisSharpBlog.NetTopologySuite.Simplify.TaggedLineString,System.Int32[],GisSharpBlog.NetTopologySuite.Geometries.LineSegment)">
            <summary>
            
            </summary>
            <param name="parentLine"></param>
            <param name="sectionIndex"></param>
            <param name="candidateSeg"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineStringSimplifier.HasBadOutputIntersection(GisSharpBlog.NetTopologySuite.Geometries.LineSegment)">
            <summary>
            
            </summary>
            <param name="candidateSeg"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineStringSimplifier.HasBadInputIntersection(GisSharpBlog.NetTopologySuite.Simplify.TaggedLineString,System.Int32[],GisSharpBlog.NetTopologySuite.Geometries.LineSegment)">
            <summary>
            
            </summary>
            <param name="parentLine"></param>
            <param name="sectionIndex"></param>
            <param name="candidateSeg"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineStringSimplifier.IsInLineSection(GisSharpBlog.NetTopologySuite.Simplify.TaggedLineString,System.Int32[],GisSharpBlog.NetTopologySuite.Simplify.TaggedLineSegment)">
            <summary>
            Tests whether a segment is in a section of a TaggedLineString-
            </summary>
            <param name="line"></param>
            <param name="sectionIndex"></param>
            <param name="seg"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineStringSimplifier.HasInteriorIntersection(GisSharpBlog.NetTopologySuite.Geometries.LineSegment,GisSharpBlog.NetTopologySuite.Geometries.LineSegment)">
            <summary>
            
            </summary>
            <param name="seg0"></param>
            <param name="seg1"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineStringSimplifier.Remove(GisSharpBlog.NetTopologySuite.Simplify.TaggedLineString,System.Int32,System.Int32)">
            <summary>
            Remove the segs in the section of the line.
            </summary>
            <param name="line"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Simplify.TaggedLineStringSimplifier.DistanceTolerance">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Overlay.PointBuilder">
            <summary>
            Constructs <c>Point</c>s from the nodes of an overlay graph.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.PointBuilder.#ctor(GisSharpBlog.NetTopologySuite.Operation.Overlay.OverlayOp,GeoAPI.Geometries.IGeometryFactory,GisSharpBlog.NetTopologySuite.Algorithm.PointLocator)">
            <summary>
            
            </summary>
            <param name="op"></param>
            <param name="geometryFactory"></param>
            <param name="ptLocator"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.PointBuilder.Build(GisSharpBlog.NetTopologySuite.Operation.Overlay.SpatialFunction)">
            <summary>
            
            </summary>
            <param name="opCode"></param>
            <returns>
            A list of the Points in the result of the specified overlay operation.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.PointBuilder.CollectNodes(GisSharpBlog.NetTopologySuite.Operation.Overlay.SpatialFunction)">
            <summary>
            
            </summary>
            <param name="opCode"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.PointBuilder.SimplifyPoints(System.Collections.IList)">
            <summary>
            This method simplifies the resultant Geometry by finding and eliminating
            "covered" points.
            A point is covered if it is contained in another element Geometry
            with higher dimension (e.g. a point might be contained in a polygon,
            in which case the point can be eliminated from the resultant).
            </summary>
            <param name="resultNodeList"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineMergeGraph">
            <summary>
            A planar graph of edges that is analyzed to sew the edges together. The 
            <c>marked</c> flag on <c>com.vividsolutions.planargraph.Edge</c>s 
            and <c>com.vividsolutions.planargraph.Node</c>s indicates whether they have been
            logically deleted from the graph.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Planargraph.PlanarGraph">
            <summary>
            Represents a directed graph which is embeddable in a planar surface.
            This class and the other classes in this package serve as a framework for
            building planar graphs for specific algorithms. This class must be
            subclassed to expose appropriate methods to construct the graph. This allows
            controlling the types of graph components ({DirectedEdge}s,
            <c>Edge</c>s and <c>Node</c>s) which can be added to the graph. An
            application which uses the graph framework will almost always provide
            subclasses for one or more graph components, which hold application-specific
            data and graph algorithms.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Planargraph.PlanarGraph.edges">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Planargraph.PlanarGraph.dirEdges">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Planargraph.PlanarGraph.nodeMap">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.PlanarGraph.#ctor">
            <summary>
            Constructs a PlanarGraph without any Edges, DirectedEdges, or Nodes.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.PlanarGraph.FindNode(GeoAPI.Geometries.ICoordinate)">
            <summary>
            Returns the Node at the given location, or null if no Node was there.
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.PlanarGraph.Add(GisSharpBlog.NetTopologySuite.Planargraph.Node)">
            <summary>
            Adds a node to the map, replacing any that is already at that location.
            Only subclasses can add Nodes, to ensure Nodes are of the right type.
            </summary>
            <param name="node"></param>
            <returns>The added node.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.PlanarGraph.Add(GisSharpBlog.NetTopologySuite.Planargraph.Edge)">
            <summary>
            Adds the Edge and its DirectedEdges with this PlanarGraph.
            Assumes that the Edge has already been created with its associated DirectEdges.
            Only subclasses can add Edges, to ensure the edges added are of the right class.
            </summary>
            <param name="edge"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.PlanarGraph.Add(GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge)">
            <summary>
            Adds the Edge to this PlanarGraph; only subclasses can add DirectedEdges,
            to ensure the edges added are of the right class.
            </summary>
            <param name="dirEdge"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.PlanarGraph.GetNodeEnumerator">
            <summary>
            Returns an IEnumerator over the Nodes in this PlanarGraph.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.PlanarGraph.GetDirEdgeEnumerator">
            <summary> 
            Returns an Iterator over the DirectedEdges in this PlanarGraph, in the order in which they
            were added.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.PlanarGraph.GetEdgeEnumerator">
            <summary>
            Returns an Iterator over the Edges in this PlanarGraph, in the order in which they
            were added.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.PlanarGraph.Remove(GisSharpBlog.NetTopologySuite.Planargraph.Edge)">
            <summary>
            Removes an Edge and its associated DirectedEdges from their from-Nodes and
            from this PlanarGraph. Note: This method does not remove the Nodes associated
            with the Edge, even if the removal of the Edge reduces the degree of a
            Node to zero.
            </summary>
            <param name="edge"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.PlanarGraph.Remove(GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge)">
            <summary> 
            Removes DirectedEdge from its from-Node and from this PlanarGraph. Note:
            This method does not remove the Nodes associated with the DirectedEdge,
            even if the removal of the DirectedEdge reduces the degree of a Node to
            zero.
            </summary>
            <param name="de"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.PlanarGraph.Remove(GisSharpBlog.NetTopologySuite.Planargraph.Node)">
            <summary>
            Removes a node from the graph, along with any associated DirectedEdges and
            Edges.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.PlanarGraph.FindNodesOfDegree(System.Int32)">
            <summary>
            Returns all Nodes with the given number of Edges around it.
            </summary>
            <param name="degree"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Planargraph.PlanarGraph.Nodes">
            <summary>
            Returns the Nodes in this PlanarGraph.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Planargraph.PlanarGraph.Edges">
            <summary>
            Returns the Edges that have been added to this PlanarGraph.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineMergeGraph.AddEdge(GeoAPI.Geometries.ILineString)">
            <summary>
            Adds an Edge, DirectedEdges, and Nodes for the given LineString representation
            of an edge. 
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineMergeGraph.GetNode(GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Buffer.SubgraphDepthLocater">
            <summary>
            Locates a subgraph inside a set of subgraphs,
            in order to determine the outside depth of the subgraph.
            The input subgraphs are assumed to have had depths
            already calculated for their edges.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.SubgraphDepthLocater.#ctor(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="subgraphs"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.SubgraphDepthLocater.GetDepth(GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.SubgraphDepthLocater.FindStabbedSegments(GeoAPI.Geometries.ICoordinate)">
            <summary>
            Finds all non-horizontal segments intersecting the stabbing line.
            The stabbing line is the ray to the right of stabbingRayLeftPt.
            </summary>
            <param name="stabbingRayLeftPt">The left-hand origin of the stabbing line.</param>
            <returns>A List of {DepthSegments} intersecting the stabbing line.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.SubgraphDepthLocater.FindStabbedSegments(GeoAPI.Geometries.ICoordinate,System.Collections.IList,System.Collections.IList)">
            <summary>
            Finds all non-horizontal segments intersecting the stabbing line
            in the list of dirEdges.
            The stabbing line is the ray to the right of stabbingRayLeftPt.
            </summary>
            <param name="stabbingRayLeftPt">The left-hand origin of the stabbing line.</param>
            <param name="dirEdges"></param>
            <param name="stabbedSegments">The current list of DepthSegments intersecting the stabbing line.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.SubgraphDepthLocater.FindStabbedSegments(GeoAPI.Geometries.ICoordinate,GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge,System.Collections.IList)">
            <summary>
            Finds all non-horizontal segments intersecting the stabbing line
            in the input dirEdge.
            The stabbing line is the ray to the right of stabbingRayLeftPt.
            </summary>
            <param name="stabbingRayLeftPt">The left-hand origin of the stabbing line.</param>
            <param name="dirEdge"></param>
            <param name="stabbedSegments">The current list of DepthSegments intersecting the stabbing line.</param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Buffer.SubgraphDepthLocater.DepthSegment">
            <summary>
            A segment from a directed edge which has been assigned a depth value
            for its sides.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.SubgraphDepthLocater.DepthSegment.#ctor(GisSharpBlog.NetTopologySuite.Geometries.LineSegment,System.Int32)">
            <summary>
            
            </summary>
            <param name="seg"></param>
            <param name="depth"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.SubgraphDepthLocater.DepthSegment.CompareTo(System.Object)">
            <summary>
            Defines a comparision operation on DepthSegments
            which orders them left to right:
            DS1 smaller DS2   if   DS1.seg is left of DS2.seg.
            DS1 bigger  DS2   if   DS1.seg is right of DS2.seg.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.SubgraphDepthLocater.DepthSegment.CompareX(GisSharpBlog.NetTopologySuite.Geometries.LineSegment,GisSharpBlog.NetTopologySuite.Geometries.LineSegment)">
            <summary>
            Compare two collinear segments for left-most ordering.
            If segs are vertical, use vertical ordering for comparison.
            If segs are equal, return 0.
            Segments are assumed to be directed so that the second coordinate is >= to the first
            (e.g. up and to the right).
            </summary>
            <param name="seg0">A segment to compare.</param>
            <param name="seg1">A segment to compare.</param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Buffer.SubgraphDepthLocater.DepthSegment.LeftDepth">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Noding.Snapround.MCIndexSnapRounder">
            <summary>
            Uses Snap Rounding to compute a rounded,
            fully noded arrangement from a set of {@link SegmentString}s.
            Implements the Snap Rounding technique described in Hobby, Guibas and Marimont, and Goodrich et al.
            Snap Rounding assumes that all vertices lie on a uniform grid
            (hence the precision model of the input must be fixed precision,
            and all the input vertices must be rounded to that precision).
            <para>
            This implementation uses a monotone chains and a spatial index to
            speed up the intersection tests.
            This implementation appears to be fully robust using an integer precision model.
            It will function with non-integer precision models, but the
            results are not 100% guaranteed to be correctly noded.
            </para>
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.MCIndexSnapRounder.#ctor(GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Noding.Snapround.MCIndexSnapRounder"/> class.
            </summary>
            <param name="pm">The <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel"/> to use.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.MCIndexSnapRounder.GetNodedSubstrings">
            <summary>
            Returns a <see cref="T:System.Collections.IList"/> of fully noded <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s.
            The <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s have the same context as their parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.MCIndexSnapRounder.ComputeNodes(System.Collections.IList)">
            <summary>
            Computes the noding for a collection of <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s.
            Some Noders may add all these nodes to the input <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s;
            others may only add some or none at all.
            </summary>
            <param name="inputSegmentStrings"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.MCIndexSnapRounder.CheckCorrectness(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="inputSegmentStrings"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.MCIndexSnapRounder.SnapRound(System.Collections.IList,GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector)">
            <summary>
            
            </summary>
            <param name="segStrings"></param>
            <param name="li"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.MCIndexSnapRounder.FindInteriorIntersections(System.Collections.IList,GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector)">
             <summary>
             Computes all interior intersections in the collection of <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s,
             and returns their <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/>s.
            
             Does NOT node the segStrings.
             </summary>
             <param name="segStrings"></param>
             <param name="li"></param>
             <returns>A list of Coordinates for the intersections.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.MCIndexSnapRounder.ComputeIntersectionSnaps(System.Collections.IList)">
            <summary>
            Computes nodes introduced as a result of snapping segments to snap points (hot pixels).
            </summary>
            <param name="snapPts"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.MCIndexSnapRounder.ComputeVertexSnaps(System.Collections.IList)">
            <summary>
            Computes nodes introduced as a result of
            snapping segments to vertices of other segments.
            </summary>
            <param name="edges"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.MCIndexSnapRounder.ComputeVertexSnaps(GisSharpBlog.NetTopologySuite.Noding.SegmentString)">
            <summary>
            Performs a brute-force comparison of every segment in each <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>.
            This has n^2 performance.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Noding.Snapround.HotPixel">
            <summary>
            Implements a "hot pixel" as used in the Snap Rounding algorithm.
            A hot pixel contains the interior of the tolerance square and the boundary
            minus the top and right segments.
            The hot pixel operations are all computed in the integer domain
            to avoid rounding problems.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.HotPixel.#ctor(GeoAPI.Geometries.ICoordinate,System.Double,GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Noding.Snapround.HotPixel"/> class.
            </summary>
            <param name="pt"></param>
            <param name="scaleFactor"></param>
            <param name="li"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.HotPixel.GetSafeEnvelope">
            <summary>
            Returns a "safe" envelope that is guaranteed to contain the hot pixel.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.HotPixel.InitCorners(GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.HotPixel.Scale(System.Double)">
            <summary>
            
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.HotPixel.Intersects(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.HotPixel.CopyScaled(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="pScaled"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.HotPixel.IntersectsScaled(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.HotPixel.IntersectsToleranceSquare(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            Tests whether the segment p0-p1 intersects the hot pixel tolerance square.
            Because the tolerance square point set is partially open (along the
            top and right) the test needs to be more sophisticated than
            simply checking for any intersection.  However, it
            can take advantage of the fact that because the hot pixel edges
            do not lie on the coordinate grid.  It is sufficient to check
            if there is at least one of:
             - a proper intersection with the segment and any hot pixel edge.
             - an intersection between the segment and both the left and bottom edges.
             - an intersection between a segment endpoint and the hot pixel coordinate.
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.HotPixel.IntersectsPixelClosure(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            Test whether the given segment intersects
            the closure of this hot pixel.
            This is NOT the test used in the standard snap-rounding
            algorithm, which uses the partially closed tolerance square instead.
            This routine is provided for testing purposes only.
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Noding.Snapround.HotPixel.Coordinate">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString">
            <summary>
            Represents a list of contiguous line segments, and supports noding the segments.
            The line segments are represented by an array of <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/>s.
            Intended to optimize the noding of contiguous segments by
            reducing the number of allocated objects.
            <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s can carry a context object, which is useful
            for preserving topological or parentage information.
            All noded substrings are initialized with the same context object.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentString.GetNodedSubstrings(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="segStrings"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentString.GetNodedSubstrings(System.Collections.IList,System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="segStrings"></param>
            <param name="resultEdgelist"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentString.#ctor(GeoAPI.Geometries.ICoordinate[],System.Object)">
            <summary>
            Creates a new segment string from a list of vertices.
            </summary>
            <param name="pts">The vertices of the segment string.</param>
            <param name="data">The user-defined data of this segment string (may be null).</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentString.GetCoordinate(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentString.GetSegmentOctant(System.Int32)">
            <summary>
             Gets the octant of the segment starting at vertex <c>index</c>.
            </summary>
            <param name="index">
            The index of the vertex starting the segment.  
            Must not be the last index in the vertex list
            </param>
            <returns>The octant of the segment at the vertex</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentString.AddIntersections(GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector,System.Int32,System.Int32)">
            <summary>
            Adds EdgeIntersections for one or both
            intersections found for a segment of an edge to the edge intersection list.   
            </summary>
            <param name="li"></param>
            <param name="segmentIndex"></param>
            <param name="geomIndex"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentString.AddIntersection(GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add an <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentNode"/> for intersection intIndex.
            An intersection that falls exactly on a vertex
            of the <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/> is normalized
            to use the higher of the two possible segmentIndexes.
            </summary>
            <param name="li"></param>
            <param name="segmentIndex"></param>
            <param name="geomIndex"></param>
            <param name="intIndex"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentString.AddIntersection(GeoAPI.Geometries.ICoordinate,System.Int32)">
            <summary>
            
            </summary>
            <param name="intPt"></param>
            <param name="segmentIndex"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Noding.SegmentString.Data">
            <summary>
            Gets/Sets the user-defined data for this segment string.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Noding.SegmentString.NodeList">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Noding.SegmentString.Count">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Noding.SegmentString.Coordinates">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Noding.SegmentString.IsClosed">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Noding.Octants">
            <summary>
            Octants in the Cartesian plane.
            Octants are numbered as follows:
             <para>
              \2|1/
             3 \|/ 0
             ---+--
             4 /|\ 7
              /5|6\ 
            </para>
             If line segments lie along a coordinate axis, the octant is the lower of the two possible values.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Noding.Octants.Null">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Noding.Octants.Zero">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Noding.Octants.One">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Noding.Octants.Two">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Noding.Octants.Three">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Noding.Octants.Four">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Noding.Octants.Five">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Noding.Octants.Six">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Noding.Octants.Seven">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Noding.Octant">
            <summary>
             Methods for computing and working with <see cref="T:GisSharpBlog.NetTopologySuite.Noding.Octants"/> of the Cartesian plane.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Octant.GetOctant(System.Double,System.Double)">
            <summary>
            Returns the octant of a directed line segment (specified as x and y
            displacements, which cannot both be 0).
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Octant.GetOctant(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            Returns the octant of a directed line segment from p0 to p1.
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.LinearReferencing.ExtractLineByLocation">
            <summary>
            Extracts the subline of a linear <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/> between
            two <see cref="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation"/>s on the line.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.ExtractLineByLocation.Extract(GeoAPI.Geometries.IGeometry,GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation,GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation)">
            <summary>
            Computes the subline of a <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.LineString"/> between
            two LineStringLocations on the line.
            If the start location is after the end location,
            the computed geometry is reversed.
            </summary>
            <param name="line">The line to use as the baseline.</param>
            <param name="start">The start location.</param>
            <param name="end">The end location.</param>
            <returns>The extracted subline.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.ExtractLineByLocation.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Initializes a new instance of the <see cref="T:ExtractLineByLocation"/> class.
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.ExtractLineByLocation.Extract(GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation,GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation)">
            <summary>
            Extracts a subline of the input.
            If <paramref name="end" /> is minor that <paramref name="start" />,
            the linear geometry computed will be reversed.
            </summary>
            <param name="start">The start location.</param>
            <param name="end">The end location.</param>
            <returns>A linear geometry.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.ExtractLineByLocation.Reverse(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="linear"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.ExtractLineByLocation.ComputeLine(GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation,GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation)">
            <summary>
            Assumes input is valid 
            (e.g. <paramref name="start" /> minor or equals to <paramref name="end" />).
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.ExtractLineByLocation.ComputeLinear(GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation,GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation)">
            <summary>
            Assumes input is valid 
            (e.g. <paramref name="start" /> minor or equals to <paramref name="end" />).
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.Handlers.MultiLineHandler">
            <summary>
            Converts a Shapefile multi-line to a OGIS LineString/MultiLineString.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.MultiLineHandler.Read(GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryReader,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Reads a stream and converts the shapefile record to an equilivent geometry object.
            </summary>
            <param name="file">The stream to read.</param>
            <param name="geometryFactory">The geometry factory to use when making the object.</param>
            <returns>The Geometry object that represents the shape file record.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.MultiLineHandler.Write(GeoAPI.Geometries.IGeometry,System.IO.BinaryWriter,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Writes to the given stream the equilivent shape file record given a Geometry object.
            </summary>
            <param name="geometry">The geometry object to write.</param>
            <param name="file">The stream to write to.</param>
            <param name="geometryFactory">The geometry factory to use.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.MultiLineHandler.GetLength(GeoAPI.Geometries.IGeometry)">
            <summary>
            Gets the length in bytes the Geometry will need when written as a shape file record.
            </summary>
            <param name="geometry">The Geometry object to use.</param>
            <returns>The length in bytes the Geometry will use when represented as a shape file record.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.MultiLineHandler.GetNumParts(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.Handlers.MultiLineHandler.ShapeType">
            <summary>
            Returns the ShapeType the handler handles.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.MultiPoint">
            <summary>  
            Models a collection of <c>Point</c>s.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.MultiPoint.Empty">
            <summary>
            Represents an empty <c>MultiPoint</c>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.MultiPoint.#ctor(GeoAPI.Geometries.IPoint[],GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Constructs a <c>MultiPoint</c>.
            </summary>
            <param name="points">
            The <c>Point</c>s for this <c>MultiPoint</c>
            , or <c>null</c> or an empty array to create the empty point.
            Elements may be empty <c>Point</c>s, but not <c>null</c>s.
            </param>
            <param name="factory"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.MultiPoint.#ctor(GeoAPI.Geometries.IPoint[])">
            <summary>
            Constructs a <c>MultiPoint</c>.
            </summary>
            <param name="points">
            The <c>Point</c>s for this <c>MultiPoint</c>
            , or <c>null</c> or an empty array to create the empty point.
            Elements may be empty <c>Point</c>s, but not <c>null</c>s.
            </param>
            <remarks>
            For create this <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/> is used a standard <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory"/> 
            with <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel"/> <c> == </c> <see cref="F:GeoAPI.Geometries.PrecisionModels.Floating"/>.
            </remarks>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.MultiPoint.EqualsExact(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.MultiPoint.GetCoordinate(System.Int32)">
            <summary>
            Returns the <c>Coordinate</c> at the given position.
            </summary>
            <param name="n">The index of the <c>Coordinate</c> to retrieve, beginning at 0.
            </param>
            <returns>The <c>n</c>th <c>Coordinate</c>.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.MultiPoint.Dimension">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.MultiPoint.BoundaryDimension">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.MultiPoint.GeometryType">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.MultiPoint.Boundary">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.MultiPoint.IsSimple">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.MultiPoint.IsValid">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.DefaultCoordinateSequence">
            <summary>
            The CoordinateSequence implementation that Geometries use by default. In
            this implementation, Coordinates returned by ToArray and GetCoordinates are live --
            parties that change them are actually changing the
            DefaultCoordinateSequence's underlying data.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.DefaultCoordinateSequence.#ctor(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Constructs a DefaultCoordinateSequence based on the given array (the
            array is not copied).
            </summary>
            <param name="coordinates">Coordinate array that will be assimilated.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.DefaultCoordinateSequence.#ctor(GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            
            </summary>
            <param name="coordSeq"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.DefaultCoordinateSequence.#ctor(System.Int32)">
            <summary>
            Constructs a sequence of a given size, populated with new Coordinates.
            </summary>
            <param name="size">The size of the sequence to create.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.DefaultCoordinateSequence.GetCoordinate(System.Int32)">
            <summary>
            Returns the coordinate at specified index.
            </summary>
            <param name="i">Coordinate index.</param>
            <return>Coordinate specified.</return>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.DefaultCoordinateSequence.GetCoordinateCopy(System.Int32)">
            <summary>
            Returns a copy of the coordinate at specified index.
            </summary>
            <param name="i">Coordinate index.</param>
            <return>The copy of the coordinate specified.</return>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.DefaultCoordinateSequence.GetCoordinate(System.Int32,GeoAPI.Geometries.ICoordinate)">
            <summary>
            Copies the i'th coordinate in the sequence to the supplied Coordinate.
            Only the first two dimensions are copied.
            </summary>
            <param name="index">The index of the coordinate to copy.</param>
            <param name="coord">A Coordinate to receive the value.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.DefaultCoordinateSequence.GetX(System.Int32)">
            <summary>
            Returns ordinate X (0) of the specified coordinate.
            </summary>
            <param name="index"></param>
            <returns>
            The value of the X ordinate in the index'th coordinate.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.DefaultCoordinateSequence.GetY(System.Int32)">
            <summary>
            Returns ordinate Y (1) of the specified coordinate.
            </summary>
            <param name="index"></param>
            <returns>
            The value of the Y ordinate in the index'th coordinate.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.DefaultCoordinateSequence.GetOrdinate(System.Int32,GeoAPI.Geometries.Ordinates)">
            <summary>
            Returns the ordinate of a coordinate in this sequence.
            Ordinate indices 0 and 1 are assumed to be X and Y.
            Ordinates indices greater than 1 have user-defined semantics
            (for instance, they may contain other dimensions or measure values).
            </summary>
            <param name="index">The coordinate index in the sequence.</param>
            <param name="ordinate">The ordinate index in the coordinate (in range [0, dimension-1]).</param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.DefaultCoordinateSequence.SetOrdinate(System.Int32,GeoAPI.Geometries.Ordinates,System.Double)">
            <summary>
            Sets the value for a given ordinate of a coordinate in this sequence.
            </summary>
            <param name="index">The coordinate index in the sequence.</param>
            <param name="ordinate">The ordinate index in the coordinate (in range [0, dimension-1]).</param>
            <param name="value">The new ordinate value.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.DefaultCoordinateSequence.ExpandEnvelope(GeoAPI.Geometries.IEnvelope)">
            <summary>
            Expands the given Envelope to include the coordinates in the sequence.
            Allows implementing classes to optimize access to coordinate values.
            </summary>
            <param name="env">The envelope to expand.</param>
            <returns>A reference to the expanded envelope.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.DefaultCoordinateSequence.Clone">
            <summary>
            Returns a deep copy of the object passed.
            </summary>
            <returns>The copied object.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.DefaultCoordinateSequence.ToCoordinateArray">
            <summary>
            This method exposes the internal Array of Coordinate Objects.
            </summary>
            <returns>Coordinate[] array.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.DefaultCoordinateSequence.ToString">
            <summary>
            Returns the string Representation of the coordinate array
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.DefaultCoordinateSequence.Dimension">
            <summary>
            Returns the dimension (number of ordinates in each coordinate) for this sequence.
            </summary>
            <value></value>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.DefaultCoordinateSequence.Item(System.Int32)">
            <summary>
            Returns the coordinate at specified index.
            </summary>
            <param name="i">Coordinate index.</param>
            <return>Coordinate specified.</return>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.DefaultCoordinateSequence.Count">
            <summary>
            Returns the elements number of the coordinate sequence.
            </summary>
            <value></value>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.DefaultCoordinateSequence.Length">
            <summary>
            Returns the elements number of the coordinate sequence.
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Algorithm.InteriorPointArea">
            <summary> 
            Computes a point in the interior of an area point.
            Algorithm:
            Find the intersections between the point
            and the horizontal bisector of the area's envelope
            Pick the midpoint of the largest intersection (the intersections
            will be lines and points)
            Note: If a fixed precision model is used,
            in some cases this method may return a point
            which does not lie in the interior.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.InteriorPointArea.Avg(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.InteriorPointArea.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.InteriorPointArea.Add(GeoAPI.Geometries.IGeometry)">
            <summary> 
            Tests the interior vertices (if any)
            defined by a linear Geometry for the best inside point.
            If a Geometry is not of dimension 1 it is not tested.
            </summary>
            <param name="geom">The point to add.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.InteriorPointArea.AddPolygon(GeoAPI.Geometries.IGeometry)">
            <summary> 
            Finds a reasonable point at which to label a Geometry.
            </summary>
            <param name="geometry">The point to analyze.</param>
            <returns> 
            The midpoint of the largest intersection between the point and
            a line halfway down its envelope.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.InteriorPointArea.WidestGeometry(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <returns>
            If point is a collection, the widest sub-point; otherwise,
            the point itself.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.InteriorPointArea.WidestGeometry(GeoAPI.Geometries.IGeometryCollection)">
            <summary>
            
            </summary>
            <param name="gc"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.InteriorPointArea.HorizontalBisector(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.InteriorPointArea.Centre(GeoAPI.Geometries.IEnvelope)">
            <summary> 
            Returns the centre point of the envelope.
            </summary>
            <param name="envelope">The envelope to analyze.</param>
            <returns> The centre of the envelope.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Algorithm.InteriorPointArea.InteriorPoint">
            <summary>
            
            </summary>
        </member>
        <member name="T:Iesi_NTS.Collections.Generic.SortedSet`1">
            <summary>
            Implements a <c>Set</c> based on a sorted tree.  This gives good performance for operations on very
            large data-sets, though not as good - asymptotically - as a <c>HashedSet</c>.  However, iteration
            occurs in order.  Elements that you put into this type of collection must implement <c>IComparable</c>,
            and they must actually be comparable.  You can't mix <c>string</c> and <c>int</c> values, for example.
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.SortedSet`1.#ctor">
            <summary>
            Creates a new set instance based on a sorted tree.
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a new set instance based on a sorted tree.
            </summary>
            <param name="comparer">The <see cref="!:IComparer"/> to use for sorting.</param>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Creates a new set instance based on a sorted tree and
            initializes it based on a collection of elements.
            </summary>
            <param name="initialValues">A collection of elements that defines the initial set contents.</param>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.ICollection{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a new set instance based on a sorted tree and
            initializes it based on a collection of elements.
            </summary>
            <param name="initialValues">A collection of elements that defines the initial set contents.</param>
            <param name="comparer">The <see cref="!:IComparer"/> to use for sorting.</param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Utilities.CollectionUtil">
            <summary>
            Executes a transformation function on each element of a collection
            and returns the results in a new List.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.CollectionUtil.Transform(System.Collections.ICollection,GisSharpBlog.NetTopologySuite.Utilities.CollectionUtil.FunctionDelegate{System.Object})">
            <summary>
            Executes a function on each item in a <see cref="T:System.Collections.ICollection"/>
            and returns the results in a new <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="coll"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.CollectionUtil.Apply(System.Collections.ICollection,GisSharpBlog.NetTopologySuite.Utilities.CollectionUtil.FunctionDelegate{System.Object})">
            <summary>
            Executes a function on each item in a <see cref="T:System.Collections.ICollection"/> 
            but does not accumulate the result.
            </summary>
            <param name="coll"></param>
            <param name="func"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.CollectionUtil.Select(System.Collections.ICollection,GisSharpBlog.NetTopologySuite.Utilities.CollectionUtil.FunctionDelegate{System.Object})">
            <summary>
            Executes a function on each item in a <see cref="T:System.Collections.ICollection"/>
            and collects all the entries for which the result
            of the function is equal to <c>true</c>.
            </summary>
            <param name="coll"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Utilities.CollectionUtil.FunctionDelegate`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Simplify.TopologyPreservingSimplifier">
            <summary>
            Simplifies a point, ensuring that
            the result is a valid point having the
            same dimension and number of components as the input.
            The simplification uses a maximum distance difference algorithm
            similar to the one used in the Douglas-Peucker algorithm.
            In particular, if the input is an areal point
            ( <c>Polygon</c> or <c>MultiPolygon</c> )
            The result has the same number of shells and holes (rings) as the input,
            in the same order
            The result rings touch at no more than the number of touching point in the input
            (although they may touch at fewer points).
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.TopologyPreservingSimplifier.Simplify(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            
            </summary>
            <param name="geom"></param>
            <param name="distanceTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.TopologyPreservingSimplifier.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="inputGeom"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.TopologyPreservingSimplifier.GetResultGeometry">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Simplify.TopologyPreservingSimplifier.DistanceTolerance">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Simplify.TopologyPreservingSimplifier.LineStringTransformer">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.TopologyPreservingSimplifier.LineStringTransformer.#ctor(GisSharpBlog.NetTopologySuite.Simplify.TopologyPreservingSimplifier)">
            <summary>
            
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.TopologyPreservingSimplifier.LineStringTransformer.TransformCoordinates(GeoAPI.Geometries.ICoordinateSequence,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="coords"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Simplify.TopologyPreservingSimplifier.LineStringMapBuilderFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.TopologyPreservingSimplifier.LineStringMapBuilderFilter.#ctor(GisSharpBlog.NetTopologySuite.Simplify.TopologyPreservingSimplifier)">
            <summary>
            
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.TopologyPreservingSimplifier.LineStringMapBuilderFilter.Filter(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Polygonize.EdgeRing">
            <summary>
            Represents a ring of <c>PolygonizeDirectedEdge</c>s which form
            a ring of a polygon.  The ring may be either an outer shell or a hole.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.EdgeRing.FindEdgeRingContaining(GisSharpBlog.NetTopologySuite.Operation.Polygonize.EdgeRing,System.Collections.IList)">
            <summary>
            Find the innermost enclosing shell EdgeRing containing the argument EdgeRing, if any.
            The innermost enclosing ring is the <i>smallest</i> enclosing ring.
            The algorithm used depends on the fact that:
            ring A contains ring B iff envelope(ring A) contains envelope(ring B).
            This routine is only safe to use if the chosen point of the hole
            is known to be properly contained in a shell
            (which is guaranteed to be the case if the hole does not touch its shell).
            </summary>
            <param name="shellList"></param>
            <param name="testEr"></param>
            <returns>Containing EdgeRing, if there is one, OR
            null if no containing EdgeRing is found.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.EdgeRing.PointNotInList(GeoAPI.Geometries.ICoordinate[],GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Finds a point in a list of points which is not contained in another list of points.
            </summary>
            <param name="testPts">The <c>Coordinate</c>s to test.</param>
            <param name="pts">An array of <c>Coordinate</c>s to test the input points against.</param>
            <returns>A <c>Coordinate</c> from <c>testPts</c> which is not in <c>pts</c>, 
            or <c>null</c>.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.EdgeRing.IsInList(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Tests whether a given point is in an array of points.
            Uses a value-based test.
            </summary>
            <param name="pt">A <c>Coordinate</c> for the test point.</param>
            <param name="pts">An array of <c>Coordinate</c>s to test,</param>
            <returns><c>true</c> if the point is in the array.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.EdgeRing.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.EdgeRing.Add(GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge)">
            <summary>
            Adds a DirectedEdge which is known to form part of this ring.
            </summary>
            <param name="de">The DirectedEdge to add.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.EdgeRing.AddHole(GeoAPI.Geometries.ILinearRing)">
            <summary>
            Adds a hole to the polygon formed by this ring.
            </summary>
            <param name="hole">The LinearRing forming the hole.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.EdgeRing.AddEdge(GeoAPI.Geometries.ICoordinate[],System.Boolean,GisSharpBlog.NetTopologySuite.Geometries.CoordinateList)">
            <summary>
            
            </summary>
            <param name="coords"></param>
            <param name="isForward"></param>
            <param name="coordList"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Polygonize.EdgeRing.IsHole">
            <summary>
            Tests whether this ring is a hole.
            Due to the way the edges in the polyongization graph are linked,
            a ring is a hole if it is oriented counter-clockwise.
            </summary>
            <returns><c>true</c> if this ring is a hole.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Polygonize.EdgeRing.Polygon">
            <summary>
            Computes and returns the Polygon formed by this ring and any contained holes.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Polygonize.EdgeRing.IsValid">
            <summary>
            Tests if the LinearRing ring formed by this edge ring is topologically valid.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Polygonize.EdgeRing.Coordinates">
            <summary>
            Computes and returns the list of coordinates which are contained in this ring.
            The coordinatea are computed once only and cached.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Polygonize.EdgeRing.LineString">
            <summary>
            Gets the coordinates for this ring as a <c>LineString</c>.
            Used to return the coordinates in this ring
            as a valid point, when it has been detected that the ring is topologically
            invalid.
            </summary>        
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Polygonize.EdgeRing.Ring">
            <summary>
            Returns this ring as a LinearRing, or null if an Exception occurs while
            creating it (such as a topology problem). Details of problems are written to
            standard output.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.GeometrySnapper">
            <summary>
            Snaps the vertices and segments of a <see cref="T:GeoAPI.Geometries.IGeometry"/> to another Geometry's vertices.
            Improves robustness for overlay operations, by eliminating
            nearly parallel edges (which cause problems during noding and intersection calculation).
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.GeometrySnapper.ComputeOverlaySnapTolerance(GeoAPI.Geometries.IGeometry)">
            <summary>
            Estimates the snap tolerance for a Geometry, taking into account its precision model.
            </summary>
            <param name="g"></param>
            <returns>The estimated snap tolerance</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.GeometrySnapper.ComputeSizeBasedSnapTolerance(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.GeometrySnapper.ComputeOverlaySnapTolerance(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g0"></param>
            <param name="g1"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.GeometrySnapper.Snap(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            Snaps two geometries together with a given tolerance.
            </summary>
            <param name="g0"></param>
            <param name="g1"></param>
            <param name="snapTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.GeometrySnapper.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.GeometrySnapper.ComputeSnapTolerance(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Computes the snap tolerance based on the input geometries.
            </summary>
            <param name="ringPts"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.GeometrySnapper.ComputeMinimumSegmentLength(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            
            </summary>
            <param name="pts"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.GeometrySnapper.SnapTo(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
             Snaps the vertices in the component <see cref="T:GeoAPI.Geometries.ILineString"/>s
             of the source geometry
             to the vertices of the given geometry.
            </summary>
            <param name="g"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.GeometrySnapper.ExtractTargetCoordinates(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.SnapTransformer">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.SnapTransformer.#ctor(System.Double,GeoAPI.Geometries.ICoordinate[])">
            <summary>
            
            </summary>
            <param name="snapTolerance"></param>
            <param name="snapPts"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.SnapTransformer.TransformCoordinates(GeoAPI.Geometries.ICoordinateSequence,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="coords"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.SnapTransformer.SnapLine(GeoAPI.Geometries.ICoordinate[],GeoAPI.Geometries.ICoordinate[])">
            <summary>
            
            </summary>
            <param name="srcPts"></param>
            <param name="snapPts"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Overlay.PolygonBuilder">
            <summary>
            Forms <c>Polygon</c>s out of a graph of {DirectedEdge}s.
            The edges to use are marked as being in the result Area.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.PolygonBuilder.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            
            </summary>
            <param name="geometryFactory"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.PolygonBuilder.Add(GisSharpBlog.NetTopologySuite.GeometriesGraph.PlanarGraph)">
            <summary>
            Add a complete graph.
            The graph is assumed to contain one or more polygons,
            possibly with holes.
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.PolygonBuilder.Add(System.Collections.IList,System.Collections.IList)">
            <summary> 
            Add a set of edges and nodes, which form a graph.
            The graph is assumed to contain one or more polygons,
            possibly with holes.
            </summary>
            <param name="dirEdges"></param>
            <param name="nodes"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.PolygonBuilder.BuildMaximalEdgeRings(System.Collections.IList)">
            <summary> 
            For all DirectedEdges in result, form them into MaximalEdgeRings.
            </summary>
            <param name="dirEdges"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.PolygonBuilder.BuildMinimalEdgeRings(System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="maxEdgeRings"></param>
            <param name="shellList"></param>
            <param name="freeHoleList"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.PolygonBuilder.FindShell(System.Collections.IList)">
            <summary>
            This method takes a list of MinimalEdgeRings derived from a MaximalEdgeRing,
            and tests whether they form a Polygon.  This is the case if there is a single shell
            in the list.  In this case the shell is returned.
            The other possibility is that they are a series of connected holes, in which case
            no shell is returned.
            </summary>
            <returns>The shell EdgeRing, if there is one.</returns>
            <returns><c>null</c>, if all the rings are holes.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.PolygonBuilder.PlacePolygonHoles(GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing,System.Collections.IList)">
            <summary>
            This method assigns the holes for a Polygon (formed from a list of
            MinimalEdgeRings) to its shell.
            Determining the holes for a MinimalEdgeRing polygon serves two purposes:
            it is faster than using a point-in-polygon check later on.
            it ensures correctness, since if the PIP test was used the point
            chosen might lie on the shell, which might return an incorrect result from the
            PIP test.
            </summary>
            <param name="shell"></param>
            <param name="minEdgeRings"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.PolygonBuilder.SortShellsAndHoles(System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary> 
            For all rings in the input list,
            determine whether the ring is a shell or a hole
            and add it to the appropriate list.
            Due to the way the DirectedEdges were linked,
            a ring is a shell if it is oriented CW, a hole otherwise.
            </summary>
            <param name="edgeRings"></param>
            <param name="shellList"></param>
            <param name="freeHoleList"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.PolygonBuilder.PlaceFreeHoles(System.Collections.IList,System.Collections.IList)">
            <summary>
            This method determines finds a containing shell for all holes
            which have not yet been assigned to a shell.
            These "free" holes should
            all be properly contained in their parent shells, so it is safe to use the
            <c>findEdgeRingContaining</c> method.
            (This is the case because any holes which are NOT
            properly contained (i.e. are connected to their
            parent shell) would have formed part of a MaximalEdgeRing
            and been handled in a previous step).
            </summary>
            <param name="shellList"></param>
            <param name="freeHoleList"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.PolygonBuilder.FindEdgeRingContaining(GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing,System.Collections.IList)">
            <summary> 
            Find the innermost enclosing shell EdgeRing containing the argument EdgeRing, if any.
            The innermost enclosing ring is the <i>smallest</i> enclosing ring.
            The algorithm used depends on the fact that:
            ring A contains ring B iff envelope(ring A) contains envelope(ring B).
            This routine is only safe to use if the chosen point of the hole
            is known to be properly contained in a shell
            (which is guaranteed to be the case if the hole does not touch its shell).
            </summary>
            <param name="testEr"></param>
            <param name="shellList"></param>
            <returns>Containing EdgeRing, if there is one, OR
            null if no containing EdgeRing is found.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.PolygonBuilder.ComputePolygons(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="shellList"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.PolygonBuilder.ContainsPoint(GeoAPI.Geometries.ICoordinate)">
            <summary> 
            Checks the current set of shells (with their associated holes) to
            see if any of them contain the point.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Overlay.PolygonBuilder.Polygons">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Noding.SegmentStringDissolver">
             <summary>
             Dissolves a noded collection of <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s to produce
             a set of merged linework with unique segments.
             A custom merging strategy can be applied when two identical (up to orientation)
             strings are dissolved together.
             The default merging strategy is simply to discard the merged string.
            <para>
             A common use for this class is to merge noded edges
             while preserving topological labelling.
             </para>
             </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentStringDissolver.#ctor(GisSharpBlog.NetTopologySuite.Noding.SegmentStringDissolver.ISegmentStringMerger)">
            <summary>
            Creates a dissolver with a user-defined merge strategy.
            </summary>
            <param name="merger"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentStringDissolver.#ctor">
            <summary>
            Creates a dissolver with the default merging strategy.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentStringDissolver.Dissolve(System.Collections.ICollection)">
            <summary>
            Dissolve all <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s in the input <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <param name="segStrings"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentStringDissolver.Add(GisSharpBlog.NetTopologySuite.Noding.OrientedCoordinateArray,GisSharpBlog.NetTopologySuite.Noding.SegmentString)">
            <summary>
            
            </summary>
            <param name="oca"></param>
            <param name="segString"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentStringDissolver.Dissolve(GisSharpBlog.NetTopologySuite.Noding.SegmentString)">
            <summary>
            Dissolve the given <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>.
            </summary>
            <param name="segString"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentStringDissolver.FindMatching(GisSharpBlog.NetTopologySuite.Noding.OrientedCoordinateArray,GisSharpBlog.NetTopologySuite.Noding.SegmentString)">
            <summary>
            
            </summary>
            <param name="oca"></param>
            <param name="segString"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Noding.SegmentStringDissolver.Dissolved">
            <summary>
            Gets the collection of dissolved (i.e. unique) <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Noding.SegmentStringDissolver.ISegmentStringMerger">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentStringDissolver.ISegmentStringMerger.Merge(GisSharpBlog.NetTopologySuite.Noding.SegmentString,GisSharpBlog.NetTopologySuite.Noding.SegmentString,System.Boolean)">
            <summary>
            Updates the context data of a <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>
            when an identical (up to orientation) one is found during dissolving.
            </summary>
            <param name="mergeTarget">The segment string to update.</param>
            <param name="ssToMerge">The segment string being dissolved.</param>
            <param name="isSameOrientation">
            <c>true</c> if the strings are in the same direction,
            <c>false</c> if they are opposite.
            </param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Noding.IteratedNoder">
            <summary>
            Nodes a set of <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s completely.
            The set of <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s is fully noded;
            i.e. noding is repeated until no further intersections are detected.
            <para>
            Iterated noding using a <see cref="!:PrecisionModels.Floating"/> precision model is not guaranteed to converge,
            due to roundoff error. This problem is detected and an exception is thrown.
            Clients can choose to rerun the noding using a lower precision model.
            </para>
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Noding.IteratedNoder.MaxIterations">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.IteratedNoder.#ctor(GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Noding.IteratedNoder"/> class.
            </summary>
            <param name="pm"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.IteratedNoder.GetNodedSubstrings">
            <summary>
            Returns a <see cref="T:System.Collections.IList"/> of fully noded <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s.
            The <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s have the same context as their parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.IteratedNoder.ComputeNodes(System.Collections.IList)">
            <summary>
            Fully nodes a list of <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s, i.e. peforms noding iteratively
            until no intersections are found between segments.
            Maintains labelling of edges correctly through the noding.
            </summary>
            <param name="segStrings">A collection of SegmentStrings to be noded.</param>
            <exception cref="T:GisSharpBlog.NetTopologySuite.Geometries.TopologyException">If the iterated noding fails to converge.</exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.IteratedNoder.Node(System.Collections.IList,System.Int32[])">
            <summary>
            Node the input segment strings once
            and create the split edges between the nodes.
            </summary>
            <param name="segStrings"></param>
            <param name="numInteriorIntersections"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Noding.IteratedNoder.MaximumIterations">
            <summary>
            Gets/Sets the maximum number of noding iterations performed before
            the noding is aborted. Experience suggests that this should rarely need to be changed
            from the default. The default is <see cref="F:GisSharpBlog.NetTopologySuite.Noding.IteratedNoder.MaxIterations"/>.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.ByteOrder">
            <summary>
            Byte order
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.ByteOrder.BigEndian">
            <summary>
            BigEndian
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.ByteOrder.LittleEndian">
            <summary>
            LittleEndian
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.WKBGeometryTypes">
            <summary>
            WKB Geometry Types
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.WKBGeometryTypes.WKBPoint">
            <summary>
            Point.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.WKBGeometryTypes.WKBLineString">
            <summary>
            LineString.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.WKBGeometryTypes.WKBPolygon">
            <summary>
            Polygon.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.WKBGeometryTypes.WKBMultiPoint">
            <summary>
            MultiPoint.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.WKBGeometryTypes.WKBMultiLineString">
            <summary>
            MultiLineString.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.WKBGeometryTypes.WKBMultiPolygon">
            <summary>
            MultiPolygon.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.WKBGeometryTypes.WKBGeometryCollection">
            <summary>
            GeometryCollection.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.WKBGeometryTypes.WKBPointZ">
            <summary>
            Point with Z coordinate.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.WKBGeometryTypes.WKBLineStringZ">
            <summary>
            LineString with Z coordinate.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.WKBGeometryTypes.WKBPolygonZ">
            <summary>
            Polygon with Z coordinate.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.WKBGeometryTypes.WKBMultiPointZ">
            <summary>
            MultiPoint with Z coordinate.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.WKBGeometryTypes.WKBMultiLineStringZ">
            <summary>
            MultiLineString with Z coordinate.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.WKBGeometryTypes.WKBMultiPolygonZ">
            <summary>
            MultiPolygon with Z coordinate.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.WKBGeometryTypes.WKBGeometryCollectionZ">
            <summary>
            GeometryCollection with Z coordinate.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.WKBGeometryTypes.WKBPointM">
            <summary>
            Point with M ordinate value.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.WKBGeometryTypes.WKBLineStringM">
            <summary>
            LineString with M ordinate value.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.WKBGeometryTypes.WKBPolygonM">
            <summary>
            Polygon with M ordinate value.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.WKBGeometryTypes.WKBMultiPointM">
            <summary>
            MultiPoint with M ordinate value.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.WKBGeometryTypes.WKBMultiLineStringM">
            <summary>
            MultiLineString with M ordinate value.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.WKBGeometryTypes.WKBMultiPolygonM">
            <summary>
            MultiPolygon with M ordinate value.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.WKBGeometryTypes.WKBGeometryCollectionM">
            <summary>
            GeometryCollection with M ordinate value.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.WKBGeometryTypes.WKBPointZM">
            <summary>
            Point with Z coordinate and M ordinate value.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.WKBGeometryTypes.WKBLineStringZM">
            <summary>
            LineString with Z coordinate and M ordinate value.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.WKBGeometryTypes.WKBPolygonZM">
            <summary>
            Polygon with Z coordinate and M ordinate value.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.WKBGeometryTypes.WKBMultiPointZM">
            <summary>
            MultiPoint with Z coordinate and M ordinate value.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.WKBGeometryTypes.WKBMultiLineStringZM">
            <summary>
            MultiLineString with Z coordinate and M ordinate value.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.WKBGeometryTypes.WKBMultiPolygonZM">
            <summary>
            MultiPolygon with Z coordinate and M ordinate value.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.WKBGeometryTypes.WKBGeometryCollectionZM">
            <summary>
            GeometryCollection with Z coordinate and M ordinate value.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.Handlers.PointHandler">
            <summary>
            Converts a Shapefile point to a OGIS Point.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.PointHandler.Read(GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryReader,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Reads a stream and converts the shapefile record to an equilivent geometry object.
            </summary>
            <param name="file">The stream to read.</param>
            <param name="geometryFactory">The geometry factory to use when making the object.</param>
            <returns>The Geometry object that represents the shape file record.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.PointHandler.Write(GeoAPI.Geometries.IGeometry,System.IO.BinaryWriter,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Writes to the given stream the equilivent shape file record given a Geometry object.
            </summary>
            <param name="geometry">The geometry object to write.</param>
            <param name="file">The stream to write to.</param>
            <param name="geometryFactory">The geometry factory to use.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Handlers.PointHandler.GetLength(GeoAPI.Geometries.IGeometry)">
            <summary>
            Gets the length in bytes the Geometry will need when written as a shape file record.
            </summary>
            <param name="geometry">The Geometry object to use.</param>
            <returns>The length in bytes the Geometry will use when represented as a shape file record.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.Handlers.PointHandler.ShapeType">
            <summary>
            The shape type this handler handles (point).
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Strtree.Interval">
            <summary> 
            A contiguous portion of 1D-space. Used internally by SIRtree.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.Interval.#ctor(GisSharpBlog.NetTopologySuite.Index.Strtree.Interval)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.Interval.#ctor(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.Interval.ExpandToInclude(GisSharpBlog.NetTopologySuite.Index.Strtree.Interval)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns><c>this</c></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.Interval.Intersects(GisSharpBlog.NetTopologySuite.Index.Strtree.Interval)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.Interval.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.Interval.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Strtree.Interval.Centre">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Quadtree.Root">
            <summary>
            QuadRoot is the root of a single Quadtree.  
            It is centred at the origin,
            and does not have a defined extent.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.Root.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.Root.Insert(GeoAPI.Geometries.IEnvelope,System.Object)">
            <summary> 
            Insert an item into the quadtree this is the root of.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.Root.InsertContained(GisSharpBlog.NetTopologySuite.Index.Quadtree.Node,GeoAPI.Geometries.IEnvelope,System.Object)">
            <summary> 
            Insert an item which is known to be contained in the tree rooted at
            the given QuadNode root.  Lower levels of the tree will be created
            if necessary to hold the item.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.Root.IsSearchMatch(GeoAPI.Geometries.IEnvelope)">
            <summary>
            
            </summary>
            <param name="searchEnv"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Bintree.NodeBase">
            <summary> 
            The base class for nodes in a <c>Bintree</c>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.NodeBase.GetSubnodeIndex(GisSharpBlog.NetTopologySuite.Index.Bintree.Interval,System.Double)">
            <summary> 
            Returns the index of the subnode that wholely contains the given interval.
            If none does, returns -1.
            </summary>
            <param name="interval"></param>
            <param name="centre"></param>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Index.Bintree.NodeBase.items">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Index.Bintree.NodeBase.subnode">
            <summary>
            Subnodes are numbered as follows:
            0 | 1        
            .
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.NodeBase.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.NodeBase.Add(System.Object)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.NodeBase.AddAllItems(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.NodeBase.IsSearchMatch(GisSharpBlog.NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.NodeBase.AddAllItemsFromOverlapping(GisSharpBlog.NetTopologySuite.Index.Bintree.Interval,System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="interval"></param>
            <param name="resultItems"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Bintree.NodeBase.Items">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Bintree.NodeBase.Depth">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Bintree.NodeBase.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Bintree.NodeBase.NodeCount">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Bintree.Interval">
            <summary> 
            Represents an (1-dimensional) closed interval on the Real number line.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Interval.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Interval.#ctor(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Interval.#ctor(GisSharpBlog.NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Interval.Init(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Interval.ExpandToInclude(GisSharpBlog.NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Interval.Overlaps(GisSharpBlog.NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Interval.Overlaps(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Interval.Contains(GisSharpBlog.NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Interval.Contains(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Interval.Contains(System.Double)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Bintree.Interval.Min">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Bintree.Interval.Max">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Bintree.Interval.Width">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeList">
            <summary>
            A EdgeList is a list of Edges.  It supports locating edges
            that are pointwise equals to a target edge.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeList.index">
            <summary>
            An index of the edges, for fast lookup.
            a Quadtree is used, because this index needs to be dynamic
            (e.g. allow insertions after queries).
            An alternative would be to use an ordered set based on the values
            of the edge coordinates.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeList.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeList.Remove(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge)">
            <summary>
            Remove the selected Edge element from the list if present.
            </summary>
            <param name="e">Edge element to remove from list</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeList.Add(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge)">
            <summary> 
            Insert an edge unless it is already in the list.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeList.AddAll(System.Collections.ICollection)">
            <summary>
            
            </summary>
            <param name="edgeColl"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeList.FindEqualEdge(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge)">
            <summary>
            If there is an edge equal to e already in the list, return it.
            Otherwise return null.
            </summary>
            <param name="e"></param>
            <returns>  
            equal edge, if there is one already in the list,
            null otherwise.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeList.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeList.Get(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeList.FindEdgeIndex(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge)">
            <summary>
            If the edge e is already in the list, return its index.
            </summary>
            <param name="e"></param>
            <returns>  
            Index, if e is already in the list,
            -1 otherwise.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeList.Write(System.IO.StreamWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeList.Edges">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeList.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEndStar">
            <summary>
            A EdgeEndStar is an ordered list of EdgeEnds around a node.
            They are maintained in CCW order (starting with the positive x-axis) around the node
            for efficient lookup and topology building.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEndStar.edgeMap">
            <summary>
            A map which maintains the edges in sorted order around the node.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEndStar.edgeList">
            <summary> 
            A list of all outgoing edges in the result, in CCW order.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEndStar.ptInAreaLocation">
            <summary>
            The location of the point for this star in Geometry i Areas.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEndStar.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEndStar.Insert(GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd)">
            <summary> 
            Insert a EdgeEnd into this EdgeEndStar.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEndStar.InsertEdgeEnd(GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd,System.Object)">
            <summary> 
            Insert an EdgeEnd into the map, and clear the edgeList cache,
            since the list of edges has now changed.
            </summary>
            <param name="e"></param>
            <param name="obj"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEndStar.GetEnumerator">
            <summary>
            Iterator access to the ordered list of edges is optimized by
            copying the map collection to a list.  (This assumes that
            once an iterator is requested, it is likely that insertion into
            the map is complete).
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEndStar.GetNextCW(GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd)">
            <summary>
            
            </summary>
            <param name="ee"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEndStar.ComputeLabelling(GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph[])">
            <summary>
            
            </summary>
            <param name="geom"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEndStar.ComputeEdgeEndLabels">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEndStar.GetLocation(System.Int32,GeoAPI.Geometries.ICoordinate,GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph[])">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <param name="p"></param>
            <param name="geom"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEndStar.CheckAreaLabelsConsistent(System.Int32)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEndStar.PropagateSideLabels(System.Int32)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEndStar.FindIndex(GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd)">
            <summary>
            
            </summary>
            <param name="eSearch"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEndStar.Write(System.IO.StreamWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEndStar.Coordinate">
            <returns>
            The coordinate for the node this star is based at.
            </returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEndStar.Degree">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEndStar.Edges">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEndStar.IsAreaLabelsConsistent">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel">
            <summary> 
            Specifies the precision model of the <c>Coordinate</c>s in a <c>Geometry</c>.
            In other words, specifies the grid of allowable
            points for all <c>Geometry</c>s.
            The <c>makePrecise</c> method allows rounding a coordinate to
            a "precise" value; that is, one whose
            precision is known exactly.
            Coordinates are assumed to be precise in geometries.
            That is, the coordinates are assumed to be rounded to the
            precision model given for the point.
            NTS input routines automatically round coordinates to the precision model
            before creating Geometries.
            All internal operations
            assume that coordinates are rounded to the precision model.
            Constructive methods (such as bool operations) always round computed
            coordinates to the appropriate precision model.
            Currently three types of precision model are supported:
            <para>
            Floating: represents full double precision floating point.
            This is the default precision model used in NTS
            FloatingSingle: represents single precision floating point.
            Fixed: represents a model with a fixed number of decimal places.
            </para>
            A Fixed Precision Model is specified by a scale factor.
            The scale factor specifies the grid which numbers are rounded to.
            Input coordinates are mapped to fixed coordinates according to the following
            equations:
             jtsPt.x = round( (inputPt.x * scale ) / scale
             jtsPt.y = round( (inputPt.y * scale ) / scale
            Coordinates are represented internally as double-precision values.
            Since .NET uses the IEEE-394 floating point standard, this
            provides 53 bits of precision. (Thus the maximum precisely representable
            integer is 9,007,199,254,740,992).
            NTS methods currently do not handle inputs with different precision models.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel.MaximumPreciseValue">
            <summary>  
            The maximum precise value representable in a double. Since IEE754
            double-precision numbers allow 53 bits of mantissa, the value is equal to
            2^53 - 1.  This provides <i>almost</i> 16 decimal digits of precision.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel.modelType">
            <summary>
            The type of PrecisionModel this represents.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel.scale">
            <summary> 
            The scale factor which determines the number of decimal places in fixed precision.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel.#ctor">
            <summary> 
            Creates a <c>PrecisionModel</c> with a default precision
            of Floating.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel.#ctor(GeoAPI.Geometries.PrecisionModels)">
            <summary>
            Creates a <c>PrecisionModel</c> that specifies
            an explicit precision model type.
            If the model type is Fixed the scale factor will default to 1.
            </summary>
            <param name="modelType">
            The type of the precision model.
            </param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel.#ctor(System.Double,System.Double,System.Double)">
            <summary>  
            Creates a <c>PrecisionModel</c> that specifies Fixed precision.
            Fixed-precision coordinates are represented as precise internal coordinates,
            which are rounded to the grid defined by the scale factor.        
            </summary>
            <param name="scale">
            Amount by which to multiply a coordinate after subtracting
            the offset, to obtain a precise coordinate
            </param>
            <param name="offsetX">Not used.</param>
            <param name="offsetY">Not used.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel.#ctor(System.Double)">
            <summary>  
            Creates a <c>PrecisionModel</c> that specifies Fixed precision.
            Fixed-precision coordinates are represented as precise internal coordinates,
            which are rounded to the grid defined by the scale factor.
            </summary>
            <param name="scale">
            Amount by which to multiply a coordinate after subtracting
            the offset, to obtain a precise coordinate.
            </param>  
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel.#ctor(GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel)">
            <summary> 
            Copy constructor to create a new <c>PrecisionModel</c>
            from an existing one.
            </summary>
            <param name="pm"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel.GetHashCode">
            <summary>
            Return HashCode.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel.GetPrecisionModelType">
            <summary> 
            Gets the type of this PrecisionModel.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel.ToInternal(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>  
            Sets <c>internal</c> to the precise representation of <c>external</c>.
            </summary>
            <param name="cexternal">The original coordinate.</param>
            <param name="cinternal">
            The coordinate whose values will be changed to the
            precise representation of <c>external</c>.
            </param>        
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel.ToInternal(GeoAPI.Geometries.ICoordinate)">
            <summary>  
            Returns the precise representation of <c>external</c>.
            </summary>
            <param name="cexternal">The original coordinate.</param>
            <returns>
            The coordinate whose values will be changed to the precise
            representation of <c>external</c>
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel.ToExternal(GeoAPI.Geometries.ICoordinate)">
            <summary>
            Returns the external representation of <c>internal</c>.
            </summary>
            <param name="cinternal">The original coordinate.</param>
            <returns>
            The coordinate whose values will be changed to the
            external representation of <c>internal</c>.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel.ToExternal(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>  
            Sets <c>external</c> to the external representation of <c>internal</c>.
            </summary>
            <param name="cinternal">The original coordinate.</param>
            <param name="cexternal">
            The coordinate whose values will be changed to the
            external representation of <c>internal</c>.
            </param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel.MakePrecise(System.Double)">
            <summary> 
            Rounds a numeric value to the PrecisionModel grid.
            Symmetric Arithmetic Rounding is used, to provide
            uniform rounding behaviour no matter where the number is
            on the number line.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel.MakePrecise(GeoAPI.Geometries.ICoordinate)">
            <summary> 
            Rounds a Coordinate to the PrecisionModel grid.
            </summary>
            <param name="coord"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel.Equals(GeoAPI.Geometries.IPrecisionModel)">
            <summary>
            
            </summary>
            <param name="otherPrecisionModel"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel.op_Equality(GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel,GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel)">
            <summary>
            
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel.op_Inequality(GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel,GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel)">
            <summary>
            
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel.CompareTo(System.Object)">
            <summary> 
            Compares this <c>PrecisionModel</c> object with the specified object for order.
            A PrecisionModel is greater than another if it provides greater precision.
            The comparison is based on the value returned by the
            {getMaximumSignificantDigits) method.
            This comparison is not strictly accurate when comparing floating precision models
            to fixed models; however, it is correct when both models are either floating or fixed.
            </summary>
            <param name="o">
            The <c>PrecisionModel</c> with which this <c>PrecisionModel</c>
            is being compared.
            </param>
            <returns>
            A negative integer, zero, or a positive integer as this <c>PrecisionModel</c>
            is less than, equal to, or greater than the specified <c>PrecisionModel</c>.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel.CompareTo(GeoAPI.Geometries.IPrecisionModel)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel.IsFloating">
            <summary> 
            Tests whether the precision model supports floating point.
            </summary>
            <returns><c>true</c> if the precision model supports floating point.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel.MaximumSignificantDigits">
            <summary>
            Returns the maximum number of significant digits provided by this
            precision model.
            Intended for use by routines which need to print out precise values.
            </summary>
            <returns>
            The maximum number of decimal places provided by this precision model.
            </returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel.Scale">
            <summary>
            Returns the multiplying factor used to obtain a precise coordinate.
            This method is private because PrecisionModel is intended to
            be an immutable (value) type.
            </summary>
            <returns>    
            the amount by which to multiply a coordinate after subtracting
            the offset.
            </returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel.PrecisionModelType">
            <summary> 
            Gets the type of this PrecisionModel.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel.OffsetX">
            <summary> 
            Returns the x-offset used to obtain a precise coordinate.
            </summary>
            <returns>
            The amount by which to subtract the x-coordinate before
            multiplying by the scale.
            </returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel.OffsetY">
            <summary> 
            Returns the y-offset used to obtain a precise coordinate.
            </summary>
            <returns> 
            The amount by which to subtract the y-coordinate before
            multiplying by the scale
            </returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory">
            <summary>
            Supplies a set of utility methods for building Geometry objects 
            from lists of Coordinates.
            </summary>            
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.Default">
            <summary>
            A predefined <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory"/> with <see cref="P:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.PrecisionModel"/> 
            <c> == </c> <see cref="F:GeoAPI.Geometries.PrecisionModels.Floating"/>.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.Floating">
            <summary>
            A predefined <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory"/> with <see cref="P:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.PrecisionModel"/> 
            <c> == </c> <see cref="F:GeoAPI.Geometries.PrecisionModels.Floating"/>.
            </summary>
            <remarks>A shortcut for <see cref="F:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.Default"/>.</remarks>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.FloatingSingle">
            <summary>
            A predefined <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory"/> with <see cref="P:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.PrecisionModel"/> 
            <c> == </c> <see cref="F:GeoAPI.Geometries.PrecisionModels.FloatingSingle"/>.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.Fixed">
            <summary>
            A predefined <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory"/> with <see cref="P:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.PrecisionModel"/> 
            <c> == </c> <see cref="F:GeoAPI.Geometries.PrecisionModels.Fixed"/>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.CreatePointFromInternalCoord(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="coord"></param>
            <param name="exemplar"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.#ctor(GeoAPI.Geometries.IPrecisionModel,System.Int32,GeoAPI.Geometries.ICoordinateSequenceFactory)">
            <summary>
            Constructs a GeometryFactory that generates Geometries having the given
            PrecisionModel, spatial-reference ID, and CoordinateSequence implementation.
            </summary>        
            <param name="precisionModel"></param>
            <param name="SRID"></param>
            <param name="coordinateSequenceFactory"></param>       
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.#ctor(GeoAPI.Geometries.ICoordinateSequenceFactory)">
            <summary>
            Constructs a GeometryFactory that generates Geometries having the given
            CoordinateSequence implementation, a double-precision floating PrecisionModel and a
            spatial-reference ID of 0.
            </summary>
            <param name="coordinateSequenceFactory"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.#ctor(GeoAPI.Geometries.IPrecisionModel)">
            <summary>
            Constructs a GeometryFactory that generates Geometries having the given
            {PrecisionModel} and the default CoordinateSequence
            implementation.
            </summary>
            <param name="precisionModel">The PrecisionModel to use.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.#ctor(GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel,System.Int32)">
            <summary>
            Constructs a GeometryFactory that generates Geometries having the given
            <c>PrecisionModel</c> and spatial-reference ID, and the default CoordinateSequence
            implementation.
            </summary>
            <param name="precisionModel">The PrecisionModel to use.</param>
            <param name="SRID">The SRID to use.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.#ctor">
            <summary>
            Constructs a GeometryFactory that generates Geometries having a floating
            PrecisionModel and a spatial-reference ID of 0.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.ToPointArray(System.Collections.ICollection)">
            <summary>
            Converts the <c>ICollection</c> to an array.
            </summary>
            <param name="points">The <c>ICollection</c> of Points to convert.</param>
            <returns>The <c>ICollection</c> in array format.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.ToGeometryArray(System.Collections.ICollection)">
            <summary>
            Converts the <c>ICollection</c> to an array.
            </summary>
            <param name="geometries">The <c>ICollection</c> of <c>Geometry</c>'s to convert.</param>
            <returns>The <c>ICollection</c> in array format.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.ToLineStringArray(System.Collections.ICollection)">
            <summary>
            Converts the <c>ICollection</c> to an array.
            </summary>
            <param name="lineStrings">The <c>ICollection</c> of LineStrings to convert.</param>
            <returns>The <c>ICollection</c> in array format.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.ToLinearRingArray(System.Collections.ICollection)">
            <summary>
            Converts the <c>ICollection</c> to an array.
            </summary>
            <param name="linearRings">The <c>ICollection</c> of LinearRings to convert.</param>
            <returns>The <c>ICollection</c> in array format.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.ToPolygonArray(System.Collections.ICollection)">
            <summary>
            Converts the <c>ICollection</c> to an array.
            </summary>
            <param name="polygons">The <c>ICollection</c> of Polygons to convert.</param>
            <returns>The <c>ICollection</c> in array format.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.ToMultiPointArray(System.Collections.ICollection)">
            <summary>
            Converts the <c>ICollection</c> to an array.
            </summary>
            <param name="multiPoints">The <c>ICollection</c> of MultiPoints to convert.</param>
            <returns>The <c>ICollection</c> in array format.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.ToMultiLineStringArray(System.Collections.ICollection)">
            <summary>
            Converts the <c>ICollection</c> to an array.
            </summary>
            <param name="multiLineStrings">The <c>ICollection</c> of MultiLineStrings to convert.</param>
            <returns>The <c>ICollection</c> in array format.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.ToMultiPolygonArray(System.Collections.ICollection)">
            <summary>
            Converts the <c>ICollection</c> to an array.
            </summary>
            <param name="multiPolygons">The <c>ICollection</c> of MultiPolygons to convert.</param>
            <returns>The <c>ICollection</c> in array format.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.ToGeometry(GeoAPI.Geometries.IEnvelope)">
            <summary>
            If the <c>Envelope</c> is a null <c>Envelope</c>, returns an
            empty <c>Point</c>. If the <c>Envelope</c> is a point, returns
            a non-empty <c>Point</c>. If the <c>Envelope</c> is a
            rectangle, returns a <c>Polygon</c> whose points are (minx, miny),
            (maxx, miny), (maxx, maxy), (minx, maxy), (minx, miny).
            </summary>
            <param name="envelope">The <c>Envelope</c> to convert to a <c>Geometry</c>.</param>       
            <returns>
            An empty <c>Point</c> (for null <c>Envelope</c>
            s), a <c>Point</c> (when min x = max x and min y = max y) or a
            <c>Polygon</c> (in all other cases)
            throws a <c>TopologyException</c> if <c>coordinates</c>
            is not a closed linestring, that is, if the first and last coordinates
            are not equal.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.CreatePoint(GeoAPI.Geometries.ICoordinate)">
            <summary>
            Creates a Point using the given Coordinate; a null Coordinate will create
            an empty Geometry.
            </summary>
            <param name="coordinate"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.CreatePoint(GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Creates a <c>Point</c> using the given <c>CoordinateSequence</c>; a null or empty
            CoordinateSequence will create an empty Point.
            </summary>
            <param name="coordinates"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.CreateLineString(GeoAPI.Geometries.ICoordinate[])">
            <summary> 
            Creates a LineString using the given Coordinates; a null or empty array will
            create an empty LineString. Consecutive points must not be equal.
            </summary>
            <param name="coordinates">An array without null elements, or an empty array, or null.</param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.CreateLineString(GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Creates a LineString using the given CoordinateSequence; a null or empty CoordinateSequence will
            create an empty LineString. Consecutive points must not be equal.
            </summary>
            <param name="coordinates">A CoordinateSequence possibly empty, or null.</param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.CreateLinearRing(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Creates a <c>LinearRing</c> using the given <c>Coordinates</c>; a null or empty array will
            create an empty LinearRing. The points must form a closed and simple
            linestring. Consecutive points must not be equal.
            </summary>
            <param name="coordinates">An array without null elements, or an empty array, or null.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.CreateLinearRing(GeoAPI.Geometries.ICoordinateSequence)">
            <summary> 
            Creates a <c>LinearRing</c> using the given <c>CoordinateSequence</c>; a null or empty CoordinateSequence will
            create an empty LinearRing. The points must form a closed and simple
            linestring. Consecutive points must not be equal.
            </summary>
            <param name="coordinates">A CoordinateSequence possibly empty, or null.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.CreatePolygon(GeoAPI.Geometries.ILinearRing,GeoAPI.Geometries.ILinearRing[])">
            <summary> 
            Constructs a <c>Polygon</c> with the given exterior boundary and
            interior boundaries.
            </summary>
            <param name="shell">
            The outer boundary of the new <c>Polygon</c>, or
            <c>null</c> or an empty <c>LinearRing</c> if
            the empty point is to be created.
            </param>
            <param name="holes">
            The inner boundaries of the new <c>Polygon</c>, or
            <c>null</c> or empty <c>LinearRing</c> s if
            the empty point is to be created.        
            </param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.CreateMultiPoint(GeoAPI.Geometries.IPoint[])">
            <summary> 
            Creates a MultiPoint using the given Points; a null or empty array will
            create an empty MultiPoint.
            </summary>
            <param name="point">An array without null elements, or an empty array, or null.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.CreateMultiPoint(GeoAPI.Geometries.ICoordinate[])">
            <summary> 
            Creates a MultiPoint using the given Coordinates; a null or empty array will create an empty MultiPoint.
            </summary>
            <param name="coordinates">An array without null elements, or an empty array, or null.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.CreateMultiPoint(GeoAPI.Geometries.ICoordinateSequence)">
            <summary> 
            Creates a MultiPoint using the given CoordinateSequence; a null or empty CoordinateSequence will
            create an empty MultiPoint.
            </summary>
            <param name="coordinates">A CoordinateSequence possibly empty, or null.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.CreateMultiLineString(GeoAPI.Geometries.ILineString[])">
            <summary>
            Creates a <c>MultiLineString</c> using the given <c>LineStrings</c>; a null or empty
            array will create an empty MultiLineString.
            </summary>
            <param name="lineStrings">LineStrings, each of which may be empty but not null-</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.CreateMultiPolygon(GeoAPI.Geometries.IPolygon[])">
            <summary>
            Creates a <c>MultiPolygon</c> using the given <c>Polygons</c>; a null or empty array
            will create an empty Polygon. The polygons must conform to the
            assertions specified in the <see href="http://www.opengis.org/techno/specs.htm"/> OpenGIS Simple Features
            Specification for SQL.
            </summary>
            <param name="polygons">Polygons, each of which may be empty but not null.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.CreateGeometryCollection(GeoAPI.Geometries.IGeometry[])">
            <summary>
            Creates a <c>GeometryCollection</c> using the given <c>Geometries</c>; a null or empty
            array will create an empty GeometryCollection.
            </summary>
            <param name="geometries">Geometries, each of which may be empty but not null.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.BuildGeometry(System.Collections.ICollection)">
            <summary>  
            Build an appropriate <c>Geometry</c>, <c>MultiGeometry</c>, or
            <c>GeometryCollection</c> to contain the <c>Geometry</c>s in
            it.
            <example>
             If <c>geomList</c> contains a single <c>Polygon</c>,
            the <c>Polygon</c> is returned.
             If <c>geomList</c> contains several <c>Polygon</c>s, a
            <c>MultiPolygon</c> is returned.
             If <c>geomList</c> contains some <c>Polygon</c>s and
            some <c>LineString</c>s, a <c>GeometryCollection</c> is
            returned.
             If <c>geomList</c> is empty, an empty <c>GeometryCollection</c>
            is returned.
            Note that this method does not "flatten" Geometries in the input, and hence if
            any MultiGeometries are contained in the input a GeometryCollection containing
            them will be returned.
            </example>
            </summary>
            <param name="geomList">The <c>Geometry</c> to combine.</param>
            <returns>
            A <c>Geometry</c> of the "smallest", "most type-specific" 
            class that can contain the elements of <c>geomList</c>.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.CreateGeometry(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <returns>
            A clone of g based on a CoordinateSequence created by this
            GeometryFactory's CoordinateSequenceFactory.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.GetDefaultCoordinateSequenceFactory">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.PrecisionModel">
            <summary>
            Returns the PrecisionModel that Geometries created by this factory
            will be associated with.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.CoordinateSequenceFactory">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.SRID">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory.AnonymousCoordinateOperationImpl">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Utilities.BitConverter">
            <summary>
            A supoort class: the purpose is to integrate System.BitConverter methods not presents in .NET Compact Framework.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.BitConverter.DoubleToInt64Bits(System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.BitConverter.Int64BitsToDouble(System.Int64)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Planargraph.Subgraph">
            <summary>
            A subgraph of a <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.PlanarGraph"/>.
            A subgraph may contain any subset of <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.Edge"/>s
            from the parent graph.
            It will also automatically contain all <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge"/>s
            and <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.Node"/>s associated with those edges.
            No new objects are created when edges are added -
            all associated components must already exist in the parent graph.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Planargraph.Subgraph.parentGraph">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Planargraph.Subgraph.edges">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Planargraph.Subgraph.dirEdges">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Planargraph.Subgraph.nodeMap">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.Subgraph.#ctor(GisSharpBlog.NetTopologySuite.Planargraph.PlanarGraph)">
            <summary>
            Creates a new subgraph of the given <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.PlanarGraph"/>.
            </summary>
            <param name="parentGraph"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.Subgraph.GetParent">
            <summary>
             Gets the <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.PlanarGraph"/> which this subgraph is part of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.Subgraph.Add(GisSharpBlog.NetTopologySuite.Planargraph.Edge)">
            <summary>
            Adds an <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.Edge"/> to the subgraph.
            The associated <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge"/>s and <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.Node"/>s are also added.
            </summary>
            <param name="e">The <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.Edge"/> to add.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.Subgraph.GetDirEdgeEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> over the <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge"/>s in this graph,
            in the order in which they were added.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.Subgraph.GetEdgeEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> over the <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.Edge"/>s in this graph,
            in the order in which they were added.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.Subgraph.GetNodeEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> over the <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.Node"/>s in this graph.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.Subgraph.Contains(GisSharpBlog.NetTopologySuite.Planargraph.Edge)">
            <summary>
            Tests whether an <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.Edge"/> is contained in this subgraph.
            </summary>
            <param name="e">The <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.Edge"/> to test.</param>
            <returns><c>true</c> if the <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.Edge"/> is contained in this subgraph.</returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Valid.SweeplineNestedRingTester">
            <summary>
            Tests whether any of a set of <c>LinearRing</c>s are
            nested inside another ring in the set, using a <c>SweepLineIndex</c>
            index to speed up the comparisons.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.SweeplineNestedRingTester.#ctor(GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.SweeplineNestedRingTester.Add(GeoAPI.Geometries.ILinearRing)">
            <summary>
            
            </summary>
            <param name="ring"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.SweeplineNestedRingTester.IsNonNested">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.SweeplineNestedRingTester.BuildIndex">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.SweeplineNestedRingTester.IsInside(GeoAPI.Geometries.ILinearRing,GeoAPI.Geometries.ILinearRing)">
            <summary>
            
            </summary>
            <param name="innerRing"></param>
            <param name="searchRing"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Valid.SweeplineNestedRingTester.NestedPoint">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Valid.SweeplineNestedRingTester.OverlapAction">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Sweepline.ISweepLineOverlapAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Sweepline.ISweepLineOverlapAction.Overlap(GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineInterval,GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineInterval)">
            <summary>
            
            </summary>
            <param name="s0"></param>
            <param name="s1"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.SweeplineNestedRingTester.OverlapAction.#ctor(GisSharpBlog.NetTopologySuite.Operation.Valid.SweeplineNestedRingTester)">
            <summary>
            
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.SweeplineNestedRingTester.OverlapAction.Overlap(GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineInterval,GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineInterval)">
            <summary>
            
            </summary>
            <param name="s0"></param>
            <param name="s1"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Valid.SweeplineNestedRingTester.OverlapAction.IsNonNested">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateNode">
            <summary>
            A RelateNode is a Node that maintains a list of EdgeStubs
            for the edges that are incident on it.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.Node">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.GeometriesGraph.Node.coord">
            <summary>
            Only non-null if this node is precise.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.GeometriesGraph.Node.edges">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Node.#ctor(GeoAPI.Geometries.ICoordinate,GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEndStar)">
            <summary>
            
            </summary>
            <param name="coord"></param>
            <param name="edges"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Node.ComputeIM(GeoAPI.Geometries.IntersectionMatrix)">
            <summary>
            Basic nodes do not compute IMs.
            </summary>
            <param name="im"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Node.Add(GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd)">
            <summary> 
            Add the edge to the list of edges at this node.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Node.MergeLabel(GisSharpBlog.NetTopologySuite.GeometriesGraph.Node)">
            <summary>
            
            </summary>
            <param name="n"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Node.MergeLabel(GisSharpBlog.NetTopologySuite.GeometriesGraph.Label)">
            <summary>
            To merge labels for two nodes,
            the merged location for each LabelElement is computed.
            The location for the corresponding node LabelElement is set to the result,
            as long as the location is non-null.
            </summary>
            <param name="label2"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Node.SetLabel(System.Int32,GeoAPI.Geometries.Locations)">
            <summary>
            
            </summary>
            <param name="argIndex"></param>
            <param name="onLocation"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Node.SetLabelBoundary(System.Int32)">
            <summary> 
            Updates the label of a node to BOUNDARY,
            obeying the mod-2 boundaryDetermination rule.
            </summary>
            <param name="argIndex"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Node.ComputeMergedLocation(GisSharpBlog.NetTopologySuite.GeometriesGraph.Label,System.Int32)">
            <summary> 
            The location for a given eltIndex for a node will be one
            of { Null, Interior, Boundary }.
            A node may be on both the boundary and the interior of a point;
            in this case, the rule is that the node is considered to be in the boundary.
            The merged location is the maximum of the two input values.
            </summary>
            <param name="label2"></param>
            <param name="eltIndex"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Node.Write(System.IO.TextWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Node.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Node.Coordinate">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Node.Edges">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Node.IsIsolated">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateNode.#ctor(GeoAPI.Geometries.ICoordinate,GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEndStar)">
            <summary>
            
            </summary>
            <param name="coord"></param>
            <param name="edges"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateNode.ComputeIM(GeoAPI.Geometries.IntersectionMatrix)">
            <summary>
            Update the IM with the contribution for this component.
            A component only contributes if it has a labelling for both parent geometries.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateNode.UpdateIMFromEdges(GeoAPI.Geometries.IntersectionMatrix)">
            <summary>
            Update the IM with the contribution for the EdgeEnds incident on this node.
            </summary>
            <param name="im"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineMergeEdge">
            <summary>
            An edge of a <c>LineMergeGraph</c>. The <c>marked</c> field indicates
            whether this Edge has been logically deleted from the graph.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Planargraph.Edge">
            <summary>
            Represents an undirected edge of a {PlanarGraph}. An undirected edge
            in fact simply acts as a central point of reference for two opposite
            <c>DirectedEdge</c>s.
            Usually a client using a <c>PlanarGraph</c> will subclass <c>Edge</c>
            to add its own application-specific data and methods.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Planargraph.Edge.dirEdge">
            <summary>
            The two DirectedEdges associated with this Edge. 
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.Edge.#ctor">
            <summary>
            Constructs an Edge whose DirectedEdges are not yet set. Be sure to call
            <c>SetDirectedEdges(DirectedEdge, DirectedEdge)</c>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.Edge.#ctor(GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge,GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge)">
            <summary>
            Constructs an Edge initialized with the given DirectedEdges, and for each
            DirectedEdge: sets the Edge, sets the symmetric DirectedEdge, and adds
            this Edge to its from-Node.
            </summary>
            <param name="de0"></param>
            <param name="de1"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.Edge.SetDirectedEdges(GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge,GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge)">
            <summary>
            Initializes this Edge's two DirectedEdges, and for each DirectedEdge: sets the
            Edge, sets the symmetric DirectedEdge, and adds this Edge to its from-Node.
            </summary>
            <param name="de0"></param>
            <param name="de1"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.Edge.GetDirEdge(System.Int32)">
            <summary> 
            Returns one of the DirectedEdges associated with this Edge.
            </summary>
            <param name="i">0 or 1.</param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.Edge.GetDirEdge(GisSharpBlog.NetTopologySuite.Planargraph.Node)">
            <summary>
            Returns the DirectedEdge that starts from the given node, or null if the
            node is not one of the two nodes associated with this Edge.
            </summary>
            <param name="fromNode"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.Edge.GetOppositeNode(GisSharpBlog.NetTopologySuite.Planargraph.Node)">
            <summary> 
            If <c>node</c> is one of the two nodes associated with this Edge,
            returns the other node; otherwise returns null.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.Edge.Remove">
            <summary>
            Removes this edge from its containing graph.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Planargraph.Edge.IsRemoved">
            <summary>
            Tests whether this component has been removed from its containing graph.
            </summary>
            <value></value>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineMergeEdge.#ctor(GeoAPI.Geometries.ILineString)">
            <summary>
            Constructs a LineMergeEdge with vertices given by the specified LineString.
            </summary>
            <param name="line"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineMergeEdge.Line">
            <summary>
            Returns the LineString specifying the vertices of this edge.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Noding.OrientedCoordinateArray">
            <summary>
             Allows comparing <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/> arrays in an orientation-independent way.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.OrientedCoordinateArray.#ctor(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Creates a new <see cref="T:GisSharpBlog.NetTopologySuite.Noding.OrientedCoordinateArray"/>}
            for the given <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/> array.
            </summary>
            <param name="pts"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.OrientedCoordinateArray.Orientation(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Computes the canonical orientation for a coordinate array.
            </summary>
            <param name="pts"></param>
            <returns>
            <c>true</c> if the points are oriented forwards, or
            <c>false</c>if the points are oriented in reverse.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.OrientedCoordinateArray.CompareTo(System.Object)">
            <summary>
            Compares two <see cref="T:GisSharpBlog.NetTopologySuite.Noding.OrientedCoordinateArray"/>s for their relative order.
            </summary>
            <param name="o1"></param>
            <returns>
            -1 this one is smaller, or
             0 the two objects are equal, or
             1 this one is greater.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.OrientedCoordinateArray.CompareOriented(GeoAPI.Geometries.ICoordinate[],System.Boolean,GeoAPI.Geometries.ICoordinate[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="pts1"></param>
            <param name="orientation1"></param>
            <param name="pts2"></param>
            <param name="orientation2"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.BEBinaryReader">
            <summary>
            Extends the <see cref="T:System.IO.BinaryReader"/> class to allow reading values in the BigEndian format.    
            </summary>
            <remarks>
            While <see cref="T:GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryReader"/> extends <see cref="T:System.IO.BinaryReader"/> 
            adding methods for reading integer values (<see cref="M:GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryReader.ReadInt32BE"/>)
            and double values (<see cref="M:GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryReader.ReadDoubleBE"/>) in the BigEndian format, 
            this implementation overrides methods, such <see cref="M:System.IO.BinaryReader.ReadInt32"/> 
            and <see cref="M:System.IO.BinaryReader.ReadDouble"/> and more, 
            for reading <see cref="T:ByteOrder.BigEndian"/> values in the BigEndian format.
            </remarks>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BEBinaryReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:BEBinaryReader"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BEBinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:BEBinaryReader"/> class.
            </summary>
            <param name="input">The supplied stream.</param>
            <param name="encoding">The character encoding.</param>
            <exception cref="T:System.ArgumentNullException">encoding is null. </exception>
            <exception cref="T:System.ArgumentException">The stream does not support reading, the stream is null, or the stream is already closed. </exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BEBinaryReader.ReadInt16">
            <summary>
            Reads a 2-byte signed integer from the current stream using big endian encoding
            and advances the current position of the stream by two bytes.
            </summary>
            <returns>
            A 2-byte signed integer read from the current stream.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BEBinaryReader.ReadUInt16">
            <summary>
            Reads a 2-byte unsigned integer from the current stream using big endian encoding 
            and advances the position of the stream by two bytes.
            </summary>
            <returns>
            A 2-byte unsigned integer read from this stream.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BEBinaryReader.ReadInt32">
            <summary>
            Reads a 4-byte signed integer from the current stream using big endian encoding
            and advances the current position of the stream by four bytes.
            </summary>
            <returns>
            A 4-byte signed integer read from the current stream.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BEBinaryReader.ReadUInt32">
            <summary>
            Reads a 4-byte unsigned integer from the current stream using big endian encoding
            and advances the position of the stream by four bytes.
            </summary>
            <returns>
            A 4-byte unsigned integer read from this stream.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BEBinaryReader.ReadInt64">
            <summary>
            Reads an 8-byte signed integer from the current stream using big endian encoding
            and advances the current position of the stream by eight bytes.
            </summary>
            <returns>
            An 8-byte signed integer read from the current stream.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BEBinaryReader.ReadUInt64">
            <summary>
            Reads an 8-byte unsigned integer from the current stream using big endian encoding 
            and advances the position of the stream by eight bytes.
            </summary>
            <returns>
            An 8-byte unsigned integer read from this stream.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BEBinaryReader.ReadSingle">
            <summary>
            Reads a 4-byte floating point value from the current stream using big endian encoding
            and advances the current position of the stream by four bytes.
            </summary>
            <returns>
            A 4-byte floating point value read from the current stream.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BEBinaryReader.ReadDouble">
            <summary>
            Reads an 8-byte floating point value from the current stream using big endian encoding
            and advances the current position of the stream by eight bytes.
            </summary>
            <returns>
            An 8-byte floating point value read from the current stream.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BEBinaryReader.ReadString">
            <summary>
            Reads a string from the current stream. 
            The string is prefixed with the length, encoded as an integer seven bits at a time.
            </summary>
            <returns>The string being read.</returns>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BEBinaryReader.ReadDecimal">
            <summary>
            Reads a decimal value from the current stream 
            and advances the current position of the stream by sixteen bytes.
            </summary>
            <returns>
            A decimal value read from the current stream.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractSTRtree">
            <summary>
            Base class for STRtree and SIRtree. STR-packed R-trees are described in:
            P. Rigaux, Michel Scholl and Agnes Voisard. Spatial Databases With
            Application To GIS. Morgan Kaufmann, San Francisco, 2002.
            <para>
            This implementation is based on Boundables rather than just AbstractNodes,
            because the STR algorithm operates on both nodes and
            data, both of which are treated here as Boundables.
            </para>
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractSTRtree.root">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractSTRtree.#ctor(System.Int32)">
            <summary> 
            Constructs an AbstractSTRtree with the specified maximum number of child
            nodes that a node may have.
            </summary>
            <param name="nodeCapacity"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractSTRtree.Build">
            <summary> 
            Creates parent nodes, grandparent nodes, and so forth up to the root
            node, for the data that has been inserted into the tree. Can only be
            called once, and thus can be called only after all of the data has been
            inserted into the tree.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractSTRtree.CreateNode(System.Int32)">
            <summary>
            
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractSTRtree.CreateParentBoundables(System.Collections.IList,System.Int32)">
            <summary>
            Sorts the childBoundables then divides them into groups of size M, where
            M is the node capacity.
            </summary>
            <param name="childBoundables"></param>
            <param name="newLevel"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractSTRtree.LastNode(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="nodes"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractSTRtree.CompareDoubles(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractSTRtree.CreateHigherLevels(System.Collections.IList,System.Int32)">
            <summary>
            Creates the levels higher than the given level.
            </summary>
            <param name="boundablesOfALevel">The level to build on.</param>
            <param name="level">the level of the Boundables, or -1 if the boundables are item
            boundables (that is, below level 0).</param>
            <returns>The root, which may be a ParentNode or a LeafNode.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractSTRtree.GetSize(GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractNode)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractSTRtree.GetDepth(GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractNode)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractSTRtree.Insert(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="bounds"></param>
            <param name="item"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractSTRtree.Query(System.Object)">
            <summary>
            Also builds the tree, if necessary.
            </summary>
            <param name="searchBounds"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractSTRtree.Query(System.Object,GisSharpBlog.NetTopologySuite.Index.IItemVisitor)">
            <summary>
            Also builds the tree, if necessary.
            </summary>
            <param name="searchBounds"></param>
            <param name="visitor"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractSTRtree.Query(System.Object,GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractNode,System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="searchBounds"></param>
            <param name="node"></param>
            <param name="matches"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractSTRtree.Query(System.Object,GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractNode,GisSharpBlog.NetTopologySuite.Index.IItemVisitor)">
            <summary>
            
            </summary>
            <param name="searchBounds"></param>
            <param name="node"></param>
            <param name="visitor"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractSTRtree.Remove(System.Object,System.Object)">
            <summary>
            Also builds the tree, if necessary.
            </summary>
            <param name="searchBounds"></param>
            <param name="item"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractSTRtree.RemoveItem(GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractNode,System.Object)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractSTRtree.Remove(System.Object,GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractNode,System.Object)">
            <summary>
            
            </summary>
            <param name="searchBounds"></param>
            <param name="node"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractSTRtree.BoundablesAtLevel(System.Int32)">
            <summary>
            
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractSTRtree.BoundablesAtLevel(System.Int32,GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractNode,System.Collections.IList@)">
            <summary>
            
            </summary>
            <param name="level">-1 to get items.</param>
            <param name="top"></param>
            <param name="boundables"></param>      
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractSTRtree.GetComparer">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractSTRtree.Root">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractSTRtree.NodeCapacity">
            <summary> 
            Returns the maximum number of child nodes that a node may have.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractSTRtree.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractSTRtree.Depth">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractSTRtree.IntersectsOp">
            <returns>
            A test for intersection between two bounds, necessary because subclasses
            of AbstractSTRtree have different implementations of bounds.
            </returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractSTRtree.IIntersectsOp">
            <returns>
            A test for intersection between two bounds, necessary because subclasses
            of AbstractSTRtree have different implementations of bounds.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.AbstractSTRtree.IIntersectsOp.Intersects(System.Object,System.Object)">
            <summary>
            For STRtrees, the bounds will be Envelopes; 
            for SIRtrees, Intervals;
            for other subclasses of AbstractSTRtree, some other class.
            </summary>
            <param name="aBounds">The bounds of one spatial object.</param>
            <param name="bBounds">The bounds of another spatial object.</param>                        
            <returns>Whether the two bounds intersect.</returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Quadtree.Node">
            <summary>
            Represents a node of a <c>Quadtree</c>.  Nodes contain
            items which have a spatial extent corresponding to the node's position
            in the quadtree.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.Node.CreateNode(GeoAPI.Geometries.IEnvelope)">
            <summary>
            
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.Node.CreateExpanded(GisSharpBlog.NetTopologySuite.Index.Quadtree.Node,GeoAPI.Geometries.IEnvelope)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="addEnv"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.Node.#ctor(GeoAPI.Geometries.IEnvelope,System.Int32)">
            <summary>
            
            </summary>
            <param name="env"></param>
            <param name="level"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.Node.IsSearchMatch(GeoAPI.Geometries.IEnvelope)">
            <summary>
            
            </summary>
            <param name="searchEnv"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.Node.GetNode(GeoAPI.Geometries.IEnvelope)">
            <summary> 
            Returns the subquad containing the envelope.
            Creates the subquad if
            it does not already exist.
            </summary>
            <param name="searchEnv"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.Node.Find(GeoAPI.Geometries.IEnvelope)">
            <summary>
            Returns the smallest <i>existing</i>
            node containing the envelope.
            </summary>
            <param name="searchEnv"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.Node.InsertNode(GisSharpBlog.NetTopologySuite.Index.Quadtree.Node)">
            <summary>
            
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.Node.GetSubnode(System.Int32)">
            <summary>
            Get the subquad for the index.
            If it doesn't exist, create it.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.Node.CreateSubnode(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Quadtree.Node.Envelope">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Quadtree.Key">
            <summary> 
            A Key is a unique identifier for a node in a quadtree.
            It contains a lower-left point and a level number. The level number
            is the power of two for the size of the node envelope.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.Key.ComputeQuadLevel(GeoAPI.Geometries.IEnvelope)">
            <summary>
            
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.Key.#ctor(GeoAPI.Geometries.IEnvelope)">
            <summary>
            
            </summary>
            <param name="itemEnv"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.Key.ComputeKey(GeoAPI.Geometries.IEnvelope)">
            <summary>
            Return a square envelope containing the argument envelope,
            whose extent is a power of two and which is based at a power of 2.
            </summary>
            <param name="itemEnv"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.Key.ComputeKey(System.Int32,GeoAPI.Geometries.IEnvelope)">
            <summary>
            
            </summary>
            <param name="level"></param>
            <param name="itemEnv"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Quadtree.Key.Point">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Quadtree.Key.Level">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Quadtree.Key.Envelope">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Quadtree.Key.Centre">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.DefaultCoordinateSequenceFactory">
            <summary>
            Creates CoordinateSequences internally represented
            as an array of x's and an array of y's.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.DefaultCoordinateSequenceFactory.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.DefaultCoordinateSequenceFactory.Create(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Returns a DefaultCoordinateSequence based on the given array
            (the array is not copied).
            </summary>
            <param name="coordinates">Coordinates array, which may not be null
            nor contain null elements</param>
            <returns>Singleton instance of DefaultCoordinateSequenceFactory.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.DefaultCoordinateSequenceFactory.Instance">
            <summary>
            Returns the singleton instance of DefaultCoordinateSequenceFactory.
            </summary>
            <returns>Singleton instance of DefaultCoordinateSequenceFactory.</returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Algorithm.MinimumDiameter">
            <summary>
            Computes the minimum diameter of a <c>Geometry</c>.
            The minimum diameter is defined to be the
            width of the smallest band that contains the point,
            where a band is a strip of the plane defined
            by two parallel lines.
            This can be thought of as the smallest hole that the point can be
            moved through, with a single rotation.
            The first step in the algorithm is computing the convex hull of the Geometry.
            If the input Geometry is known to be convex, a hint can be supplied to
            avoid this computation.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.MinimumDiameter.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary> 
            Compute a minimum diameter for a giver <c>Geometry</c>.
            </summary>
            <param name="inputGeom">a Geometry.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.MinimumDiameter.#ctor(GeoAPI.Geometries.IGeometry,System.Boolean)">
            <summary> 
            Compute a minimum diameter for a giver <c>Geometry</c>,
            with a hint if
            the Geometry is convex
            (e.g. a convex Polygon or LinearRing,
            or a two-point LineString, or a Point).
            </summary>
            <param name="inputGeom">a Geometry which is convex.</param>
            <param name="isConvex"><c>true</c> if the input point is convex.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.MinimumDiameter.ComputeMinimumDiameter">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.MinimumDiameter.ComputeWidthConvex(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.MinimumDiameter.ComputeConvexRingMinDiameter(GeoAPI.Geometries.ICoordinate[])">
            <summary> 
            Compute the width information for a ring of <c>Coordinate</c>s.
            Leaves the width information in the instance variables.
            </summary>
            <param name="pts"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.MinimumDiameter.FindMaxPerpDistance(GeoAPI.Geometries.ICoordinate[],GisSharpBlog.NetTopologySuite.Geometries.LineSegment,System.Int32)">
            <summary>
            
            </summary>
            <param name="pts"></param>
            <param name="seg"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.MinimumDiameter.NextIndex(GeoAPI.Geometries.ICoordinate[],System.Int32)">
            <summary>
            
            </summary>
            <param name="pts"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Algorithm.MinimumDiameter.Length">
            <summary> 
            Gets the length of the minimum diameter of the input Geometry.
            </summary>
            <returns>The length of the minimum diameter.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Algorithm.MinimumDiameter.WidthCoordinate">
            <summary>
            Gets the <c>Coordinate</c> forming one end of the minimum diameter.
            </summary>
            <returns>A coordinate forming one end of the minimum diameter.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Algorithm.MinimumDiameter.SupportingSegment">
            <summary>
            Gets the segment forming the base of the minimum diameter.
            </summary>
            <returns>The segment forming the base of the minimum diameter.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Algorithm.MinimumDiameter.Diameter">
            <summary>
            Gets a <c>LineString</c> which is a minimum diameter.
            </summary>
            <returns>A <c>LineString</c> which is a minimum diameter.</returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Algorithm.MCPointInRing">
            <summary>
            Implements <c>IPointInRing</c>
            using a <c>MonotoneChain</c>s and a <c>BinTree</c> index to increase performance.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.MCPointInRing.#ctor(GeoAPI.Geometries.ILinearRing)">
            <summary>
            
            </summary>
            <param name="ring"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.MCPointInRing.BuildIndex">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.MCPointInRing.IsInside(GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.MCPointInRing.TestMonotoneChain(GeoAPI.Geometries.IEnvelope,GisSharpBlog.NetTopologySuite.Algorithm.MCPointInRing.MCSelecter,GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChain)">
            <summary>
            
            </summary>
            <param name="rayEnv"></param>
            <param name="mcSelecter"></param>
            <param name="mc"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.MCPointInRing.TestLineSegment(GeoAPI.Geometries.ICoordinate,GisSharpBlog.NetTopologySuite.Geometries.LineSegment)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="seg"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Algorithm.MCPointInRing.MCSelecter">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChainSelectAction">
            <summary>
            The action for the internal iterator for performing
            envelope select queries on a MonotoneChain.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChainSelectAction.TempEnv1">
            <summary>
            These envelopes are used during the MonotoneChain search process.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChainSelectAction.SelectedSegment">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChainSelectAction.Select(GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChain,System.Int32)">
            <summary> 
            This function can be overridden if the original chain is needed.
            </summary>
            <param name="mc"></param>
            <param name="start"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChainSelectAction.Select(GisSharpBlog.NetTopologySuite.Geometries.LineSegment)">
            <summary>
            This is a convenience function which can be overridden to obtain the actual
            line segment which is selected.
            </summary>
            <param name="seg"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.MCPointInRing.MCSelecter.#ctor(GisSharpBlog.NetTopologySuite.Algorithm.MCPointInRing,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="container"></param>
            <param name="p"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.MCPointInRing.MCSelecter.Select(GisSharpBlog.NetTopologySuite.Geometries.LineSegment)">
            <summary>
            
            </summary>
            <param name="ls"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Algorithm.InteriorPointPoint">
            <summary> 
            Computes a point in the interior of an point point.
            Algorithm:
            Find a point which is closest to the centroid of the point.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.InteriorPointPoint.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.InteriorPointPoint.Add(GeoAPI.Geometries.IGeometry)">
            <summary> 
            Tests the point(s) defined by a Geometry for the best inside point.
            If a Geometry is not of dimension 0 it is not tested.
            </summary>
            <param name="geom">The point to add.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.InteriorPointPoint.Add(GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="point"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Algorithm.InteriorPointPoint.InteriorPoint">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Algorithm.ConvexHull">
            <summary> 
            Computes the convex hull of a <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/>.
            The convex hull is the smallest convex Geometry that contains all the
            points in the input Geometry.
            Uses the Graham Scan algorithm.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.ConvexHull.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary> 
            Create a new convex hull construction for the input <c>Geometry</c>.
            </summary>
            <param name="geometry"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.ConvexHull.#ctor(GeoAPI.Geometries.ICoordinate[],GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Create a new convex hull construction for the input <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/> array.
            </summary>
            <param name="pts"></param>
            <param name="geomFactory"></param>   
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.ConvexHull.ExtractCoordinates(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.ConvexHull.GetConvexHull">
            <summary> 
            Returns a <c>Geometry</c> that represents the convex hull of the input point.
            The point will contain the minimal number of points needed to
            represent the convex hull.  In particular, no more than two consecutive
            points will be collinear.
            </summary>
            <returns> 
            If the convex hull contains 3 or more points, a <c>Polygon</c>;
            2 points, a <c>LineString</c>;
            1 point, a <c>Point</c>;
            0 points, an empty <c>GeometryCollection</c>.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.ConvexHull.Reduce(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Uses a heuristic to reduce the number of points scanned to compute the hull.
            The heuristic is to find a polygon guaranteed to
            be in (or on) the hull, and eliminate all points inside it.
            A quadrilateral defined by the extremal points
            in the four orthogonal directions
            can be used, but even more inclusive is
            to use an octilateral defined by the points in the 8 cardinal directions.
            Note that even if the method used to determine the polygon vertices
            is not 100% robust, this does not affect the robustness of the convex hull.
            </summary>
            <param name="pts"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.ConvexHull.PreSort(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            
            </summary>
            <param name="pts"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.ConvexHull.GrahamScan(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            
            </summary>
            <param name="c"></param>
            <returns></returns>        
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.ConvexHull.ReverseStack(System.Collections.Generic.Stack{GeoAPI.Geometries.ICoordinate})">
            <summary>
            
            </summary>
            <param name="ps"></param>
            <returns></returns>    
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.ConvexHull.IsBetween(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <param name="c3"></param>
            <returns>
            Whether the three coordinates are collinear 
            and c2 lies between c1 and c3 inclusive.
            </returns>        
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.ConvexHull.ComputeOctRing(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            
            </summary>
            <param name="inputPts"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.ConvexHull.ComputeOctPts(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            
            </summary>
            <param name="inputPts"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.ConvexHull.LineOrPolygon(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            
            </summary>
            <param name="coordinates"> The vertices of a linear ring, which may or may not be flattened (i.e. vertices collinear).</param>
            <returns>A 2-vertex <c>LineString</c> if the vertices are collinear; 
            otherwise, a <c>Polygon</c> with unnecessary (collinear) vertices removed. </returns>       
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.ConvexHull.CleanRing(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            
            </summary>
            <param name="original">The vertices of a linear ring, which may or may not be flattened (i.e. vertices collinear).</param>
            <returns>The coordinates with unnecessary (collinear) vertices removed.</returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Algorithm.ConvexHull.RadialComparator">
            <summary>
            Compares <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/>s for their angle and distance
            relative to an origin.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.ConvexHull.RadialComparator.#ctor(GeoAPI.Geometries.ICoordinate)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Algorithm.ConvexHull.RadialComparator"/> class.
            </summary>
            <param name="origin"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.ConvexHull.RadialComparator.Compare(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.ConvexHull.RadialComparator.PolarCompare(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <param name="p"></param>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="T:Iesi_NTS.Collections.ImmutableSet">
            <summary>
            <p>Implements an immutable (read-only) <c>Set</c> wrapper.</p>
            <p>Although this is advertised as immutable, it really isn't.  Anyone with access to the
            <c>basisSet</c> can still change the data-set.  So <c>GetHashCode()</c> is not implemented
            for this <c>Set</c>, as is the case for all <c>Set</c> implementations in this library.
            This design decision was based on the efficiency of not having to <c>Clone()</c> the 
            <c>basisSet</c> every time you wrap a mutable <c>Set</c>.</p>
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.ImmutableSet.#ctor(Iesi_NTS.Collections.ISet)">
            <summary>
            Constructs an immutable (read-only) <c>Set</c> wrapper.
            </summary>
            <param name="basisSet">The <c>Set</c> that is wrapped.</param>
        </member>
        <member name="M:Iesi_NTS.Collections.ImmutableSet.Add(System.Object)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="o">The object to add to the set.</param>
            <returns><c>true</c> is the object was added, <c>false</c> if it was already present.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.ImmutableSet.AddAll(System.Collections.ICollection)">
            <summary>
            Adds all the elements in the specified collection to the set if they are not already present.
            </summary>
            <param name="c">A collection of objects to add to the set.</param>
            <returns><c>true</c> is the set changed as a result of this operation, <c>false</c> if not.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.ImmutableSet.Clear">
            <summary>
            Removes all objects from the set.
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.ImmutableSet.Contains(System.Object)">
            <summary>
            Returns <c>true</c> if this set contains the specified element.
            </summary>
            <param name="o">The element to look for.</param>
            <returns><c>true</c> if this set contains the specified element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.ImmutableSet.ContainsAll(System.Collections.ICollection)">
            <summary>
            Returns <c>true</c> if the set contains all the elements in the specified collection.
            </summary>
            <param name="c">A collection of objects.</param>
            <returns><c>true</c> if the set contains all the elements in the specified collection, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.ImmutableSet.Remove(System.Object)">
            <summary>
            Removes the specified element from the set.
            </summary>
            <param name="o">The element to be removed.</param>
            <returns><c>true</c> if the set contained the specified element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.ImmutableSet.RemoveAll(System.Collections.ICollection)">
            <summary>
            Remove all the specified elements from this set, if they exist in this set.
            </summary>
            <param name="c">A collection of elements to remove.</param>
            <returns><c>true</c> if the set was modified as a result of this operation.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.ImmutableSet.RetainAll(System.Collections.ICollection)">
            <summary>
            Retains only the elements in this set that are contained in the specified collection.
            </summary>
            <param name="c">Collection that defines the set of elements to be retained.</param>
            <returns><c>true</c> if this set changed as a result of this operation.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.ImmutableSet.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements in the <c>Set</c> to an array.  The type of array needs
            to be compatible with the objects in the <c>Set</c>, obviously.
            </summary>
            <param name="array">An array that will be the target of the copy operation.</param>
            <param name="index">The zero-based index where copying will start.</param>
        </member>
        <member name="M:Iesi_NTS.Collections.ImmutableSet.GetEnumerator">
            <summary>
            Gets an enumerator for the elements in the <c>Set</c>.
            </summary>
            <returns>An <c>IEnumerator</c> over the elements in the <c>Set</c>.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.ImmutableSet.Clone">
            <summary>
            Returns a clone of the <c>Set</c> instance.  
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.ImmutableSet.Union(Iesi_NTS.Collections.ISet)">
            <summary>
            Performs a "union" of the two sets, where all the elements
            in both sets are present.  That is, the element is included if it is in either <c>a</c> or <c>b</c>.
            Neither this set nor the input set are modified during the operation.  The return value
            is a <c>Clone()</c> of this set with the extra elements added in.
            </summary>
            <param name="a">A collection of elements.</param>
            <returns>A new <c>Set</c> containing the union of this <c>Set</c> with the specified collection.
            Neither of the input objects is modified by the union.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.ImmutableSet.Intersect(Iesi_NTS.Collections.ISet)">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain.  That is, the element is included if it exists in
            both sets.  The <c>Intersect()</c> operation does not modify the input sets.  It returns
            a <c>Clone()</c> of this set with the appropriate elements removed.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>The intersection of this set with <c>a</c>.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.ImmutableSet.Minus(Iesi_NTS.Collections.ISet)">
            <summary>
            Performs a "minus" of set <c>b</c> from set <c>a</c>.  This returns a set of all
            the elements in set <c>a</c>, removing the elements that are also in set <c>b</c>.
            The original sets are not modified during this operation.  The result set is a <c>Clone()</c>
            of this <c>Set</c> containing the elements from the operation.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>A set containing the elements from this set with the elements in <c>a</c> removed.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.ImmutableSet.ExclusiveOr(Iesi_NTS.Collections.ISet)">
            <summary>
            Performs an "exclusive-or" of the two sets, keeping only the elements that
            are in one of the sets, but not in both.  The original sets are not modified
            during this operation.  The result set is a <c>Clone()</c> of this set containing
            the elements from the exclusive-or operation.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>A set containing the result of <c>a ^ b</c>.</returns>
        </member>
        <member name="P:Iesi_NTS.Collections.ImmutableSet.IsEmpty">
            <summary>
            Returns <c>true</c> if this set contains no elements.
            </summary>
        </member>
        <member name="P:Iesi_NTS.Collections.ImmutableSet.Count">
            <summary>
            The number of elements contained in this collection.
            </summary>
        </member>
        <member name="P:Iesi_NTS.Collections.ImmutableSet.IsSynchronized">
            <summary>
            Returns an object that can be used to synchronize use of the <c>Set</c> across threads.
            </summary>
        </member>
        <member name="P:Iesi_NTS.Collections.ImmutableSet.SyncRoot">
            <summary>
            Returns an object that can be used to synchronize the <c>Set</c> between threads.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Utilities.HexConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.HexConverter.#ctor">
            <summary>
            Only static methods!
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.HexConverter.ConvertAny2Any(System.String,System.Int32,System.Int32)">
            <summary>
            Convert the given numeric value (passed as string) of the base specified by <c>baseIn</c>
            to the value specified by <c>baseOut</c>.
            </summary>
            <param name="valueIn">Numeric value to be converted, as string.</param>
            <param name="baseIn">Base of input value.</param>
            <param name="baseOut">Base to use for conversion.</param>
            <returns>Converted value, as string.</returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Utilities.CoordinateCompare">
            <summary>
            CoordinateCompare is used in the sorting of arrays of Coordinate objects.
            Implements a lexicographic comparison.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.CoordinateCompare.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.CoordinateCompare.Compare(System.Object,System.Object)">
             <summary>
             Compares two object and returns a value indicating whether one is less than, equal to or greater
             than the other.
             </summary>
             <param name="x">First Coordinate object to compare.</param>
             <param name="y">Second Coordinate object to compare.</param>
             <returns>
            &lt;table cellspacing="0" class="dtTABLE"&gt;
            &lt;TR VALIGN="top"&gt;
            	 &lt;TH width=50%&gt;Value&lt;/TH&gt;
            &lt;TH width=50%&gt;Condition&lt;/TH&gt;
            &lt;/TR&gt;
            &lt;TR VALIGN="top"&gt;
            	 &lt;TD width=50%&gt;Less than zero&lt;/TD&gt;
            &lt;TD width=50%&gt;&lt;I&gt;a&lt;/I&gt; is less than &lt;I&gt;b&lt;/I&gt;.&lt;/TD&gt;
            &lt;/TR&gt;
            &lt;TR VALIGN="top"&gt;
            	 &lt;TD width=50%&gt;Zero&lt;/TD&gt;
            &lt;TD width=50%&gt;&lt;I&gt;a&lt;/I&gt; equals &lt;I&gt;b&lt;/I&gt;.&lt;/TD&gt;
            &lt;/TR&gt;
            &lt;TR VALIGN="top"&gt;
            	 &lt;TD width=50%&gt;Greater than zero&lt;/TD&gt;
            &lt;TD width=50%&gt;&lt;I&gt;a&lt;/I&gt; is greater than &lt;I&gt;b&lt;/I&gt;.&lt;/TD&gt;
            &lt;/TR&gt;
            &lt;/table&gt;
             </returns>
             <remarks>If a implements IComparable, then a. CompareTo (b) is returned; otherwise, if b 
             implements IComparable, then b. CompareTo (a) is returned.
             Comparing a null reference (Nothing in Visual Basic) with any type is allowed and does not
             generate an exception when using IComparable. When sorting, a null reference (Nothing) is 
             considered to be less than any other object.
             </remarks>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Precision.CommonBits">
            <summary> 
            Determines the maximum number of common most-significant
            bits in the mantissa of one or numbers.
            Can be used to compute the double-precision number which
            is represented by the common bits.
            If there are no common bits, the number computed is 0.0.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.CommonBits.SignExpBits(System.Int64)">
            <summary>
            Computes the bit pattern for the sign and exponent of a
            double-precision number.
            </summary>
            <param name="num"></param>
            <returns>The bit pattern for the sign and exponent.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.CommonBits.NumCommonMostSigMantissaBits(System.Int64,System.Int64)">
            <summary>
            This computes the number of common most-significant bits in the mantissas
            of two double-precision numbers.
            It does not count the hidden bit, which is always 1.
            It does not determine whether the numbers have the same exponent - if they do
            not, the value computed by this function is meaningless.
            </summary>
            <param name="num1"></param>
            /// <param name="num2"></param>
            <returns>The number of common most-significant mantissa bits.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.CommonBits.ZeroLowerBits(System.Int64,System.Int32)">
            <summary>
            Zeroes the lower n bits of a bitstring.
            </summary>
            <param name="bits">The bitstring to alter.</param>
            <param name="nBits">the number of bits to zero.</param>
            <returns>The zeroed bitstring.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.CommonBits.GetBit(System.Int64,System.Int32)">
            <summary>
            Extracts the i'th bit of a bitstring.
            </summary>
            <param name="bits">The bitstring to extract from.</param>
            <param name="i">The bit to extract.</param>
            <returns>The value of the extracted bit.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.CommonBits.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.CommonBits.Add(System.Double)">
            <summary>
            
            </summary>
            <param name="num"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.CommonBits.ToString(System.Int64)">
            <summary>
            A representation of the Double bits formatted for easy readability
            </summary>
            <param name="bits"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Precision.CommonBits.Common">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Valid.IsValidOp">
            <summary>
            Implements the algorithsm required to compute the <see cref="P:GisSharpBlog.NetTopologySuite.Geometries.Geometry.IsValid"/>
            method for <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/>s.
            See the documentation for the various geometry types for a specification of validity.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.IsValidOp.IsValidCoordinate(GeoAPI.Geometries.ICoordinate)">
            <summary>
            Checks whether a coordinate is valid for processing.
            Coordinates are valid iff their x and y ordinates are in the
            range of the floating point representation.
            </summary>
            <param name="coord">The coordinate to validate.</param>
            <returns><c>true</c> if the coordinate is valid.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.IsValidOp.FindPointNotNode(GeoAPI.Geometries.ICoordinate[],GeoAPI.Geometries.ILinearRing,GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            Find a point from the list of testCoords
            that is NOT a node in the edge for the list of searchCoords.
            </summary>
            <param name="testCoords"></param>
            <param name="searchRing"></param>
            <param name="graph"></param>
            <returns>The point found, or <c>null</c> if none found.</returns>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.Valid.IsValidOp.isSelfTouchingRingFormingHoleValid">
            If the following condition is TRUE JTS will validate inverted shells and exverted holes (the ESRI SDE model).
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.IsValidOp.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="parentGeometry"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.IsValidOp.CheckValid(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.IsValidOp.CheckValid(GeoAPI.Geometries.IPoint)">
            <summary>
            Checks validity of a Point.
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.IsValidOp.CheckValid(GeoAPI.Geometries.IMultiPoint)">
            <summary>
            Checks validity of a MultiPoint.
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.IsValidOp.CheckValid(GeoAPI.Geometries.ILineString)">
            <summary>
            Checks validity of a LineString.  
            Almost anything goes for lineStrings!
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.IsValidOp.CheckValid(GeoAPI.Geometries.ILinearRing)">
            <summary>
            Checks validity of a LinearRing.
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.IsValidOp.CheckValid(GeoAPI.Geometries.IPolygon)">
            <summary>
            Checks the validity of a polygon and sets the validErr flag.
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.IsValidOp.CheckValid(GeoAPI.Geometries.IMultiPolygon)">
            <summary>
            
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.IsValidOp.CheckValid(GeoAPI.Geometries.IGeometryCollection)">
            <summary>
            
            </summary>
            <param name="gc"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.IsValidOp.CheckInvalidCoordinates(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            
            </summary>
            <param name="coords"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.IsValidOp.CheckInvalidCoordinates(GeoAPI.Geometries.IPolygon)">
            <summary>
            
            </summary>
            <param name="poly"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.IsValidOp.CheckClosedRings(GeoAPI.Geometries.IPolygon)">
            <summary>
            
            </summary>
            <param name="poly"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.IsValidOp.CheckClosedRing(GeoAPI.Geometries.ILinearRing)">
            <summary>
            
            </summary>
            <param name="ring"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.IsValidOp.CheckTooFewPoints(GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.IsValidOp.CheckConsistentArea(GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.IsValidOp.CheckNoSelfIntersectingRings(GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            Check that there is no ring which self-intersects (except of course at its endpoints).
            This is required by OGC topology rules (but not by other models
            such as ESRI SDE, which allow inverted shells and exverted holes).
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.IsValidOp.CheckNoSelfIntersectingRing(GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeIntersectionList)">
            <summary>
            Check that a ring does not self-intersect, except at its endpoints.
            Algorithm is to count the number of times each node along edge occurs.
            If any occur more than once, that must be a self-intersection.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.IsValidOp.CheckHolesInShell(GeoAPI.Geometries.IPolygon,GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            Tests that each hole is inside the polygon shell.
            This routine assumes that the holes have previously been tested
            to ensure that all vertices lie on the shell or inside it.
            A simple test of a single point in the hole can be used,
            provide the point is chosen such that it does not lie on the
            boundary of the shell.
            </summary>
            <param name="p">The polygon to be tested for hole inclusion.</param>
            <param name="graph">A GeometryGraph incorporating the polygon.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.IsValidOp.CheckHolesNotNested(GeoAPI.Geometries.IPolygon,GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            Tests that no hole is nested inside another hole.
            This routine assumes that the holes are disjoint.
            To ensure this, holes have previously been tested
            to ensure that:
            They do not partially overlap
            (checked by <c>checkRelateConsistency</c>).
            They are not identical
            (checked by <c>checkRelateConsistency</c>).
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.IsValidOp.CheckShellsNotNested(GeoAPI.Geometries.IMultiPolygon,GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            Tests that no element polygon is wholly in the interior of another element polygon.
            Preconditions:
            Shells do not partially overlap.
            Shells do not touch along an edge.
            No duplicate rings exists.
            This routine relies on the fact that while polygon shells may touch at one or
            more vertices, they cannot touch at ALL vertices.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.IsValidOp.CheckShellNotNested(GeoAPI.Geometries.ILinearRing,GeoAPI.Geometries.IPolygon,GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            Check if a shell is incorrectly nested within a polygon.  This is the case
            if the shell is inside the polygon shell, but not inside a polygon hole.
            (If the shell is inside a polygon hole, the nesting is valid.)
            The algorithm used relies on the fact that the rings must be properly contained.
            E.g. they cannot partially overlap (this has been previously checked by
            <c>CheckRelateConsistency</c>).
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.IsValidOp.CheckShellInsideHole(GeoAPI.Geometries.ILinearRing,GeoAPI.Geometries.ILinearRing,GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary> 
            This routine checks to see if a shell is properly contained in a hole.
            It assumes that the edges of the shell and hole do not
            properly intersect.
            </summary>
            <param name="shell"></param>
            <param name="hole"></param>
            <param name="graph"></param>
            <returns>
            <c>null</c> if the shell is properly contained, or
            a Coordinate which is not inside the hole if it is not.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.IsValidOp.CheckConnectedInteriors(GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            
            </summary>
            <param name="graph"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Valid.IsValidOp.IsSelfTouchingRingFormingHoleValid">
            <summary>
            <para>
            Gets/Sets whether polygons using Self-Touching Rings to form
            holes are reported as valid.
            If this flag is set, the following Self-Touching conditions
            are treated as being valid:
            - The shell ring self-touches to create a hole touching the shell.
            - A hole ring self-touches to create two holes touching at a point.
            </para>
            <para>
            The default (following the OGC SFS standard)
            is that this condition is not valid (<c>false</c>).
            </para>
            <para>
            This does not affect whether Self-Touching Rings
            disconnecting the polygon interior are considered valid
            (these are considered to be invalid under the SFS, and many other
            spatial models as well).
            This includes "bow-tie" shells,
            which self-touch at a single point causing the interior to be disconnected,
            and "C-shaped" holes which self-touch at a single point causing an island to be formed.
            </para>
            </summary>
            <value>States whether geometry with this condition is valid.</value>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Valid.IsValidOp.IsValid">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Valid.IsValidOp.ValidationError">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Valid.ConnectedInteriorTester">
            <summary> 
            This class tests that the interior of an area <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/>
            (<see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Polygon"/> or <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.MultiPolygon"/>)
            is connected.  An area Geometry is invalid if the interior is disconnected.
            This can happen if:
            - a shell self-intersects,
            - one or more holes form a connected chain touching a shell at two different points,
            - one or more holes form a ring around a subset of the interior.
            If a disconnected situation is found the location of the problem is recorded.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.ConnectedInteriorTester.FindDifferentPoint(GeoAPI.Geometries.ICoordinate[],GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="coord"></param>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.ConnectedInteriorTester.#ctor(GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            
            </summary>
            <param name="geomGraph"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.ConnectedInteriorTester.IsInteriorsConnected">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.ConnectedInteriorTester.SetInteriorEdgesInResult(GisSharpBlog.NetTopologySuite.GeometriesGraph.PlanarGraph)">
            <summary>
            
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.ConnectedInteriorTester.BuildEdgeRings(System.Collections.IList)">
            <summary>
            Form <see cref="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge"/>s in graph into Minimal EdgeRings.
            (Minimal Edgerings must be used, because only they are guaranteed to provide
            a correct isHole computation).
            </summary>
            <param name="dirEdges"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.ConnectedInteriorTester.VisitShellInteriors(GeoAPI.Geometries.IGeometry,GisSharpBlog.NetTopologySuite.GeometriesGraph.PlanarGraph)">
            <summary>
            Mark all the edges for the edgeRings corresponding to the shells of the input polygons.  
            Only ONE ring gets marked for each shell - if there are others which remain unmarked
            this indicates a disconnected interior.
            </summary>
            <param name="g"></param>
            <param name="graph"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.ConnectedInteriorTester.VisitInteriorRing(GeoAPI.Geometries.ILineString,GisSharpBlog.NetTopologySuite.GeometriesGraph.PlanarGraph)">
            <summary>
            
            </summary>
            <param name="ring"></param>
            <param name="graph"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.ConnectedInteriorTester.VisitLinkedDirectedEdges(GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge)">
            <summary>
            
            </summary>
            <param name="start"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.ConnectedInteriorTester.HasUnvisitedShellEdge(System.Collections.IList)">
            <summary>
            Check if any shell ring has an unvisited edge.
            A shell ring is a ring which is not a hole and which has the interior
            of the parent area on the RHS.
            (Note that there may be non-hole rings with the interior on the LHS,
            since the interior of holes will also be polygonized into CW rings
            by the <c>LinkAllDirectedEdges()</c> step).
            </summary>
            <param name="edgeRings"></param>
            <returns><c>true</c> if there is an unvisited edge in a non-hole ring.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Valid.ConnectedInteriorTester.Coordinate">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateNodeFactory">
            <summary>
            Used by the <c>NodeMap</c> in a <c>RelateNodeGraph</c> to create <c>RelateNode</c>s.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateNodeFactory.CreateNode(GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="coord"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Relate.EdgeEndBuilder">
            <summary> 
            An EdgeEndBuilder creates EdgeEnds for all the "split edges"
            created by the intersections determined for an Edge.
            Computes the <c>EdgeEnd</c>s which arise from a noded <c>Edge</c>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.EdgeEndBuilder.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.EdgeEndBuilder.ComputeEdgeEnds(System.Collections.IEnumerator)">
            <summary>
            
            </summary>
            <param name="edges"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.EdgeEndBuilder.ComputeEdgeEnds(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge,System.Collections.IList)">
            <summary>
            Creates stub edges for all the intersections in this
            Edge (if any) and inserts them into the graph.
            </summary>
            <param name="edge"></param>
            <param name="l"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.EdgeEndBuilder.CreateEdgeEndForPrev(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge,System.Collections.IList,GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeIntersection,GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeIntersection)">
            <summary>
            Create a EdgeStub for the edge before the intersection eiCurr.
            The previous intersection is provided
            in case it is the endpoint for the stub edge.
            Otherwise, the previous point from the parent edge will be the endpoint.
            eiCurr will always be an EdgeIntersection, but eiPrev may be null.
            </summary>
            <param name="edge"></param>
            <param name="l"></param>
            <param name="eiCurr"></param>
            <param name="eiPrev"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.EdgeEndBuilder.CreateEdgeEndForNext(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge,System.Collections.IList,GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeIntersection,GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeIntersection)">
            <summary>
            Create a StubEdge for the edge after the intersection eiCurr.
            The next intersection is provided
            in case it is the endpoint for the stub edge.
            Otherwise, the next point from the parent edge will be the endpoint.
            eiCurr will always be an EdgeIntersection, but eiNext may be null.
            </summary>
            <param name="edge"></param>
            <param name="l"></param>
            <param name="eiCurr"></param>
            <param name="eiNext"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineSequencer">
            <summary>
            <para>
            Builds a sequence from a set of <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.LineString"/>s,
            so that they are ordered end to end.
            A sequence is a complete non-repeating list of the linear
            components of the input.  Each linestring is oriented
            so that identical endpoints are adjacent in the list.
            </para>
            <para>
            The input linestrings may form one or more connected sets.
            The input linestrings should be correctly noded, or the results may
            not be what is expected.
            The output of this method is a single <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.MultiLineString"/>,
            containing the ordered linestrings in the sequence.
            </para>
            <para>
            The sequencing employs the classic 'Eulerian path' graph algorithm.
            Since Eulerian paths are not uniquely determined, further rules are used to
            make the computed sequence preserve as much as possible of the input ordering.
            Within a connected subset of lines, the ordering rules are:    
             - If there is degree-1 node which is the start
            node of an linestring, use that node as the start of the sequence.
             - If there is a degree-1 node which is the end
            node of an linestring, use that node as the end of the sequence.
             - If the sequence has no degree-1 nodes, use any node as the start
            </para>
            <para>
            Not all arrangements of lines can be sequenced.
            For a connected set of edges in a graph,
            Euler's Theorem states that there is a sequence containing each edge once
            if and only if there are no more than 2 nodes of odd degree.
            If it is not possible to find a sequence, the <see cref="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineSequencer.IsSequenceable"/> 
            property will return <c>false</c>.
            </para>
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineSequencer.IsSequenced(GeoAPI.Geometries.IGeometry)">
            <summary>
            Tests whether a <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/> is sequenced correctly.
            <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.LineString"/>s are trivially sequenced.
            <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.MultiLineString"/>s are checked for correct sequencing.
            Otherwise, <c>IsSequenced</c> is defined
            to be <c>true</c> for geometries that are not lineal.
            </summary>
            <param name="geom">The <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/> to test.</param>
            <returns>
            <c>true</c> if the <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/> is sequenced or is not lineal.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineSequencer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineSequencer"/> class.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineSequencer.Add(System.Collections.Generic.IEnumerable{GeoAPI.Geometries.IGeometry})">
            <summary>
            Adds a <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/>s to be sequenced.
            May be called multiple times.
            Any dimension of Geometry may be added; the constituent linework will be extracted.
            </summary>
            <param name="geometries">A <see cref="T:System.Collections.IEnumerable"/> of geometries to add.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineSequencer.Add(GeoAPI.Geometries.IGeometry)">
            <summary>
            Adds a <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/> to be sequenced.
            May be called multiple times.
            Any dimension of <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/> may be added; 
            the constituent linework will be extracted.
            </summary>
            <param name="geometry"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineSequencer.AddLine(GeoAPI.Geometries.ILineString)">
            <summary>
            
            </summary>
            <param name="lineString"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineSequencer.IsSequenceable">
            <summary>
            Tests whether the arrangement of linestrings has a valid sequence.
            </summary>
            <returns><c>true</c> if a valid sequence exists.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineSequencer.GetSequencedLineStrings">
            <summary>
            Returns the <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.LineString"/> or <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.MultiLineString"/>
            built by the sequencing process, if one exists.
            </summary>
            <returns>The sequenced linestrings,
            or <c>null</c> if a valid sequence does not exist.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineSequencer.ComputeSequence">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineSequencer.FindSequences">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineSequencer.HasSequence(GisSharpBlog.NetTopologySuite.Planargraph.Subgraph)">
            <summary>
            Tests whether a complete unique path exists in a graph
            using Euler's Theorem.
            </summary>
            <param name="graph">The <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.Subgraph"/> containing the edges.</param>
            <returns><c>true</c> if a sequence exists.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineSequencer.FindSequence(GisSharpBlog.NetTopologySuite.Planargraph.Subgraph)">
            <summary>
            
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineSequencer.FindUnvisitedBestOrientedDE(GisSharpBlog.NetTopologySuite.Planargraph.Node)">
            <summary>
            Finds an <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge"/> for an unvisited edge (if any),
            choosing the <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge"/> which preserves orientation, if possible.
            </summary>
            <param name="node">The <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.Node"/> to examine.</param>
            <returns>
            The <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge"/> found, 
            or <c>null</c> if none were unvisited.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineSequencer.AddReverseSubpath(GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge,System.Collections.Generic.LinkedListNode{GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge},System.Collections.Generic.LinkedList{GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge},System.Boolean)">
            <summary>
            
            </summary>
            <param name="de"></param>
            <param name="pos"></param>
            <param name="list"></param>
            <param name="expectedClosed"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineSequencer.FindLowestDegreeNode(GisSharpBlog.NetTopologySuite.Planargraph.Subgraph)">
            <summary>
            
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineSequencer.Orient(System.Collections.IList)">
            <summary>
            Computes a version of the sequence which is optimally
            oriented relative to the underlying geometry.
            <para>
            Heuristics used are:   
             - If the path has a degree-1 node which is the start
            node of an linestring, use that node as the start of the sequence.
             - If the path has a degree-1 node which is the end
            node of an linestring, use that node as the end of the sequence.
             - If the sequence has no degree-1 nodes, use any node as the start
            (NOTE: in this case could orient the sequence according to the majority of the
            linestring orientations).
            </para>
            </summary>
            <param name="seq">A <see cref="T:System.Collections.IList"/> of <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge"/>s.</param>
            <returns>
            A <see cref="T:System.Collections.IList"/> of <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge"/>s oriented appropriately.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineSequencer.Reverse(System.Collections.IEnumerable)">
            <summary>
            Reverse the sequence.
            This requires reversing the order of the <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge"/>s, 
            and flipping each <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge"/> as well.
            </summary>
            <param name="seq">
            A <see cref="T:System.Collections.IList"/> of <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge"/>s, 
            in sequential order.
            </param>
            <returns>The reversed sequence.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineSequencer.BuildSequencedGeometry(System.Collections.IEnumerable)">
            <summary>
            Builds a geometry (<see cref="T:GisSharpBlog.NetTopologySuite.Geometries.LineString"/> or <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.MultiLineString"/>)
            representing the sequence.
            </summary>
            <param name="sequences">
            A <see cref="T:System.Collections.IList"/> of <see cref="T:System.Collections.IList"/>s of <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge"/>s
            with <see cref="T:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineMergeEdge"/>s as their parent edges.
            </param>
            <returns>
            The sequenced geometry, or <c>null</c> if no sequence exists.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineSequencer.Reverse(GeoAPI.Geometries.ILineString)">
            <summary>
            
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineSequencer.GeometryComponentFilterImpl">
            <summary>
            A private implementation for <see cref="T:GeoAPI.Geometries.IGeometryComponentFilter"/>
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineSequencer.GeometryComponentFilterImpl.#ctor(GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineSequencer)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineSequencer.GeometryComponentFilterImpl"/> class.
            </summary>
            <param name="sequencer">The sequencer.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineSequencer.GeometryComponentFilterImpl.Filter(GeoAPI.Geometries.IGeometry)">
            <summary>
            Performs an operation with or on <paramref name="component"/>
            </summary>
            <param name="component">
            A <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/> to which the filter is applied.
            </param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LocationIndexOfLine">
            <summary>
            Determines the location of a subline along a linear <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/>.
            The location is reported as a pair of <see cref="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation"/>s.
            NOTE: Currently this algorithm is not guaranteed to
            return the correct substring in some situations where
            an endpoint of the test line occurs more than once in the input line.
            (However, the common case of a ring is always handled correctly).
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LocationIndexOfLine.IndicesOf(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="linearGeom"></param>
            <param name="subLine"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LocationIndexOfLine.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LocationIndexOfLine"/> class.
            </summary>
            <param name="linearGeom">The linear geom.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LocationIndexOfLine.IndicesOf(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="subLine"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.WktStreamTokenizer">
            <summary>
            Reads a stream of Well Known Text (wkt) string and returns a stream of tokens.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Utilities.GeoToolsStreamTokenizer">
            <summary>
            The StreamTokenizer class takes an input stream and parses it into "tokens", 
            allowing the tokens to be read one at a time. 
            The parsing process is controlled by a table and a number of flags that can be set to various states. 
            The stream tokenizer can recognize identifiers, numbers, quoted strings, and various comment style.
            </summary>
            <remarks>
            This is a crude c# implementation of Java's 
            <a href="http://java.sun.com/products/jdk/1.2/docs/api/java/io/StreamTokenizer.html">StreamTokenizer</a> class.
            </remarks>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.GeoToolsStreamTokenizer.#ctor(System.IO.TextReader,System.Boolean)">
            <summary>
            Initializes a new instance of the StreamTokenizer class.
            </summary>
            <param name="reader">A TextReader with some text to read.</param>
            <param name="ignoreWhitespace">Flag indicating whether whitespace should be ignored.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.GeoToolsStreamTokenizer.GetNumericValue">
            <summary>
            If the current token is a number, this field contains the value of that number. 
            </summary>
            <remarks>
            If the current token is a number, this field contains the value of that number. The current token is a number when the value of the ttype field is TT_NUMBER.
            </remarks>
            <exception cref="T:System.FormatException">Current token is not a number in a valid format.</exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.GeoToolsStreamTokenizer.GetStringValue">
            <summary>
            If the current token is a word token, this field contains a string giving the characters of the word token. 
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.GeoToolsStreamTokenizer.GetTokenType">
            <summary>
            Gets the token type of the current token.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.GeoToolsStreamTokenizer.NextToken(System.Boolean)">
            <summary>
            Returns the next token.
            </summary>
            <param name="ignoreWhitespace">Determines is whitespace is ignored. True if whitespace is to be ignored.</param>
            <returns>The TokenType of the next token.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.GeoToolsStreamTokenizer.NextToken">
            <summary>
            Returns the next token.
            </summary>
            <returns>The TokenType of the next token.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.GeoToolsStreamTokenizer.NextTokenAny">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.GeoToolsStreamTokenizer.GetType(System.Char)">
            <summary>
            Determines a characters type (e.g. number, symbols, character).
            </summary>
            <param name="character">The character to determine.</param>
            <returns>The TokenType the character is.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.GeoToolsStreamTokenizer.NextNonWhitespaceToken">
            <summary>
            Returns next token that is not whitespace.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Utilities.GeoToolsStreamTokenizer.LineNumber">
            <summary>
            The current line number of the stream being read.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Utilities.GeoToolsStreamTokenizer.Column">
            <summary>
            The current column number of the stream being read.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WktStreamTokenizer.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the WktStreamTokenizer class.
            </summary>
            <remarks>The WktStreamTokenizer class ais in reading WKT streams.</remarks>
            <param name="reader">A TextReader that contains WKT.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WktStreamTokenizer.ReadToken(System.String)">
            <summary>
            Reads a token and checks it is what is expected.
            </summary>
            <param name="expectedToken">The expected token.</param>
            <exception cref="T:GisSharpBlog.NetTopologySuite.IO.ParseException">If the token is not what is expected.</exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WktStreamTokenizer.ReadDoubleQuotedWord">
            <summary>
            Reads a string inside double quotes.
            </summary>
            <remarks>
            White space inside quotes is preserved.
            </remarks>
            <returns>The string inside the double quotes.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.WktStreamTokenizer.ReadAuthority(System.String@,System.String@)">
            <summary>
            Reads the authority and authority code.
            </summary>
            <param name="authority">String to place the authority in.</param>
            <param name="authorityCode">String to place the authority code in.</param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.BEBinaryWriter">
            <summary>
            Extends the <see cref="T:System.IO.BinaryWriter"/> class to allow writing values in the BigEndian format.    
            </summary>
            <remarks>
            While <see cref="T:GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryWriter"/> extends <see cref="T:System.IO.BinaryWriter"/> 
            adding methods for writing integer values (<see cref="M:GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryWriter.WriteIntBE(System.Int32)"/>)
            and double values (<see cref="M:GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryWriter.WriteDoubleBE(System.Double)"/>) in the BigEndian format,
            this implementation overrides methods, such <see cref="M:System.IO.BinaryWriter.Write(System.Int32)"/> 
            and <see cref="M:System.IO.BinaryWriter.Write(System.Double)"/> and more, 
            for writing <see cref="T:ByteOrder.BigEndian"/> values in the BigEndian format.
            </remarks>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BEBinaryWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BEBinaryWriter"/> class.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BEBinaryWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:BEBinaryWriter"/> class.
            </summary>
            <param name="output">The supplied stream.</param>
            <exception cref="T:System.ArgumentNullException">output is null. </exception>
            <exception cref="T:System.ArgumentException">
            The stream does not support writing, or the stream is already closed. </exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BEBinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:BEBinaryWriter"/> class.
            </summary>
            <param name="output">The supplied stream.</param>
            <param name="encoding">The character encoding.</param>
            <exception cref="T:System.ArgumentNullException">output or encoding is null. </exception>
            <exception cref="T:System.ArgumentException">
            The stream does not support writing, or the stream is already closed. </exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BEBinaryWriter.Write(System.Int16)">
            <summary>
            Writes a two-byte signed integer to the current stream using BigEndian encoding
            and advances the stream position by two bytes.
            </summary>
            <param name="value">The two-byte signed integer to write.</param>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BEBinaryWriter.Write(System.UInt16)">
            <summary>
            Writes a two-byte unsigned integer to the current stream  using BigEndian encoding
            and advances the stream position by two bytes.
            </summary>
            <param name="value">The two-byte unsigned integer to write.</param>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BEBinaryWriter.Write(System.Int32)">
            <summary>
            Writes a four-byte signed integer to the current stream using BigEndian encoding
            and advances the stream position by four bytes.
            </summary>
            <param name="value">The four-byte signed integer to write.</param>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BEBinaryWriter.Write(System.UInt32)">
            <summary>
            Writes a four-byte unsigned integer to the current stream using BigEndian encoding
            and advances the stream position by four bytes.
            </summary>
            <param name="value">The four-byte unsigned integer to write.</param>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BEBinaryWriter.Write(System.Int64)">
            <summary>
            Writes an eight-byte signed integer to the current stream using BigEndian encoding
            and advances the stream position by eight bytes.
            </summary>
            <param name="value">The eight-byte signed integer to write.</param>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BEBinaryWriter.Write(System.UInt64)">
            <summary>
            Writes an eight-byte unsigned integer to the current stream using BigEndian encoding
            and advances the stream position by eight bytes.
            </summary>
            <param name="value">The eight-byte unsigned integer to write.</param>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BEBinaryWriter.Write(System.Single)">
            <summary>
            Writes a four-byte floating-point value to the current stream using BigEndian encoding
            and advances the stream position by four bytes.
            </summary>
            <param name="value">The four-byte floating-point value to write.</param>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BEBinaryWriter.Write(System.Double)">
            <summary>
            Writes an eight-byte floating-point value to the current stream using BigEndian encoding
            and advances the stream position by eight bytes.
            </summary>
            <param name="value">The eight-byte floating-point value to write.</param>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BEBinaryWriter.Write(System.String)">
            <summary>
            Writes a length-prefixed string to this stream in the current encoding 
            of the <see cref="T:System.IO.BinaryWriter"></see>, 
            and advances the current position of the stream in accordance 
            with the encoding used and the specific characters being written to the stream.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ArgumentNullException">value is null. </exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BEBinaryWriter.Write(System.Decimal)">
            <summary>
            Writes a decimal value to the current stream and advances the stream position by sixteen bytes.
            </summary>
            <param name="value">The decimal value to write.</param>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.Positions">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.GeometriesGraph.Positions.On">
            <summary>
             An indicator that a Location is <c>on</c> a GraphComponent (0)
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.GeometriesGraph.Positions.Left">
            <summary>
            An indicator that a Location is to the <c>left</c> of a GraphComponent (1)
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.GeometriesGraph.Positions.Right">
            <summary> 
            An indicator that a Location is to the <c>right</c> of a GraphComponent (2)
            </summary> 
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.GeometriesGraph.Positions.Parallel">
            <summary> 
            An indicator that a Location is <c>is parallel to x-axis</c> of a GraphComponent (-1)
            /// </summary> 
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.Position">
            <summary> 
            A Position indicates the position of a Location relative to a graph component
            (Node, Edge, or Area).
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Position.Opposite(GisSharpBlog.NetTopologySuite.GeometriesGraph.Positions)">
            <summary> 
            Returns Positions.Left if the position is Positions.Right, 
            Positions.Right if the position is Left, or the position
            otherwise.
            </summary>
            <param name="position"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.TopologyException">
            <summary> 
            Indicates an invalid or inconsistent topological situation encountered during processing
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.TopologyException.MsgWithCoord(System.String,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.TopologyException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.TopologyException.#ctor(System.String,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <param name="pt"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.TopologyException.Coordinate">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.CoordinateSystems.Transformations.GeometryTransform">
            <summary>
            Helper class for transforming <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/> objects.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.CoordinateSystems.Transformations.GeometryTransform.ToNTS(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.CoordinateSystems.Transformations.GeometryTransform.ToArray(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.CoordinateSystems.Transformations.GeometryTransform.TransformBox(GeoAPI.Geometries.IEnvelope,GeoAPI.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:GeoAPI.Geometries.IEnvelope"/> object.
            </summary>
            <param name="box"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.CoordinateSystems.Transformations.GeometryTransform.TransformGeometry(GeoAPI.Geometries.IGeometry,GeoAPI.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/> object.
            </summary>
            <param name="g"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.CoordinateSystems.Transformations.GeometryTransform.TransformPoint(GeoAPI.Geometries.IPoint,GeoAPI.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Point"/> object.
            </summary>
            <param name="p"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.CoordinateSystems.Transformations.GeometryTransform.TransformLineString(GeoAPI.Geometries.ILineString,GeoAPI.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.LineString"/> object.
            </summary>
            <param name="l"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.CoordinateSystems.Transformations.GeometryTransform.TransformLinearRing(GeoAPI.Geometries.ILinearRing,GeoAPI.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.LinearRing"/> object.
            </summary>
            <param name="r"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.CoordinateSystems.Transformations.GeometryTransform.ExtractCoordinates(GeoAPI.Geometries.ILineString,GeoAPI.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            
            </summary>
            <param name="ls"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.CoordinateSystems.Transformations.GeometryTransform.TransformPolygon(GeoAPI.Geometries.IPolygon,GeoAPI.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Polygon"/> object.
            </summary>
            <param name="p"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.CoordinateSystems.Transformations.GeometryTransform.TransformMultiPoint(GeoAPI.Geometries.IMultiPoint,GeoAPI.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.MultiPoint"/> object.
            </summary>
            <param name="points"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.CoordinateSystems.Transformations.GeometryTransform.TransformMultiLineString(GeoAPI.Geometries.IMultiLineString,GeoAPI.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.MultiLineString"/> object.
            </summary>
            <param name="lines"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.CoordinateSystems.Transformations.GeometryTransform.TransformMultiPolygon(GeoAPI.Geometries.IMultiPolygon,GeoAPI.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.MultiPolygon"/> object.
            </summary>
            <param name="polys"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.CoordinateSystems.Transformations.GeometryTransform.TransformGeometryCollection(GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection,GeoAPI.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection"/> object.
            </summary>
            <param name="geoms"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Algorithm.CGAlgorithms">
            <summary>
            Specifies and implements various fundamental Computational Geometric algorithms.
            The algorithms supplied in this class are robust for double-precision floating point.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Algorithm.CGAlgorithms.Clockwise">
            <summary> 
            A value that indicates an orientation of clockwise, or a right turn.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Algorithm.CGAlgorithms.Right">
            <summary> 
            A value that indicates an orientation of clockwise, or a right turn.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Algorithm.CGAlgorithms.CounterClockwise">
            <summary>
            A value that indicates an orientation of counterclockwise, or a left turn.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Algorithm.CGAlgorithms.Left">
            <summary>
            A value that indicates an orientation of counterclockwise, or a left turn.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Algorithm.CGAlgorithms.Collinear">
            <summary>
            A value that indicates an orientation of collinear, or no turn (straight).
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Algorithm.CGAlgorithms.Straight">
            <summary>
            A value that indicates an orientation of collinear, or no turn (straight).
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.CGAlgorithms.OrientationIndex(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary> 
            Returns the index of the direction of the point <c>q</c>
            relative to a vector specified by <c>p1-p2</c>.
            </summary>
            <param name="p1">The origin point of the vector.</param>
            <param name="p2">The final point of the vector.</param>
            <param name="q">The point to compute the direction to.</param>
            <returns> 
            1 if q is counter-clockwise (left) from p1-p2,
            -1 if q is clockwise (right) from p1-p2,
            0 if q is collinear with p1-p2.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.CGAlgorithms.IsPointInRing(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate[])">
            <summary> 
            Test whether a point lies inside a ring.
            The ring may be oriented in either direction.
            If the point lies on the ring boundary the result of this method is unspecified.
            This algorithm does not attempt to first check the point against the envelope
            of the ring.
            </summary>
            <param name="p">Point to check for ring inclusion.</param>
            <param name="ring">Assumed to have first point identical to last point.</param>
            <returns><c>true</c> if p is inside ring.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.CGAlgorithms.IsOnLine(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate[])">
            <summary> 
            Test whether a point lies on the line segments defined by a
            list of coordinates.
            </summary>
            <param name="p"></param>
            <param name="pt"></param>
            <returns> 
            <c>true</c> true if
            the point is a vertex of the line or lies in the interior of a line
            segment in the linestring.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.CGAlgorithms.IsCCW(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Computes whether a ring defined by an array of <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/>s is oriented counter-clockwise.
            The list of points is assumed to have the first and last points equal.
            This will handle coordinate lists which contain repeated points.
            This algorithm is only guaranteed to work with valid rings.
            If the ring is invalid (e.g. self-crosses or touches),
            the computed result may not be correct.
            </summary>&gt;
            <param name="ring"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.CGAlgorithms.ComputeOrientation(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            Computes the orientation of a point q to the directed line segment p1-p2.
            The orientation of a point relative to a directed line segment indicates
            which way you turn to get to q after travelling from p1 to p2.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="q"></param>
            <returns> 
            1 if q is counter-clockwise from p1-p2,
            -1 if q is clockwise from p1-p2,
            0 if q is collinear with p1-p2-
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.CGAlgorithms.DistancePointLine(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary> 
            Computes the distance from a point p to a line segment AB.
            Note: NON-ROBUST!
            </summary>
            <param name="p">The point to compute the distance for.</param>
            <param name="A">One point of the line.</param>
            <param name="B">Another point of the line (must be different to A).</param>
            <returns> The distance from p to line segment AB.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.CGAlgorithms.DistancePointLinePerpendicular(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary> 
            Computes the perpendicular distance from a point p
            to the (infinite) line containing the points AB
            </summary>
            <param name="p">The point to compute the distance for.</param>
            <param name="A">One point of the line.</param>
            <param name="B">Another point of the line (must be different to A).</param>
            <returns>The perpendicular distance from p to line AB.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.CGAlgorithms.DistanceLineLine(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary> 
            Computes the distance from a line segment AB to a line segment CD.
            Note: NON-ROBUST!
            </summary>
            <param name="A">A point of one line.</param>
            <param name="B">The second point of the line (must be different to A).</param>
            <param name="C">One point of the line.</param>
            <param name="D">Another point of the line (must be different to A).</param>
            <returns>The distance from line segment AB to line segment CD.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.CGAlgorithms.SignedArea(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Returns the signed area for a ring.  The area is positive ifthe ring is oriented CW.
            </summary>
            <param name="ring"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.CGAlgorithms.Length(GeoAPI.Geometries.ICoordinateSequence)">
            <summary> 
            Computes the length of a linestring specified by a sequence of points.
            </summary>
            <param name="pts">The points specifying the linestring.</param>
            <returns>The length of the linestring.</returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Algorithm.CentroidPoint">
            <summary> 
            Computes the centroid of a point point.
            Algorithm:
            Compute the average of all points.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.CentroidPoint.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.CentroidPoint.Add(GeoAPI.Geometries.IGeometry)">
            <summary> 
            Adds the point(s) defined by a Geometry to the centroid total.
            If the point is not of dimension 0 it does not contribute to the centroid.
            </summary>
            <param name="geom">The point to add.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.CentroidPoint.Add(GeoAPI.Geometries.ICoordinate)">
            <summary> 
            Adds the length defined by a coordinate.
            </summary>
            <param name="pt">A coordinate.</param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Algorithm.CentroidPoint.Centroid">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Utilities.Stopwatch">
            <summary>
            Implements a timer function which can compute
            elapsed time as well as split times.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.Stopwatch.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.Stopwatch.Start">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Utilities.Stopwatch.Time">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Utilities.Stopwatch.TimeAsString">
            <summary>
            
            </summary>
        </member>
        <member name="T:RTools_NTS.Util.StreamTokenizerUntermException">
            <summary>
            Exception class for unterminated tokens.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerUntermException.#ctor(System.String)">
            <summary>
            Construct with a particular message.
            </summary>
            <param name="msg">The message to store in this object.</param>
        </member>
        <member name="T:RTools_NTS.Util.StreamTokenizerUntermQuoteException">
            <summary>
            Exception class for unterminated quotes.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerUntermQuoteException.#ctor(System.String)">
            <summary>
            Construct with a particular message.
            </summary>
            <param name="msg">The message to store in this object.</param>
        </member>
        <member name="T:RTools_NTS.Util.StreamTokenizerUntermCommentException">
            <summary>
            Exception class for unterminated block comments.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerUntermCommentException.#ctor(System.String)">
            <summary>
            Construct with a particular message.
            </summary>
            <param name="msg">The message to store in this object.</param>
        </member>
        <member name="T:RTools_NTS.Util.CharTypeBits">
            <summary>
            Bitwise enumeration for character types.
            </summary>
        </member>
        <member name="F:RTools_NTS.Util.CharTypeBits.Word">
            <summary>word characters (usually alpha, digits, and domain specific)</summary>
        </member>
        <member name="F:RTools_NTS.Util.CharTypeBits.Comment">
            <summary># or something for line comments</summary>
        </member>
        <member name="F:RTools_NTS.Util.CharTypeBits.Whitespace">
            <summary>whitespace</summary>
        </member>
        <member name="F:RTools_NTS.Util.CharTypeBits.Quote">
            <summary>' or " type</summary>
        </member>
        <member name="F:RTools_NTS.Util.CharTypeBits.Digit">
            <summary>usually 0 to 9</summary>
        </member>
        <member name="F:RTools_NTS.Util.CharTypeBits.HexDigit">
            <summary>usually 0 to 9, a-f and A-F</summary>
        </member>
        <member name="F:RTools_NTS.Util.CharTypeBits.Eof">
            <summary>eof char</summary>
        </member>
        <member name="T:RTools_NTS.Util.StreamTokenizerSettings">
            <summary>
            This contains the settings that control the behavior of the tokenizer.
            This is separated from the StreamTokenizer so that common settings
            are easy to package and keep together.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.#ctor(RTools_NTS.Util.StreamTokenizerSettings)">
            <summary>
            Copy constructor.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.Copy(RTools_NTS.Util.StreamTokenizerSettings)">
            <summary>
            Sets this object to be the same as the specified object.
            Note that some settings which are entirely embodied by the character
            type table.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.SetDefaults">
            <summary>
            Setup default parse behavior.
            This resets to same behavior as on construction.
            </summary>
            <returns>bool - true for success.</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.SetupForCodeParse">
            <summary>
            Apply settings which are commonly used for code parsing
            C-endCapStyle code, including C++, C#, and Java.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.ResetCharTypeTable">
            <summary>
            Clear the character type settings.  This leaves them unset,
            as opposed to the default.  Use SetDefaults() for default
            settings.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.WordChar(System.Int32)">
            <summary>
            Specify that a particular character is a word character.
            Character table type manipulation method.
            This adds the type to the char(s), rather
            than overwriting other types.
            </summary>
            <param name="c">The character.</param>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.WordChars(System.Int32,System.Int32)">
            <summary>
            Specify that a range of characters are word characters.
            Character table type manipulation method.
            This adds the type to the char(s), rather
            than overwriting other types.
            </summary>
            <param name="startChar">First character.</param>
            <param name="endChar">Last character.</param>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.WordChars(System.String)">
            <summary>
            Specify that a string of characters are word characters.
            Character table type manipulation method.
            This adds the type to the char(s), rather
            than overwriting other types.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.WhitespaceChar(System.Int32)">
            <summary>
            Specify that a character is a whitespace character.
            Character table type manipulation method.
            This type is exclusive with other types.
            </summary>
            <param name="c">The character.</param>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.WhitespaceChars(System.Int32,System.Int32)">
            <summary>
            Specify that a range of characters are whitespace characters.
            Character table type manipulation method.
            This adds the characteristic to the char(s), rather
            than overwriting other characteristics.
            </summary>
            <param name="startChar">First character.</param>
            <param name="endChar">Last character.</param>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.OrdinaryChars(System.Int32,System.Int32)">
            <summary>
            Remove other type settings from a range of characters.
            Character table type manipulation method.
            </summary>
            <param name="startChar"></param>
            <param name="endChar"></param>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.OrdinaryChar(System.Int32)">
            <summary>
            Remove other type settings from a character.
            Character table type manipulation method.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.CommentChar(System.Int32)">
            <summary>
            Specify that a particular character is a comment-starting character.
            Character table type manipulation method.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.QuoteChar(System.Int32)">
            <summary>
            Specify that a particular character is a quote character.
            Character table type manipulation method.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.CharTypeToString(System.Byte)">
            <summary>
            Return a string representation of a character type setting.
            Since the type setting is bitwise encoded, a character
            can have more than one type.
            </summary>
            <param name="ctype">The character type byte.</param>
            <returns>The string representation of the type flags.</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.IsCharType(System.Byte,RTools_NTS.Util.CharTypeBits)">
            <summary>
            Check whether the specified char type byte has a 
            particular type flag set.
            </summary>
            <param name="ctype">The char type byte.</param>
            <param name="type">The CharTypeBits entry to compare to.</param>
            <returns>bool - true or false</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.IsCharType(System.Char,RTools_NTS.Util.CharTypeBits)">
            <summary>
            Check whether the specified char has a 
            particular type flag set.
            </summary>
            <param name="c">The character.</param>
            <param name="type">The CharTypeBits entry to compare to.</param>
            <returns>bool - true or false</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.IsCharType(System.Int32,RTools_NTS.Util.CharTypeBits)">
            <summary>
            Check whether the specified char has a 
            particular type flag set.
            </summary>
            <param name="c">The character.</param>
            <param name="type">The CharTypeBits entry to compare to.</param>
            <returns>bool - true or false</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.Display">
            <summary>
            Display the state of this object.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizerSettings.Display(System.String)">
            <summary>
            Display the state of this object, with a per-line prefix.
            </summary>
            <param name="prefix">The pre-line prefix.</param>
        </member>
        <member name="P:RTools_NTS.Util.StreamTokenizerSettings.CharTypes">
            <summary>
            This is the character type table.  Each byte is bitwise encoded
            with the character attributes, such as whether that character is
            word or whitespace.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.StreamTokenizerSettings.GrabWhitespace">
            <summary>
            Whether or not to return whitespace tokens.  If not, they're ignored.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.StreamTokenizerSettings.GrabEol">
            <summary>
            Whether or not to return EolTokens on end of line.  Eol tokens will not
            break up other tokens which can be multi-line.  For example block comments 
            and quotes will not be broken by Eol tokens.  Therefore the number of
            Eol tokens does not give you the line count of a stream.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.StreamTokenizerSettings.SlashSlashComments">
            <summary>
            Whether or not to look for // comments
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.StreamTokenizerSettings.SlashStarComments">
            <summary>
            Whether or not to look for /* */ block comments.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.StreamTokenizerSettings.GrabComments">
            <summary>
            Whether or not to return comments.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.StreamTokenizerSettings.DoUntermCheck">
            <summary>
            Whether or not to check for unterminated quotes and block comments.
            If true, and one is encoutered, an exception is thrown of the appropriate type.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.StreamTokenizerSettings.ParseNumbers">
            <summary>
            Whether or not digits are specified as Digit type in the
            character table.
            This setting is based on the character types table, so this
            setting interacts with character type table manipulation.
            This setting may become incorrect if you modify the character
            types table directly.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.StreamTokenizerSettings.ParseHexNumbers">
            <summary>
            Whether or not to parse Hex (0xABCD...) numbers.
            This setting is based on the character types table, so this
            setting interacts with character type table manipulation.
            </summary>
        </member>
        <member name="T:RTools_NTS.Util.StreamTokenizer">
            <summary>
            A StreamTokenizer similar to Java's.  This breaks an input stream
            (coming from a TextReader) into Tokens based on various settings.  The settings
            are stored in the TokenizerSettings property, which is a
            StreamTokenizerSettings instance.
            </summary>
            <remarks>
            <para>
            This is configurable in that you can modify TokenizerSettings.CharTypes[] array
            to specify which characters are which type, along with other settings
            such as whether to look for comments or not.
            </para>
            <para>
            WARNING: This is not internationalized.  This treats all characters beyond
            the 7-bit ASCII range (decimal 127) as Word characters.
            </para>
            <para>
            There are two main ways to use this: 1) Parse the entire stream at
            once and get an ArrayList of Tokens (see the Tokenize* methods), 
            and 2) call NextToken() successively.
            This reads from a TextReader, which you can set directly, and this
            also provides some convenient methods to parse files and strings.
            This returns an Eof token if the end of the input is reached.
            </para>
            <para>
            Here's an example of the NextToken() endCapStyle of use:
            <code>
            StreamTokenizer tokenizer = new StreamTokenizer();
            tokenizer.GrabWhitespace = true;
            tokenizer.Verbosity = VerbosityLevel.Debug; // just for debugging
            tokenizer.TextReader = File.OpenText(fileName);
            Token token;
            while (tokenizer.NextToken(out token)) log.Info("Token = '{0}'", token);
            </code>
            </para>
            <para>
            Here's an example of the Tokenize... endCapStyle of use:
            <code>
            StreamTokenizer tokenizer = new StreamTokenizer("some string");
            ArrayList tokens = new ArrayList();
            if (!tokenizer.Tokenize(tokens)) 
            { 
            	// error handling
            }
            foreach (Token t in tokens) Console.WriteLine("t = {0}", t);
            </code>
            </para>
            <para>
            Comment delimiters are hardcoded (// and /*), not affected by char type table.
            </para>
            <para>
            This sets line numbers in the tokens it produces.  These numbers are normally
            the line on which the token starts.
            There is one known caveat, and that is that when GrabWhitespace setting
            is true, and a whitespace token contains a newline, that token's line number
            will be set to the following line rather than the line on which the token
            started.
            </para>
            </remarks>
        </member>
        <member name="F:RTools_NTS.Util.StreamTokenizer.NChars">
            <summary>
            This is the number of characters in the character table.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.#ctor(System.IO.TextReader)">
            <summary>
            Construct and set this object's TextReader to the one specified.
            </summary>
            <param name="sr">The TextReader to read from.</param>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.#ctor(System.String)">
            <summary>
            Construct and set a string to tokenize.
            </summary>
            <param name="str">The string to tokenize.</param>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.Initialize">
            <summary>
            Utility function, things common to constructors.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.InitializeStream">
            <summary>
            Clear the stream settings.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.Display">
            <summary>
            Display the state of this object.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.Display(System.String)">
            <summary>
            Display the state of this object, with a per-line prefix.
            </summary>
            <param name="prefix">The pre-line prefix.</param>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.PickNextState(System.Byte,System.Int32)">
            <summary>
            Pick the next state given just a single character.  This is used
            at the start of a new token.
            </summary>
            <param name="ctype">The type of the character.</param>
            <param name="c">The character.</param>
            <returns>The state.</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.PickNextState(System.Byte,System.Int32,RTools_NTS.Util.StreamTokenizer.NextTokenState)">
            <summary>
            Pick the next state given just a single character.  This is used
            at the start of a new token.
            </summary>
            <param name="ctype">The type of the character.</param>
            <param name="c">The character.</param>
            <param name="excludeState">Exclude this state from the possible next state.</param>
            <returns>The state.</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.GetNextChar">
            <summary>
            Read the next character from the stream, or from backString
            if we backed up.
            </summary>
            <returns>The next character.</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.NextToken(RTools_NTS.Util.Token@)">
            <summary>
            Get the next token.  The last token will be an EofToken unless
            there's an unterminated quote or unterminated block comment
            and Settings.DoUntermCheck is true, in which case this throws
            an exception of type StreamTokenizerUntermException or sub-class.
            </summary>
            <param name="token">The output token.</param>
            <returns>bool - true for success, false for failure.</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.GrabInt(RTools_NTS.Util.CharBuffer,System.Boolean,System.Char@)">
            <summary>
            Starting from current stream location, scan forward
            over an int.  Determine whether it's an integer or not.  If so, 
            push the integer characters to the specified CharBuffer.  
            If not, put them in backString (essentially leave the
            stream as it was) and return false.
            <para>
            If it was an int, the stream is left 1 character after the
            end of the int, and that character is output in the thisChar parameter.
            </para>
            <para>The formats for integers are: 1, +1, and -1</para>
            The + and - signs are included in the output buffer.
            </summary>
            <param name="sb">The CharBuffer to append to.</param>
            <param name="allowPlus">Whether or not to consider + to be part
            of an integer.</param>
            <param name="thisChar">The last character read by this method.</param>
            <returns>true for parsed an int, false for not an int</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.Tokenize(System.Collections.ArrayList)">
            <summary>
            Parse the rest of the stream and put all the tokens
            in the input ArrayList. This resets the line number to 1.
            </summary>
            <param name="tokens">The ArrayList to append to.</param>
            <returns>bool - true for success</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.TokenizeReader(System.IO.TextReader,System.Collections.ArrayList)">
            <summary>
            Parse all tokens from the specified TextReader, put
            them into the input ArrayList.
            </summary>
            <param name="tr">The TextReader to read from.</param>
            <param name="tokens">The ArrayList to append to.</param>
            <returns>bool - true for success, false for failure.</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.TokenizeFile(System.String,System.Collections.ArrayList)">
            <summary>
            Parse all tokens from the specified file, put
            them into the input ArrayList.
            </summary>
            <param name="fileName">The file to read.</param>
            <param name="tokens">The ArrayList to put tokens in.</param>
            <returns>bool - true for success, false for failure.</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.TokenizeString(System.String,System.Collections.ArrayList)">
            <summary>
            Parse all tokens from the specified string, put
            them into the input ArrayList.
            </summary>
            <param name="str"></param>
            <param name="tokens">The ArrayList to put tokens in.</param>
            <returns>bool - true for success, false for failure.</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.TokenizeStream(System.IO.Stream,System.Collections.ArrayList)">
            <summary>
            Parse all tokens from the specified Stream, put
            them into the input ArrayList.
            </summary>
            <param name="s"></param>
            <param name="tokens">The ArrayList to put tokens in.</param>
            <returns>bool - true for success, false for failure.</returns>
        </member>
        <member name="M:RTools_NTS.Util.StreamTokenizer.TokenizeFile(System.String)">
            <summary>
            Tokenize a file completely and return the tokens in a Token[].
            </summary>
            <param name="fileName">The file to tokenize.</param>
            <returns>A Token[] with all tokens.</returns>
        </member>
        <member name="P:RTools_NTS.Util.StreamTokenizer.TextReader">
            <summary>
            This is the TextReader that this object will read from.
            Set this to set the input reader for the parse.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.StreamTokenizer.Settings">
            <summary>
            The settings which govern the behavior of the tokenization.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.StreamTokenizer.Verbosity">
            <summary>
            The verbosity level for this object's Logger.
            </summary>
        </member>
        <member name="T:RTools_NTS.Util.StreamTokenizer.NextTokenState">
            <summary>
            The states of the state machine.
            </summary>
        </member>
        <member name="T:RTools_NTS.Util.CharBuffer">
            <summary>
            Buffer for characters.  This approximates StringBuilder
            but is designed to be faster for specific operations.
            This is about 30% faster for the operations I'm interested in
            (Append, Clear, Length, ToString).
            This trades off memory for speed.
            </summary>
            <remarks>
            <para>To make Remove from the head fast, this is implemented
            as a ring buffer.</para>
            <para>This uses head and tail indices into a fixed-size 
            array. This will grow the array as necessary.</para>
            </remarks>
        </member>
        <member name="M:RTools_NTS.Util.CharBuffer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.CharBuffer.#ctor(System.Int32)">
            <summary>
            Construct with a specific capacity.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:RTools_NTS.Util.CharBuffer.Grow(System.Int32)">
            <summary>
            Reallocate the buffer to be larger. For the new size, this
            uses the max of the requested length and double the current
            capacity.
            This does not shift, meaning it does not change the head or
            tail indices.
            </summary>
            <param name="requestedLen">The new requested length.</param>
        </member>
        <member name="M:RTools_NTS.Util.CharBuffer.CheckCapacity(System.Int32)">
            <summary>
            Ensure that we're set for the requested length by 
            potentially growing or shifting contents.
            </summary>
            <param name="requestedLength"></param>
        </member>
        <member name="M:RTools_NTS.Util.CharBuffer.ShiftToZero">
            <summary>
            Move the buffer contents such that headIndex becomes 0.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.CharBuffer.SetBuffer(System.Char[],System.Int32)">
            <summary>
            Overwrite this object's underlying buffer with the specified
            buffer.
            </summary>
            <param name="b">The character array.</param>
            <param name="len">The number of characters to consider filled
            in the input buffer.</param>
        </member>
        <member name="M:RTools_NTS.Util.CharBuffer.Append(System.Char)">
            <summary>
            Append a character to this buffer.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:RTools_NTS.Util.CharBuffer.Append(System.String)">
            <summary>
            Append a string to this buffer.
            </summary>
            <param name="s">The string to append.</param>
        </member>
        <member name="M:RTools_NTS.Util.CharBuffer.Append(RTools_NTS.Util.CharBuffer)">
            <summary>
            Append a string to this buffer.
            </summary>
            <param name="s">The string to append.</param>
        </member>
        <member name="M:RTools_NTS.Util.CharBuffer.Remove(System.Int32)">
            <summary>
            Remove a character at the specified index.
            </summary>
            <param name="i">The index of the character to remove.</param>
            <returns></returns>
        </member>
        <member name="M:RTools_NTS.Util.CharBuffer.Remove(System.Int32,System.Int32)">
            <summary>
            Remove a specified number of characters at the specified index.
            </summary>
            <param name="i">The index of the characters to remove.</param>
            <param name="n">The number of characters to remove.</param>
        </member>
        <member name="M:RTools_NTS.Util.CharBuffer.IndexOf(System.Char)">
            <summary>
            Find the first instance of a character in the buffer, and
            return its index.  This returns -1 if the character is
            not found.
            </summary>
            <param name="c">The character to find.</param>
            <returns>The index of the specified character, or -1
            for not found.</returns>
        </member>
        <member name="M:RTools_NTS.Util.CharBuffer.Clear">
            <summary>
            Empty the buffer.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.CharBuffer.ToString">
            <summary>
            Return the current contents as a string.
            </summary>
            <returns>The new string.</returns>
        </member>
        <member name="P:RTools_NTS.Util.CharBuffer.Length">
            <summary>
            Gets/Sets the number of characters in the character buffer.
            Increasing the length this way provides indeterminate results.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.CharBuffer.Capacity">
            <summary>
            Returns the capacity of this character buffer.
            </summary>
        </member>
        <member name="P:RTools_NTS.Util.CharBuffer.Item(System.Int32)">
            <summary>
            Indexer.
            </summary>
        </member>
        <member name="T:Iesi_NTS.Collections.Generic.HashedSet`1">
            <summary>
            Implements a <c>Set</c> based on a hash table.  This will give the best lookup, add, and remove
            performance for very large data-sets, but iteration will occur in no particular order.
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.HashedSet`1.#ctor">
            <summary>
            Creates a new set instance based on a hash table.
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.HashedSet`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Creates a new set instance based on a hash table and
            initializes it based on a collection of elements.
            </summary>
            <param name="initialValues">A collection of elements that defines the initial set contents.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Iesi_NTS.Collections.Generic.EnumerableWrapper`1" -->
        <member name="M:Iesi_NTS.Collections.Generic.EnumerableWrapper`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            
            </summary>
            <param name="innerEnumerable"></param>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.EnumerableWrapper`1.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.EnumerableWrapper`1.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.EnumerableWrapper`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.EnumerableWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Simplify.TaggedLinesSimplifier">
            <summary>
            Simplifies a collection of TaggedLineStrings, preserving topology
            (in the sense that no new intersections are introduced).
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.TaggedLinesSimplifier.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.TaggedLinesSimplifier.Simplify(System.Collections.IList)">
            <summary>
            Simplify a collection of <c>TaggedLineString</c>s.
            </summary>
            <param name="taggedLines">The collection of lines to simplify.</param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Simplify.TaggedLinesSimplifier.DistanceTolerance">
            <summary>
            Gets/Sets the distance tolerance for the simplification.
            Points closer than this tolerance to a simplified segment may
            be removed.
            </summary>        
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Simplify.LineSegmentIndex">
            <summary>
            An index of LineSegments.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.LineSegmentIndex.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.LineSegmentIndex.Add(GisSharpBlog.NetTopologySuite.Simplify.TaggedLineString)">
            <summary>
            
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.LineSegmentIndex.Add(GisSharpBlog.NetTopologySuite.Geometries.LineSegment)">
            <summary>
            
            </summary>
            <param name="seg"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.LineSegmentIndex.Remove(GisSharpBlog.NetTopologySuite.Geometries.LineSegment)">
            <summary>
            
            </summary>
            <param name="seg"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.LineSegmentIndex.Query(GisSharpBlog.NetTopologySuite.Geometries.LineSegment)">
            <summary>
            
            </summary>
            <param name="querySeg"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Simplify.LineSegmentVisitor">
            <summary>
            ItemVisitor subclass to reduce volume of query results.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.LineSegmentVisitor.#ctor(GisSharpBlog.NetTopologySuite.Geometries.LineSegment)">
            <summary>
            
            </summary>
            <param name="querySeg"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.LineSegmentVisitor.VisitItem(System.Object)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Simplify.LineSegmentVisitor.Items">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Simplify.DouglasPeuckerSimplifier">
            <summary>
            Simplifies a <c>Geometry</c> using the standard Douglas-Peucker algorithm.
            Ensures that any polygonal geometries returned are valid.
            Simple lines are not guaranteed to remain simple after simplification.
            Note that in general D-P does not preserve topology -
            e.g. polygons can be split, collapse to lines or disappear
            holes can be created or disappear,
            and lines can cross.
            To simplify point while preserving topology use TopologySafeSimplifier.
            (However, using D-P is significantly faster).
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.DouglasPeuckerSimplifier.Simplify(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            
            </summary>
            <param name="geom"></param>
            <param name="distanceTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.DouglasPeuckerSimplifier.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="inputGeom"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.DouglasPeuckerSimplifier.GetResultGeometry">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Simplify.DouglasPeuckerSimplifier.DistanceTolerance">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Simplify.DouglasPeuckerSimplifier.DPTransformer">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.DouglasPeuckerSimplifier.DPTransformer.#ctor(GisSharpBlog.NetTopologySuite.Simplify.DouglasPeuckerSimplifier)">
            <summary>
            
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.DouglasPeuckerSimplifier.DPTransformer.TransformCoordinates(GeoAPI.Geometries.ICoordinateSequence,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="coords"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.DouglasPeuckerSimplifier.DPTransformer.TransformPolygon(GeoAPI.Geometries.IPolygon,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.DouglasPeuckerSimplifier.DPTransformer.TransformMultiPolygon(GeoAPI.Geometries.IMultiPolygon,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.DouglasPeuckerSimplifier.DPTransformer.CreateValidArea(GeoAPI.Geometries.IGeometry)">
            <summary>
            Creates a valid area point from one that possibly has
            bad topology (i.e. self-intersections).
            Since buffer can handle invalid topology, but always returns
            valid point, constructing a 0-width buffer "corrects" the
            topology.
            Note this only works for area geometries, since buffer always returns
            areas.  This also may return empty geometries, if the input
            has no actual area.
            </summary>
            <param name="roughAreaGeom">An area point possibly containing self-intersections.</param>
            <returns>A valid area point.</returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Precision.SimpleGeometryPrecisionReducer">
            <summary>
            Reduces the precision of a <c>Geometry</c>
            according to the supplied {PrecisionModel}, without
            attempting to preserve valid topology.
            The topology of the resulting point may be invalid if
            topological collapse occurs due to coordinates being shifted.
            It is up to the client to check this and handle it if necessary.
            Collapses may not matter for some uses. An example
            is simplifying the input to the buffer algorithm.
            The buffer algorithm does not depend on the validity of the input point.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.SimpleGeometryPrecisionReducer.#ctor(GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel)">
            <summary>
            
            </summary>
            <param name="pm"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.SimpleGeometryPrecisionReducer.Reduce(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Precision.SimpleGeometryPrecisionReducer.RemoveCollapsedComponents">
            <summary>
            Sets whether the reduction will result in collapsed components
            being removed completely, or simply being collapsed to an (invalid)
            Geometry of the same type.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Precision.SimpleGeometryPrecisionReducer.ChangePrecisionModel">
            <summary>
            Gets/Sets whether the PrecisionModel of the new reduced Geometry
            will be changed to be the PrecisionModel supplied to
            specify the reduction.  
            The default is to not change the precision model.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Precision.SimpleGeometryPrecisionReducer.PrecisionReducerCoordinateOperation">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.SimpleGeometryPrecisionReducer.PrecisionReducerCoordinateOperation.#ctor(GisSharpBlog.NetTopologySuite.Precision.SimpleGeometryPrecisionReducer)">
            <summary>
            
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.SimpleGeometryPrecisionReducer.PrecisionReducerCoordinateOperation.Edit(GeoAPI.Geometries.ICoordinate[],GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="coordinates"></param>
            <param name="geom"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Planargraph.Algorithm.ConnectedSubgraphFinder">
            <summary>
            Finds all connected <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.Subgraph"/>s of a <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.PlanarGraph"/>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.Algorithm.ConnectedSubgraphFinder.#ctor(GisSharpBlog.NetTopologySuite.Planargraph.PlanarGraph)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.Algorithm.ConnectedSubgraphFinder"/> class.
            </summary>
            <param name="graph">The <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.PlanarGraph"/>.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.Algorithm.ConnectedSubgraphFinder.GetConnectedSubgraphs">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.Algorithm.ConnectedSubgraphFinder.AddReachable(GisSharpBlog.NetTopologySuite.Planargraph.Node,GisSharpBlog.NetTopologySuite.Planargraph.Subgraph)">
            <summary>
            Adds all nodes and edges reachable from this node to the subgraph.
            Uses an explicit stack to avoid a large depth of recursion.
            </summary>
            <param name="startNode"></param>
            <param name="subgraph"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.Algorithm.ConnectedSubgraphFinder.AddEdges(GisSharpBlog.NetTopologySuite.Planargraph.Node,System.Collections.Stack,GisSharpBlog.NetTopologySuite.Planargraph.Subgraph)">
            <summary>
            Adds the argument node and all its out edges to the subgraph.
            </summary>
            <param name="node"></param>
            <param name="nodeStack"></param>
            <param name="subgraph"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Polygonize.Polygonizer">
            <summary>
            Polygonizes a set of Geometrys which contain linework that
            represents the edges of a planar graph.
            Any dimension of Geometry is handled - the constituent linework is extracted
            to form the edges.
            The edges must be correctly noded; that is, they must only meet
            at their endpoints.  The Polygonizer will still run on incorrectly noded input
            but will not form polygons from incorrected noded edges.
            The Polygonizer reports the follow kinds of errors:
            Dangles - edges which have one or both ends which are not incident on another edge endpoint
            Cut Edges - edges which are connected at both ends but which do not form part of polygon
            Invalid Ring Lines - edges which form rings which are invalid
            (e.g. the component lines contain a self-intersection).
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.Polygonize.Polygonizer.lineStringAdder">
            <summary>
            Default factory.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.Polygonize.Polygonizer.graph">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.Polygonize.Polygonizer.dangles">
            <summary>
            Initialized with empty collections, in case nothing is computed
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.Polygonize.Polygonizer.cutEdges">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.Polygonize.Polygonizer.invalidRingLines">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.Polygonize.Polygonizer.holeList">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.Polygonize.Polygonizer.shellList">
            <summary>
            
            </summary>        
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.Polygonize.Polygonizer.polyList">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.Polygonizer.#ctor">
            <summary>
            Create a polygonizer with the same {GeometryFactory}
            as the input <c>Geometry</c>s.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.Polygonizer.Add(System.Collections.IList)">
            <summary>
            Add a collection of geometries to be polygonized.
            May be called multiple times.
            Any dimension of Geometry may be added;
            the constituent linework will be extracted and used.
            </summary>
            <param name="geomList">A list of <c>Geometry</c>s with linework to be polygonized.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.Polygonizer.Add(GeoAPI.Geometries.IGeometry)">
            <summary>
            Add a point to the linework to be polygonized.
            May be called multiple times.
            Any dimension of Geometry may be added;
            the constituent linework will be extracted and used
            </summary>
            <param name="g">A <c>Geometry</c> with linework to be polygonized.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.Polygonizer.Add(GeoAPI.Geometries.ILineString)">
            <summary>
            Add a linestring to the graph of polygon edges.
            </summary>
            <param name="line">The <c>LineString</c> to add.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.Polygonizer.Polygonize">
            <summary>
            Perform the polygonization, if it has not already been carried out.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.Polygonizer.FindValidRings(System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="edgeRingList"></param>
            <param name="validEdgeRingList"></param>
            <param name="invalidRingList"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.Polygonizer.FindShellsAndHoles(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="edgeRingList"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.Polygonizer.AssignHolesToShells(System.Collections.IList,System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="holeList"></param>
            <param name="shellList"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.Polygonizer.AssignHoleToShell(GisSharpBlog.NetTopologySuite.Operation.Polygonize.EdgeRing,System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="holeER"></param>
            <param name="shellList"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Polygonize.Polygonizer.Polygons">
            <summary>
            Compute and returns the list of polygons formed by the polygonization.
            </summary>        
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Polygonize.Polygonizer.Dangles">
            <summary> 
            Compute and returns the list of dangling lines found during polygonization.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Polygonize.Polygonizer.CutEdges">
            <summary>
            Compute and returns the list of cut edges found during polygonization.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Polygonize.Polygonizer.InvalidRingLines">
            <summary>
            Compute and returns the list of lines forming invalid rings found during polygonization.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Polygonize.Polygonizer.LineStringAdder">
            <summary>
            Add every linear element in a point into the polygonizer graph.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.Polygonizer.LineStringAdder.#ctor(GisSharpBlog.NetTopologySuite.Operation.Polygonize.Polygonizer)">
            <summary>
            
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.Polygonizer.LineStringAdder.Filter(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Overlay.EdgeSetNoder">
            <summary>
            Nodes a set of edges.
            Takes one or more sets of edges and constructs a
            new set of edges consisting of all the split edges created by
            noding the input edges together.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.EdgeSetNoder.#ctor(GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector)">
            <summary>
            
            </summary>
            <param name="li"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.EdgeSetNoder.AddEdges(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="edges"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Overlay.EdgeSetNoder.NodedEdges">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Noding.SimpleNoder">
            <summary>
            Nodes a set of <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s by
            performing a brute-force comparison of every segment to every other one.
            This has n^2 performance, so is too slow for use on large numbers of segments.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SimpleNoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SimpleNoder"/> class.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SimpleNoder.#ctor(GisSharpBlog.NetTopologySuite.Noding.ISegmentIntersector)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SimpleNoder"/> class.
            </summary>
            <param name="segInt"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SimpleNoder.GetNodedSubstrings">
            <summary>
            Returns a <see cref="T:System.Collections.IList"/> of fully noded <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s.
            The <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s have the same context as their parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SimpleNoder.ComputeNodes(System.Collections.IList)">
            <summary>
            Computes the noding for a collection of <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s.
            Some Noders may add all these nodes to the input <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s;
            others may only add some or none at all.
            </summary>
            <param name="inputSegStrings"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SimpleNoder.ComputeIntersects(GisSharpBlog.NetTopologySuite.Noding.SegmentString,GisSharpBlog.NetTopologySuite.Noding.SegmentString)">
            <summary>
            
            </summary>
            <param name="e0"></param>
            <param name="e1"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.GDBWriter">
            <summary>
            Writes features as ESRI GeoDatabase binary format in a SqlServer database,
            and converts this features to <coordinate>Geometry</coordinate> format.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GDBWriter.#ctor">
            <summary> 
            Creates a <coordinate>GDBWriter</coordinate> that creates objects using a basic GeometryFactory.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GDBWriter.Write(GeoAPI.Geometries.IGeometry)">
            <summary>
            Returns a byte array containing binary data for the given <c>Geometry</c>.
            </summary>
            <param name="geometry"></param>
            <returns>Byte[] data</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GDBWriter.Write(GeoAPI.Geometries.IGeometry,System.IO.Stream)">
            <summary>
            Writes a <c>Geometry</c> into a given <c>Stream</c>.
            </summary>
            <param name="geometry"></param>
            <param name="stream"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GDBWriter.Writer(GeoAPI.Geometries.IGeometry,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <param name="writer"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.GDBReader">
            <summary>
            Read features stored as ESRI GeoDatabase binary format in a SqlServer database,
            and converts this features to <coordinate>Geometry</coordinate> format.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GDBReader.#ctor">
            <summary> 
            Creates a <coordinate>GDBReader</coordinate> that creates objects using a basic GeometryFactory.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GDBReader.#ctor(GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory)">
            <summary>  
            Creates a <coordinate>GDBReader</coordinate> that creates objects using the given
            <coordinate>GeometryFactory</coordinate>.
            </summary>
            <param name="factory">The factory used to create <coordinate>Geometry</coordinate>s.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GDBReader.Read(System.IO.Stream)">
            <summary>
            Read VeDEx geometries.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GDBReader.Read(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GDBReader.Read(System.Byte[])">
            <summary>
            Read VeDEx geometries.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.ShapefileDataWriter">
            <summary>
            A simple test class for write a complete (shp, shx and dbf) shapefile structure.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataWriter.GetHeader(GisSharpBlog.NetTopologySuite.Features.Feature,System.Int32)">
            <summary>
            Gets the stub header.
            </summary>
            <param name="feature">The feature.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataWriter.GetHeader(System.String)">
            <summary>
            Gets the header from a dbf file.
            </summary>
            <param name="dbfFile">The DBF file.</param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataWriter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.IO.ShapefileDataWriter"/> class.
            </summary>
            <param name="fileName">Name of the file with or without any extension.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataWriter.#ctor(System.String,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.IO.ShapefileDataWriter"/> class.
            </summary>
            <param name="fileName">File path without any extension</param>
            <param name="geometryFactory"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataWriter.Write(System.Collections.IList)">
            <summary>
            Writes the specified feature collection.
            </summary>
            <param name="featureCollection">The feature collection.</param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.ShapefileDataWriter.Header">
            <summary>
            Gets or sets the header of the shapefile.
            </summary>
            <value>The header.</value>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.ShapefileDataWriter.GeometryFactory">
            <summary>
            Gets or sets the geometry factory.
            </summary>
            <value>The geometry factory.</value>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader">
            <summary>
            Creates a IDataReader that can be used to enumerate through an ESRI shape file.
            </summary>
            <remarks>	
            To create a ShapefileDataReader, use the static methods on the Shapefile class.
            </remarks>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.#ctor(System.String,GeoAPI.Geometries.IGeometryFactory)">
             <summary>
             Initializes a new instance of the ShapefileDataReader class.
             </summary>
             <param name="filename">The shapefile to read (minus the .shp extension)</param>
            <param name="geometryFactory">The GeometryFactory to use.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.NextResult">
            <summary>
            Advances the data reader to the next result, when reading the shapefile.
            </summary>
            <returns>false</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.Close">
            <summary>
            Closes the IDataReader 0bject.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.Read">
            <summary>
            Advances the IDataReader to the next record.
            </summary>
            <returns>true if there are more rows; otherwise, false.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.GetSchemaTable">
            <summary>
            Returns a DataTable that describes the column metadata of the IDataReader.
            </summary>
            <returns>A DataTable that describes the column metadata.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.GetInt32(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.GetValue(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.IsDBNull(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="fieldOffset"></param>
            <param name="buffer"></param>
            <param name="bufferoffset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.GetByte(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.GetFieldType(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.GetDecimal(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.GetValues(System.Object[])">
            <summary>
            
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.GetName(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.GetInt64(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.GetDouble(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.GetBoolean(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.GetGuid(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.GetDateTime(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.GetOrdinal(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.GetDataTypeName(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.GetFloat(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.GetData(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="fieldoffset"></param>
            <param name="buffer"></param>
            <param name="bufferoffset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.GetString(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.GetChar(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.GetInt16(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.CultureAwareCompare(System.String,System.String)">
            <summary>
            Implementation specific methods.
            </summary>
            <param name="strA"></param>
            <param name="strB"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.Geometry">
            <summary>
            Return geometry feature of the shapefile.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.RecordsAffected">
            <summary>
            Not applicable for this data reader.
            </summary>
            <value>Always -1 for this data reader.</value>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.IsClosed">
            <summary>
            Gets a value indicating whether the data reader is closed.
            </summary>
            <value>true if the data reader is closed; otherwise, false.</value>
            <remarks>IsClosed and RecordsAffected are the only properties that you can call after the IDataReader is closed.</remarks>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.Depth">
            <summary>
            Always return a value of zero since nesting is not supported.
            </summary>
            <value>The level of nesting.</value>
            <remarks>The outermost table has a depth of zero.</remarks>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.RecordCount">
            <summary>
            Gets the numbers of records in the Shapefile.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.Item(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.FieldCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.ShapeHeader">
            <summary>
            Gets the header for the Shapefile.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.DbaseHeader">
            <summary>
            Gets the header for the Dbase file.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.ShapefileDataReaderEnumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.ShapefileDataReaderEnumerator.#ctor(GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader)">
            <summary>
            
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.ShapefileDataReaderEnumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.ShapefileDataReaderEnumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.ShapefileDataReader.ShapefileDataReaderEnumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree">
            <summary>  
            A query-only R-tree created using the Sort-Tile-Recursive (STR) algorithm.
            For two-dimensional spatial data. 
            The STR packed R-tree is simple to implement and maximizes space
            utilization; that is, as many leaves as possible are filled to capacity.
            Overlap between nodes is far less than in a basic R-tree. However, once the
            tree has been built (explicitly or on the first call to #query), items may
            not be added or removed. 
            Described in: P. Rigaux, Michel Scholl and Agnes Voisard. Spatial Databases With
            Application To GIS. Morgan Kaufmann, San Francisco, 2002.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree.#ctor">
            <summary> 
            Constructs an STRtree with the default (10) node capacity.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree.#ctor(System.Int32)">
            <summary> 
            Constructs an STRtree with the given maximum number of child nodes that
            a node may have.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree.Avg(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree.CentreX(GeoAPI.Geometries.IEnvelope)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree.CentreY(GeoAPI.Geometries.IEnvelope)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree.CreateParentBoundables(System.Collections.IList,System.Int32)">
            <summary>
            Creates the parent level for the given child level. First, orders the items
            by the x-values of the midpoints, and groups them into vertical slices.
            For each slice, orders the items by the y-values of the midpoints, and
            group them into runs of size M (the node capacity). For each run, creates
            a new (parent) node.
            </summary>
            <param name="childBoundables"></param>
            <param name="newLevel"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree.CreateParentBoundablesFromVerticalSlices(System.Collections.IList[],System.Int32)">
            <summary>
            
            </summary>
            <param name="verticalSlices"></param>
            <param name="newLevel"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree.CreateParentBoundablesFromVerticalSlice(System.Collections.IList,System.Int32)">
            <summary>
            
            </summary>
            <param name="childBoundables"></param>
            <param name="newLevel"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree.VerticalSlices(System.Collections.IList,System.Int32)">
            <summary>
            
            </summary>
            <param name="childBoundables">Must be sorted by the x-value of the envelope midpoints.</param>
            <param name="sliceCount"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree.CreateNode(System.Int32)">
            <summary>
            
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree.Insert(GeoAPI.Geometries.IEnvelope,System.Object)">
            <summary>
            Inserts an item having the given bounds into the tree.
            </summary>
            <param name="itemEnv"></param>
            <param name="item"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree.Query(GeoAPI.Geometries.IEnvelope)">
            <summary>
            Returns items whose bounds intersect the given envelope.
            </summary>
            <param name="searchEnv"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree.Query(GeoAPI.Geometries.IEnvelope,GisSharpBlog.NetTopologySuite.Index.IItemVisitor)">
            <summary>
            Returns items whose bounds intersect the given envelope.
            </summary>
            <param name="searchEnv"></param>
            <param name="visitor"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree.Remove(GeoAPI.Geometries.IEnvelope,System.Object)">
            <summary> 
            Removes a single item from the tree.
            </summary>
            <param name="itemEnv">The Envelope of the item to remove.</param>
            <param name="item">The item to remove.</param>
            <returns><c>true</c> if the item was found.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree.GetComparer">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree.IntersectsOp">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree.AnonymousXComparerImpl">
            <summary>
            
            </summary>        
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree.AnonymousXComparerImpl.#ctor(GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree)">
            <summary>
            
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree.AnonymousXComparerImpl.Compare(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree.AnonymousYComparerImpl">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree.AnonymousYComparerImpl.#ctor(GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree)">
            <summary>
            
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree.AnonymousYComparerImpl.Compare(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree.AnonymousAbstractNodeImpl">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree.AnonymousAbstractNodeImpl.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="nodeCapacity"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree.AnonymousAbstractNodeImpl.ComputeBounds">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree.AnonymousIntersectsOpImpl">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree.AnonymousIntersectsOpImpl.#ctor(GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree)">
            <summary>
            
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.STRtree.AnonymousIntersectsOpImpl.Intersects(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="aBounds"></param>
            <param name="bBounds"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChainBuilder">
            <summary> 
            A MonotoneChainBuilder implements static functions
            to determine the monotone chains in a sequence of points.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChainBuilder.#ctor">
            <summary>
            Only static methods!
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChainBuilder.ToIntArray(System.Collections.IList)">
             <summary>
            
             </summary>
             <param name="list"></param>
             <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChainBuilder.GetChains(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            
            </summary>
            <param name="pts"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChainBuilder.GetChains(GeoAPI.Geometries.ICoordinate[],System.Object)">
            <summary>
            Return a list of the <c>MonotoneChain</c>s
            for the given list of coordinates.
            </summary>
            <param name="pts"></param>
            <param name="context"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChainBuilder.GetChainStartIndices(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Return an array containing lists of start/end indexes of the monotone chains
            for the given list of coordinates.
            The last entry in the array points to the end point of the point array,
            for use as a sentinel.
            </summary>
            <param name="pts"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChainBuilder.FindChainEnd(GeoAPI.Geometries.ICoordinate[],System.Int32)">
            <summary>
            
            </summary>
            <param name="pts"></param>
            <param name="start"></param>
            <returns> 
            The index of the last point in the monotone chain starting at <c>start</c>.
            </returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Bintree.Root">
            <summary> 
            The root node of a single <c>Bintree</c>.
            It is centred at the origin,
            and does not have a defined extent.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Root.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Root.Insert(GisSharpBlog.NetTopologySuite.Index.Bintree.Interval,System.Object)">
            <summary> 
            Insert an item into the tree this is the root of.
            </summary>
            <param name="itemInterval"></param>
            <param name="item"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Root.InsertContained(GisSharpBlog.NetTopologySuite.Index.Bintree.Node,GisSharpBlog.NetTopologySuite.Index.Bintree.Interval,System.Object)">
            <summary> 
            Insert an item which is known to be contained in the tree rooted at
            the given Node.  Lower levels of the tree will be created
            if necessary to hold the item.
            </summary>
            <param name="tree"></param>
            <param name="itemInterval"></param>
            <param name="item"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Root.IsSearchMatch(GisSharpBlog.NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            The root node matches all searches.
            </summary>
            <param name="interval"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector.IsAdjacentSegments(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="i1"></param>
            <param name="i2"></param>
            <returns></returns>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector.numTests">
            <summary>
            Testing only.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector.#ctor(GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="li"></param>
            <param name="includeProper"></param>
            <param name="recordIsolated"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector.SetBoundaryNodes(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            
            </summary>
            <param name="bdyNodes0"></param>
            <param name="bdyNodes1"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector.IsTrivialIntersection(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge,System.Int32,GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge,System.Int32)">
            <summary>
            A trivial intersection is an apparent self-intersection which in fact
            is simply the point shared by adjacent line segments.
            Note that closed edges require a special check for the point shared by the beginning
            and end segments.
            </summary>
            <param name="e0"></param>
            <param name="segIndex0"></param>
            <param name="e1"></param>
            <param name="segIndex1"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector.AddIntersections(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge,System.Int32,GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge,System.Int32)">
            <summary> 
            This method is called by clients of the EdgeIntersector class to test for and add
            intersections for two segments of the edges being intersected.
            Note that clients (such as MonotoneChainEdges) may choose not to intersect
            certain pairs of segments for efficiency reasons.
            </summary>
            <param name="e0"></param>
            <param name="segIndex0"></param>
            <param name="e1"></param>
            <param name="segIndex1"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector.IsBoundaryPoint(GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector,System.Collections.ICollection[])">
            <summary>
            
            </summary>
            <param name="li"></param>
            <param name="bdyNodes"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector.IsBoundaryPoint(GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector,System.Collections.ICollection)">
            <summary>
            
            </summary>
            <param name="li"></param>
            <param name="bdyNodes"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector.ProperIntersectionPoint">
            <returns> 
            The proper intersection point, or <c>null</c> if none was found.
            </returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector.HasIntersection">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector.HasProperIntersection">
            <summary>
            A proper intersection is an intersection which is interior to at least two
            line segments.  Note that a proper intersection is not necessarily
            in the interior of the entire Geometry, since another edge may have
            an endpoint equal to the intersection, which according to SFS semantics
            can result in the point being on the Boundary of the Geometry.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector.HasProperInteriorIntersection">
            <summary> 
            A proper interior intersection is a proper intersection which is not
            contained in the set of boundary nodes set for this SegmentIntersector.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.Utilities.PointExtracter">
            <summary> 
            Extracts all the 0-dimensional (<c>Point</c>) components from a <c>Geometry</c>.    
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.PointExtracter.GetPoints(GeoAPI.Geometries.IGeometry)">
            <summary> 
            Returns the Point components from a single point.
            If more than one point is to be processed, it is more
            efficient to create a single <c>PointExtracterFilter</c> instance
            and pass it to multiple geometries.
            </summary>
            <param name="geom"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.PointExtracter.#ctor(System.Collections.IList)">
            <summary> 
            Constructs a PointExtracterFilter with a list in which to store Points found.
            </summary>
            <param name="pts"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.PointExtracter.Filter(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Algorithm.PointLocator">
            <summary> 
            Computes the topological relationship (Location) of a single point to a Geometry.
            The algorithm obeys the SFS boundaryDetermination rule to correctly determine
            whether the point lies on the boundary or not.
            Note that instances of this class are not reentrant.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.PointLocator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Algorithm.PointLocator"/> class.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.PointLocator.Intersects(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.IGeometry)">
            <summary> 
            Convenience method to test a point for intersection with a Geometry
            </summary>
            <param name="p">The coordinate to test.</param>
            <param name="geom">The Geometry to test.</param>
            <returns><c>true</c> if the point is in the interior or boundary of the Geometry.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.PointLocator.Locate(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.IGeometry)">
            <summary> 
            Computes the topological relationship ({Location}) of a single point to a Geometry.
            It handles both single-element and multi-element Geometries.
            The algorithm for multi-part Geometries takes into account the boundaryDetermination rule.
            </summary>
            <returns>The Location of the point relative to the input Geometry.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.PointLocator.ComputeLocation(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="geom"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.PointLocator.UpdateLocationInfo(GeoAPI.Geometries.Locations)">
            <summary>
            
            </summary>
            <param name="loc"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.PointLocator.Locate(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ILineString)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.PointLocator.LocateInPolygonRing(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ILinearRing)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="ring"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.PointLocator.Locate(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.IPolygon)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="poly"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Algorithm.NotRepresentableException">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.NotRepresentableException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Algorithm.NonRobustLineIntersector">
            <summary> 
            A non-robust version of <c>LineIntersector</c>.
            </summary>   
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.NonRobustLineIntersector.IsSameSignAndNonZero(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns> 
            <c>true</c> if both numbers are positive or if both numbers are negative, 
            <c>false</c> if both numbers are zero.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.NonRobustLineIntersector.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.NonRobustLineIntersector.ComputeIntersection(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="p1"></param>
            <param name="p2"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.NonRobustLineIntersector.ComputeIntersect(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.NonRobustLineIntersector.ComputeCollinearIntersection(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.NonRobustLineIntersector.RParameter(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary> 
            RParameter computes the parameter for the point p
            in the parameterized equation
            of the line from p1 to p2.
            This is equal to the 'distance' of p along p1-p2.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Algorithm.InteriorPointLine">
            <summary>
            Computes a point in the interior of an linear point.
            Algorithm:
            Find an interior vertex which is closest to
            the centroid of the linestring.
            If there is no interior vertex, find the endpoint which is
            closest to the centroid.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.InteriorPointLine.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.InteriorPointLine.AddInterior(GeoAPI.Geometries.IGeometry)">
            <summary>
            Tests the interior vertices (if any)
            defined by a linear Geometry for the best inside point.
            If a Geometry is not of dimension 1 it is not tested.
            </summary>
            <param name="geom">The point to add.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.InteriorPointLine.AddInterior(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            
            </summary>
            <param name="pts"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.InteriorPointLine.AddEndpoints(GeoAPI.Geometries.IGeometry)">
            <summary> 
            Tests the endpoint vertices
            defined by a linear Geometry for the best inside point.
            If a Geometry is not of dimension 1 it is not tested.
            </summary>
            <param name="geom">The point to add.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.InteriorPointLine.AddEndpoints(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            
            </summary>
            <param name="pts"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.InteriorPointLine.Add(GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="point"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Algorithm.InteriorPointLine.InteriorPoint">
            <summary>
            
            </summary>
        </member>
        <member name="T:Iesi_NTS.Collections.Generic.ImmutableSet`1">
            <summary>
            <p>Implements an immutable (read-only) <c>Set</c> wrapper.</p>
            <p>Although this is advertised as immutable, it really isn't.  Anyone with access to the
            <c>basisSet</c> can still change the data-set.  So <c>GetHashCode()</c> is not implemented
            for this <c>Set</c>, as is the case for all <c>Set</c> implementations in this library.
            This design decision was based on the efficiency of not having to <c>Clone()</c> the 
            <c>basisSet</c> every time you wrap a mutable <c>Set</c>.</p>
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.ImmutableSet`1.#ctor(Iesi_NTS.Collections.Generic.ISet{`0})">
            <summary>
            Constructs an immutable (read-only) <c>Set</c> wrapper.
            </summary>
            <param name="basisSet">The <c>Set</c> that is wrapped.</param>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.ImmutableSet`1.Add(`0)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="o">The object to add to the set.</param>
            <returns><c>true</c> is the object was added, <c>false</c> if it was already present.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.ImmutableSet`1.AddAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds all the elements in the specified collection to the set if they are not already present.
            </summary>
            <param name="c">A collection of objects to add to the set.</param>
            <returns><c>true</c> is the set changed as a result of this operation, <c>false</c> if not.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.ImmutableSet`1.Clear">
            <summary>
            Removes all objects from the set.
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.ImmutableSet`1.Contains(`0)">
            <summary>
            Returns <c>true</c> if this set contains the specified element.
            </summary>
            <param name="o">The element to look for.</param>
            <returns><c>true</c> if this set contains the specified element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.ImmutableSet`1.ContainsAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Returns <c>true</c> if the set contains all the elements in the specified collection.
            </summary>
            <param name="c">A collection of objects.</param>
            <returns><c>true</c> if the set contains all the elements in the specified collection, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.ImmutableSet`1.Remove(`0)">
            <summary>
            Removes the specified element from the set.
            </summary>
            <param name="o">The element to be removed.</param>
            <returns><c>true</c> if the set contained the specified element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.ImmutableSet`1.RemoveAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Remove all the specified elements from this set, if they exist in this set.
            </summary>
            <param name="c">A collection of elements to remove.</param>
            <returns><c>true</c> if the set was modified as a result of this operation.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.ImmutableSet`1.RetainAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Retains only the elements in this set that are contained in the specified collection.
            </summary>
            <param name="c">Collection that defines the set of elements to be retained.</param>
            <returns><c>true</c> if this set changed as a result of this operation.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.ImmutableSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements in the <c>Set</c> to an array.  The type of array needs
            to be compatible with the objects in the <c>Set</c>, obviously.
            </summary>
            <param name="array">An array that will be the target of the copy operation.</param>
            <param name="index">The zero-based index where copying will start.</param>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.ImmutableSet`1.GetEnumerator">
            <summary>
            Gets an enumerator for the elements in the <c>Set</c>.
            </summary>
            <returns>An <c>IEnumerator</c> over the elements in the <c>Set</c>.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.ImmutableSet`1.Clone">
            <summary>
            Returns a clone of the <c>Set</c> instance.  
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.ImmutableSet`1.Union(Iesi_NTS.Collections.Generic.ISet{`0})">
            <summary>
            Performs a "union" of the two sets, where all the elements
            in both sets are present.  That is, the element is included if it is in either <c>a</c> or <c>b</c>.
            Neither this set nor the input set are modified during the operation.  The return value
            is a <c>Clone()</c> of this set with the extra elements added in.
            </summary>
            <param name="a">A collection of elements.</param>
            <returns>A new <c>Set</c> containing the union of this <c>Set</c> with the specified collection.
            Neither of the input objects is modified by the union.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.ImmutableSet`1.Intersect(Iesi_NTS.Collections.Generic.ISet{`0})">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain.  That is, the element is included if it exists in
            both sets.  The <c>Intersect()</c> operation does not modify the input sets.  It returns
            a <c>Clone()</c> of this set with the appropriate elements removed.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>The intersection of this set with <c>a</c>.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.ImmutableSet`1.Minus(Iesi_NTS.Collections.Generic.ISet{`0})">
            <summary>
            Performs a "minus" of set <c>b</c> from set <c>a</c>.  This returns a set of all
            the elements in set <c>a</c>, removing the elements that are also in set <c>b</c>.
            The original sets are not modified during this operation.  The result set is a <c>Clone()</c>
            of this <c>Set</c> containing the elements from the operation.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>A set containing the elements from this set with the elements in <c>a</c> removed.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.Generic.ImmutableSet`1.ExclusiveOr(Iesi_NTS.Collections.Generic.ISet{`0})">
            <summary>
            Performs an "exclusive-or" of the two sets, keeping only the elements that
            are in one of the sets, but not in both.  The original sets are not modified
            during this operation.  The result set is a <c>Clone()</c> of this set containing
            the elements from the exclusive-or operation.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>A set containing the result of <c>a ^ b</c>.</returns>
        </member>
        <member name="P:Iesi_NTS.Collections.Generic.ImmutableSet`1.IsEmpty">
            <summary>
            Returns <c>true</c> if this set contains no elements.
            </summary>
        </member>
        <member name="P:Iesi_NTS.Collections.Generic.ImmutableSet`1.Count">
            <summary>
            The number of elements contained in this collection.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Valid.RepeatedPointTester">
            <summary> 
            Implements the appropriate checks for repeated points
            (consecutive identical coordinates) as defined in the
            NTS spec.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.RepeatedPointTester.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.RepeatedPointTester.HasRepeatedPoint(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.RepeatedPointTester.HasRepeatedPoint(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            
            </summary>
            <param name="coord"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.RepeatedPointTester.HasRepeatedPoint(GeoAPI.Geometries.IPolygon)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.RepeatedPointTester.HasRepeatedPoint(GeoAPI.Geometries.IGeometryCollection)">
            <summary>
            
            </summary>
            <param name="gc"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Valid.RepeatedPointTester.Coordinate">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeGraph">
            <summary>
            Represents a planar graph of edges that can be used to compute a
            polygonization, and implements the algorithms to compute the
            EdgeRings formed by the graph.
            The marked flag on DirectedEdges is used to indicate that a directed edge
            has be logically deleted from the graph.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeGraph.GetDegreeNonDeleted(GisSharpBlog.NetTopologySuite.Planargraph.Node)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeGraph.GetDegree(GisSharpBlog.NetTopologySuite.Planargraph.Node,System.Int64)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeGraph.DeleteAllEdges(GisSharpBlog.NetTopologySuite.Planargraph.Node)">
            <summary>
            Deletes all edges at a node.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeGraph.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Create a new polygonization graph.
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeGraph.AddEdge(GeoAPI.Geometries.ILineString)">
            <summary>
            Add a <c>LineString</c> forming an edge of the polygon graph.
            </summary>
            <param name="line">The line to add.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeGraph.GetNode(GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeGraph.ComputeNextCWEdges">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeGraph.ConvertMaximalToMinimalEdgeRings(System.Collections.IList)">
            <summary>
            Convert the maximal edge rings found by the initial graph traversal
            into the minimal edge rings required by NTS polygon topology rules.
            </summary>
            <param name="ringEdges">The list of start edges for the edgeRings to convert.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeGraph.FindIntersectionNodes(GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeDirectedEdge,System.Int64)">
            <summary>
            Finds all nodes in a maximal edgering which are self-intersection nodes
            </summary>
            <param name="startDE"></param>
            <param name="label"></param>
            <returns> 
            The list of intersection nodes found,
            or null if no intersection nodes were found.       
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeGraph.GetEdgeRings">
            <summary>
            Computes the EdgeRings formed by the edges in this graph.        
            </summary>
            <returns>A list of the{EdgeRings found by the polygonization process.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeGraph.FindLabeledEdgeRings(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="dirEdges">A List of the DirectedEdges in the graph.</param>
            <returns>A List of DirectedEdges, one for each edge ring found.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeGraph.DeleteCutEdges">
            <summary>
            Finds and removes all cut edges from the graph.
            </summary>
            <returns>A list of the <c>LineString</c>s forming the removed cut edges.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeGraph.Label(System.Collections.IList,System.Int64)">
            <summary>
            
            </summary>
            <param name="dirEdges"></param>
            <param name="label"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeGraph.ComputeNextCWEdges(GisSharpBlog.NetTopologySuite.Planargraph.Node)">
            <summary>
            
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeGraph.ComputeNextCCWEdges(GisSharpBlog.NetTopologySuite.Planargraph.Node,System.Int64)">
            <summary>
            Computes the next edge pointers going CCW around the given node, for the
            given edgering label.
            This algorithm has the effect of converting maximal edgerings into minimal edgerings
            </summary>
            <param name="node"></param>
            <param name="label"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeGraph.FindDirEdgesInRing(GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeDirectedEdge)">
            <summary>
            Traverse a ring of DirectedEdges, accumulating them into a list.
            This assumes that all dangling directed edges have been removed
            from the graph, so that there is always a next dirEdge.
            </summary>
            <param name="startDE">The DirectedEdge to start traversing at.</param>
            <returns>A List of DirectedEdges that form a ring.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeGraph.FindEdgeRing(GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeDirectedEdge)">
            <summary>
            
            </summary>
            <param name="startDE"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeGraph.DeleteDangles">
            <summary>
            Marks all edges from the graph which are "dangles".
            Dangles are which are incident on a node with degree 1.
            This process is recursive, since removing a dangling edge
            may result in another edge becoming a dangle.
            In order to handle large recursion depths efficiently,
            an explicit recursion stack is used.
            </summary>
            <returns>A List containing the LineStrings that formed dangles.</returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeEdge">
            <summary>
            An edge of a polygonization graph.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeEdge.#ctor(GeoAPI.Geometries.ILineString)">
            <summary>
            
            </summary>
            <param name="line"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeEdge.Line">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.SnapIfNeededOverlayOp">
            <summary>
            Performs an overlay operation using snapping and enhanced precision
            to improve the robustness of the result.
            This class only uses snapping
            if an error is detected when running the standard JTS overlay code.
            Errors detected include thrown exceptions 
            (in particular, <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.TopologyException"/>)
            and invalid overlay computations.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.SnapIfNeededOverlayOp.Overlay(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry,GisSharpBlog.NetTopologySuite.Operation.Overlay.SpatialFunction)">
            <summary>
            
            </summary>
            <param name="g0"></param>
            <param name="g1"></param>
            <param name="opCode"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.SnapIfNeededOverlayOp.intersection(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g0"></param>
            <param name="g1"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.SnapIfNeededOverlayOp.union(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g0"></param>
            <param name="g1"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.SnapIfNeededOverlayOp.difference(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g0"></param>
            <param name="g1"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.SnapIfNeededOverlayOp.symDifference(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g0"></param>
            <param name="g1"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.SnapIfNeededOverlayOp.#ctor(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g1"></param>
            <param name="g2"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.SnapIfNeededOverlayOp.GetResultGeometry(GisSharpBlog.NetTopologySuite.Operation.Overlay.SpatialFunction)">
            <summary>
            
            </summary>
            <param name="opCode"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Overlay.SpatialFunction">
            <summary>
            The spatial functions supported by this class.
            These operations implement various bool combinations of the resultants of the overlay.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.Overlay.SpatialFunction.Intersection">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.Overlay.SpatialFunction.Union">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.Overlay.SpatialFunction.Difference">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.Overlay.SpatialFunction.SymDifference">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Overlay.OverlayOp">
            <summary>
            Computes the overlay of two <c>Geometry</c>s.  The overlay
            can be used to determine any bool combination of the geometries.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.OverlayOp.Overlay(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry,GisSharpBlog.NetTopologySuite.Operation.Overlay.SpatialFunction)">
            <summary>
            
            </summary>
            <param name="geom0"></param>
            <param name="geom1"></param>
            <param name="opCode"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.OverlayOp.IsResultOfOp(GisSharpBlog.NetTopologySuite.GeometriesGraph.Label,GisSharpBlog.NetTopologySuite.Operation.Overlay.SpatialFunction)">
            <summary>
            
            </summary>
            <param name="label"></param>
            <param name="opCode"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.OverlayOp.IsResultOfOp(GeoAPI.Geometries.Locations,GeoAPI.Geometries.Locations,GisSharpBlog.NetTopologySuite.Operation.Overlay.SpatialFunction)">
            <summary>
            This method will handle arguments of Location.NULL correctly.
            </summary>
            <returns><c>true</c> if the locations correspond to the opCode.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.OverlayOp.#ctor(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g0"></param>
            <param name="g1"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.OverlayOp.GetResultGeometry(GisSharpBlog.NetTopologySuite.Operation.Overlay.SpatialFunction)">
            <summary>
            
            </summary>
            <param name="funcCode"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.OverlayOp.ComputeOverlay(GisSharpBlog.NetTopologySuite.Operation.Overlay.SpatialFunction)">
            <summary>
            
            </summary>
            <param name="opCode"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.OverlayOp.InsertUniqueEdges(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="edges"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.OverlayOp.InsertUniqueEdge(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge)">
            <summary>
            Insert an edge from one of the noded input graphs.
            Checks edges that are inserted to see if an
            identical edge already exists.
            If so, the edge is not inserted, but its label is merged
            with the existing edge.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.OverlayOp.ComputeLabelsFromDepths">
            <summary>
            Update the labels for edges according to their depths.
            For each edge, the depths are first normalized.
            Then, if the depths for the edge are equal,
            this edge must have collapsed into a line edge.
            If the depths are not equal, update the label
            with the locations corresponding to the depths
            (i.e. a depth of 0 corresponds to a Location of Exterior,
            a depth of 1 corresponds to Interior)
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.OverlayOp.ReplaceCollapsedEdges">
            <summary>
            If edges which have undergone dimensional collapse are found,
            replace them with a new edge which is a L edge
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.OverlayOp.CopyPoints(System.Int32)">
            <summary>
            Copy all nodes from an arg point into this graph.
            The node label in the arg point overrides any previously computed
            label for that argIndex.
            (E.g. a node may be an intersection node with
            a previously computed label of Boundary,
            but in the original arg Geometry it is actually
            in the interior due to the Boundary Determination Rule)
            </summary>
            <param name="argIndex"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.OverlayOp.ComputeLabelling">
            <summary> 
            Compute initial labelling for all DirectedEdges at each node.
            In this step, DirectedEdges will acquire a complete labelling
            (i.e. one with labels for both Geometries)
            only if they
            are incident on a node which has edges for both Geometries
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.OverlayOp.MergeSymLabels">
            <summary> 
            For nodes which have edges from only one Geometry incident on them,
            the previous step will have left their dirEdges with no labelling for the other
            Geometry.  However, the sym dirEdge may have a labelling for the other
            Geometry, so merge the two labels.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.OverlayOp.UpdateNodeLabelling">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.OverlayOp.LabelIncompleteNodes">
            <summary>
            Incomplete nodes are nodes whose labels are incomplete.
            (e.g. the location for one Geometry is null).
            These are either isolated nodes,
            or nodes which have edges from only a single Geometry incident on them.
            Isolated nodes are found because nodes in one graph which don't intersect
            nodes in the other are not completely labelled by the initial process
            of adding nodes to the nodeList.
            To complete the labelling we need to check for nodes that lie in the
            interior of edges, and in the interior of areas.
            When each node labelling is completed, the labelling of the incident
            edges is updated, to complete their labelling as well.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.OverlayOp.LabelIncompleteNode(GisSharpBlog.NetTopologySuite.GeometriesGraph.Node,System.Int32)">
            <summary>
            Label an isolated node with its relationship to the target point.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.OverlayOp.FindResultAreaEdges(GisSharpBlog.NetTopologySuite.Operation.Overlay.SpatialFunction)">
            <summary>
            Find all edges whose label indicates that they are in the result area(s),
            according to the operation being performed.  Since we want polygon shells to be
            oriented CW, choose dirEdges with the interior of the result on the RHS.
            Mark them as being in the result.
            Interior Area edges are the result of dimensional collapses.
            They do not form part of the result area boundary.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.OverlayOp.CancelDuplicateResultEdges">
            <summary>
            If both a dirEdge and its sym are marked as being in the result, cancel
            them out.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.OverlayOp.IsCoveredByLA(GeoAPI.Geometries.ICoordinate)">
            <summary>
            This method is used to decide if a point node should be included in the result or not.
            </summary>
            <returns><c>true</c> if the coord point is covered by a result Line or Area point.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.OverlayOp.IsCoveredByA(GeoAPI.Geometries.ICoordinate)">
            <summary>
            This method is used to decide if an L edge should be included in the result or not.
            </summary>
            <returns><c>true</c> if the coord point is covered by a result Area point.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.OverlayOp.IsCovered(GeoAPI.Geometries.ICoordinate,System.Collections.IList)">
            <returns>
            <c>true</c> if the coord is located in the interior or boundary of
            a point in the list.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.OverlayOp.ComputeGeometry(System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="resultPointList"></param>
            <param name="resultLineList"></param>
            <param name="resultPolyList"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Overlay.OverlayOp.Graph">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Linemerge.EdgeString">
            <summary>
            A sequence of <c>LineMergeDirectedEdge</c>s forming one of the lines that will
            be output by the line-merging process.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.EdgeString.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Constructs an EdgeString with the given factory used to convert this EdgeString
            to a LineString.
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.EdgeString.Add(GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineMergeDirectedEdge)">
            <summary>
            Adds a directed edge which is known to form part of this line.
            </summary>
            <param name="directedEdge"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.EdgeString.ToLineString">
            <summary>
            Converts this EdgeString into a LineString.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Linemerge.EdgeString.Coordinates">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Noding.Snapround.MCIndexPointSnapper">
            <summary>
            "Snaps" all <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s in a <see cref="T:GisSharpBlog.NetTopologySuite.Index.ISpatialIndex"/> containing
            <see cref="T:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChain"/>s to a given <see cref="T:GisSharpBlog.NetTopologySuite.Noding.Snapround.HotPixel"/>.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Noding.Snapround.MCIndexPointSnapper.numberSnaps">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.MCIndexPointSnapper.#ctor(System.Collections.IList,GisSharpBlog.NetTopologySuite.Index.ISpatialIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Noding.Snapround.MCIndexPointSnapper"/> class.
            </summary>
            <param name="monoChains"></param>
            <param name="index"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.MCIndexPointSnapper.Snap(GisSharpBlog.NetTopologySuite.Noding.Snapround.HotPixel,GisSharpBlog.NetTopologySuite.Noding.SegmentString,System.Int32)">
            <summary>
            Snaps (nodes) all interacting segments to this hot pixel.
            The hot pixel may represent a vertex of an edge,
            in which case this routine uses the optimization
            of not noding the vertex itself
            </summary>
            <param name="hotPixel">The hot pixel to snap to.</param>
            <param name="parentEdge">The edge containing the vertex, if applicable, or <c>null</c>.</param>
            <param name="vertexIndex"></param>
            <returns><c>true</c> if a node was added for this pixel.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.MCIndexPointSnapper.Snap(GisSharpBlog.NetTopologySuite.Noding.Snapround.HotPixel)">
            <summary>
            
            </summary>
            <param name="hotPixel"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Noding.Snapround.MCIndexPointSnapper.QueryVisitor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.MCIndexPointSnapper.QueryVisitor.#ctor(GeoAPI.Geometries.IEnvelope,GisSharpBlog.NetTopologySuite.Noding.Snapround.MCIndexPointSnapper.HotPixelSnapAction)">
            <summary>
            
            </summary>
            <param name="env"></param>
            <param name="action"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.MCIndexPointSnapper.QueryVisitor.VisitItem(System.Object)">
            <summary>
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Noding.Snapround.MCIndexPointSnapper.HotPixelSnapAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.MCIndexPointSnapper.HotPixelSnapAction.#ctor(GisSharpBlog.NetTopologySuite.Noding.Snapround.HotPixel,GisSharpBlog.NetTopologySuite.Noding.SegmentString,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Noding.Snapround.MCIndexPointSnapper.HotPixelSnapAction"/> class.
            </summary>
            <param name="hotPixel"></param>
            <param name="parentEdge"></param>
            <param name="vertexIndex"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.MCIndexPointSnapper.HotPixelSnapAction.Select(GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChain,System.Int32)">
            <summary>
            
            </summary>
            <param name="mc"></param>
            <param name="startIndex"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Noding.Snapround.MCIndexPointSnapper.HotPixelSnapAction.IsNodeAdded">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Noding.ScaledNoder">
            <summary>
            Wraps a <see cref="T:GisSharpBlog.NetTopologySuite.Noding.INoder"/> and transforms its input into the integer domain.
            This is intended for use with Snap-Rounding noders,
            which typically are only intended to work in the integer domain.
            Offsets can be provided to increase the number of digits of available precision.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.ScaledNoder.#ctor(GisSharpBlog.NetTopologySuite.Noding.INoder,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Noding.ScaledNoder"/> class.
            </summary>
            <param name="noder"></param>
            <param name="scaleFactor"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.ScaledNoder.#ctor(GisSharpBlog.NetTopologySuite.Noding.INoder,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="noder"></param>
            <param name="scaleFactor"></param>
            <param name="offsetX"></param>
            <param name="offsetY"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.ScaledNoder.GetNodedSubstrings">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.ScaledNoder.ComputeNodes(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="inputSegStrings"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.ScaledNoder.Scale(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="segStrings"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.ScaledNoder.Scale(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            
            </summary>
            <param name="pts"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.ScaledNoder.Rescale(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="segStrings"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.ScaledNoder.Rescale(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            
            </summary>
            <param name="pts"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Noding.ScaledNoder.isIntegerPrecision">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation">
            <summary>
            Represents a location along a <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.LineString"/> or <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.MultiLineString"/>.
            The referenced geometry is not maintained within this location, 
            but must be provided for operations which require it.
            Various methods are provided to manipulate the location value
            and query the geometry it references.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation.GetEndLocation(GeoAPI.Geometries.IGeometry)">
            <summary>
            Gets a location which refers to the end of a linear <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/>.
            </summary>
            <param name="linear">The linear geometry.</param>
            <returns>A new <c>LinearLocation</c>.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation.PointAlongSegmentByFraction(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,System.Double)">
            <summary>
            Computes the <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/> of a point a given fraction
            along the line segment <c>(p0, p1)</c>.
            If the fraction is greater than 1.0 the last
            point of the segment is returned.
            If the fraction is less than or equal to 0.0 the first point
            of the segment is returned.
            </summary>
            <param name="p0">The first point of the line segment.</param>
            <param name="p1">The last point of the line segment.</param>
            <param name="fraction">The length to the desired point.</param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LinearLocation"/> class:
            creates a location referring to the start of a linear geometry.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:LinearLocation"/> class:
            creates a location referring to the start of a linear geometry.
            </summary>
            <param name="segmentIndex">Index of the segment.</param>
            <param name="segmentFraction">The segment fraction.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:LinearLocation"/> class:
            creates a location referring to the start of a linear geometry.
            </summary>
            <param name="componentIndex">Index of the component.</param>
            <param name="segmentIndex">Index of the segment.</param>
            <param name="segmentFraction">The segment fraction.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation.Normalize">
            <summary>
            Ensures the individual values are locally valid.
            Does not ensure that the indexes are valid for
            a particular linear geometry.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation.Clamp(GeoAPI.Geometries.IGeometry)">
            <summary>
            Ensures the indexes are valid for a given linear <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/>.
            </summary>
            <param name="linear">A linear geometry.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation.SnapToVertex(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            Snaps the value of this location to
            the nearest vertex on the given linear <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/>,
            if the vertex is closer than <paramref name="minDistance"/>.
            </summary>
            <param name="linearGeom">A linear geometry.</param>
            <param name="minDistance">The minimum allowable distance to a vertex.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation.GetSegmentLength(GeoAPI.Geometries.IGeometry)">
            <summary>
            Gets the length of the segment in the given
            Geometry containing this location.
            </summary>
            <param name="linearGeom">A linear geometry.</param>
            <returns>The length of the segment.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation.SetToEnd(GeoAPI.Geometries.IGeometry)">
            <summary>
            Sets the value of this location to
            refer the end of a linear geometry.
            </summary>
            <param name="linear">The linear geometry to set.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation.GetCoordinate(GeoAPI.Geometries.IGeometry)">
            <summary>
            Gets the <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/> along the
            given linear <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/> which is
            referenced by this location.
            </summary>
            <param name="linearGeom">A linear geometry.</param>
            <returns>The <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/> at the location.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation.IsValid(GeoAPI.Geometries.IGeometry)">
            <summary>
            Tests whether this location refers to a valid
            location on the given linear <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/>.
            </summary>
            <param name="linearGeom">A linear geometry.</param>
            <returns><c>true</c> if this location is valid.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">
            The <c>LineStringLocation</c> with which this 
            <c>Coordinate</c> is being compared.
            </param>
            <returns>
            A negative integer, zero, or a positive integer as this 
            <c>LineStringLocation</c> is less than, equal to, 
            or greater than the specified <c>LineStringLocation</c>.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="obj" /> is not the same type as this instance. 
            </exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation.CompareTo(GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="other">
            The <c>LineStringLocation</c> with which this 
            <c>Coordinate</c> is being compared.
            </param>
            <returns>
            A negative integer, zero, or a positive integer as this 
            <c>LineStringLocation</c> is less than, equal to, 
            or greater than the specified <c>LineStringLocation</c>.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation.CompareLocationValues(System.Int32,System.Int32,System.Double)">
            <summary>
            Compares this object with the specified index values for order.
            </summary>
            <param name="componentIndex1">The component index.</param>
            <param name="segmentIndex1">The segment index.</param>
            <param name="segmentFraction1">The segment fraction.</param>
            <returns>
            A negative integer, zero, or a positive integer as this <c>LineStringLocation</c>
            is less than, equal to, or greater than the specified locationValues.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation.CompareLocationValues(System.Int32,System.Int32,System.Double,System.Int32,System.Int32,System.Double)">
            <summary>
            Compares two sets of location values for order.
            </summary>
            <param name="componentIndex0">The first component index.</param>
            <param name="segmentIndex0">The first segment index.</param>
            <param name="segmentFraction0">The first segment fraction.</param>
            <param name="componentIndex1">The second component index.</param>
            <param name="segmentIndex1">The second segment index.</param>
            <param name="segmentFraction1">The second segment fraction.</param>
            <returns>
            A negative integer, zero, or a positive integer
            as the first set of location values is less than, equal to, 
            or greater than the second set of locationValues.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation.Clone">
            <summary>
            Copies this location.
            </summary>
            <returns>A copy of this location.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation.ComponentIndex">
            <summary>
            Gets the component index for this location.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation.SegmentIndex">
            <summary>
            Gets the segment index for this location.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation.SegmentFraction">
            <summary>
            Gets the segment fraction for this location.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation.IsVertex">
            <summary>
            Tests whether this location refers to a vertex:
            returns <c>true</c> if the location is a vertex.
            </summary>        
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.PostGisGeometryType">
            <summary>
            PostGIS Geometry types as defined in the OGC WKB Spec
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.PostGisGeometryType.Point">
            <summary>
            The OGIS geometry type number for points.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.PostGisGeometryType.LineString">
            <summary>
            The OGIS geometry type number for lines.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.PostGisGeometryType.Polygon">
            <summary>
            The OGIS geometry type number for polygons.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.PostGisGeometryType.MultiPoint">
            <summary>
            The OGIS geometry type number for aggregate points.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.PostGisGeometryType.MultiLineString">
            <summary>
            The OGIS geometry type number for aggregate lines.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.PostGisGeometryType.MultiPolygon">
            <summary>
            The OGIS geometry type number for aggregate polygons.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.PostGisGeometryType.GeometryCollection">
            <summary>
            The OGIS geometry type number for feature collections.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.RowStructure">
            <summary>
            Implements ICustomTypeDescriptor so we can simulate a row object having a property for every field.
            </summary>
            <remarks>
            For an explaination of ICustomTypeDescriptor see http://www.devx.com/dotnet/Article/7874
            By implementing this interface, we are able to simulate that an object has lots of properties.
            These properties are determined dynamically at run-time. When enumerating throught the 
            ShapefileDataReader, RowStructure is the object that gets returned. 
            <code>
            foreach(object obj in shpDataReader)
            {
            	if (obj.GetType().Name!="RowStructure")
            	{
            		// this proves the type returned by shpDataReader
            	} 
            }
            </code>
            </remarks>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.RowStructure.#ctor(GisSharpBlog.NetTopologySuite.IO.DbaseFieldDescriptor[],System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <param name="dbaseFields"></param>
            <param name="columnValues"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.RowStructure.GetAttributes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.RowStructure.GetClassName">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.RowStructure.GetComponentName">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.RowStructure.GetConverter">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.RowStructure.GetEditor(System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.RowStructure.GetDefaultEvent">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.RowStructure.GetEvents(System.Attribute[])">
            <summary>
            
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.RowStructure.GetEvents">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.RowStructure.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            
            </summary>
            <param name="pd"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.RowStructure.GetDefaultProperty">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.RowStructure.GetProperties(System.Attribute[])">
            <summary>
            
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.RowStructure.GetProperties">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.RowStructure.ColumnValues">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.GML2.GMLWriter">
            <summary>
            Writes the GML representation of the features of NetTopologySuite model.
            Uses GML 2.1.1 <c>Geometry.xsd</c> schema for base for features.
            <remarks>
            Thanks to <see href="http//www.codeplex.com/Wiki/View.aspx?ProjectName=MsSqlSpatial">rstuven</see> for improvements :)
            </remarks>
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLWriter.Write(GeoAPI.Geometries.IGeometry)">
            <summary>
            Returns an <c>XmlReader</c> with feature informations.
            Use <c>XmlDocument.Load(XmlReader)</c> for obtain a <c>XmlDocument</c> to work.
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLWriter.Write(GeoAPI.Geometries.IGeometry,System.IO.Stream)">
            <summary>
            Writes a GML feature into a generic <c>Stream</c>, such a <c>FileStream</c> or other streams.
            </summary>
            <param name="geometry"></param>
            <param name="stream"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLWriter.Write(GeoAPI.Geometries.ICoordinate,System.Xml.XmlTextWriter)">
            <summary>
            
            </summary>
            <param name="coordinate"></param>
            <param name="writer"></param>        
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLWriter.Write(GeoAPI.Geometries.ICoordinate[],System.Xml.XmlTextWriter)">
            <summary>
            
            </summary>
            <param name="coordinates"></param>
            <param name="writer"></param>        
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLWriter.Write(GeoAPI.Geometries.IGeometry,System.Xml.XmlTextWriter)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLWriter.Write(GeoAPI.Geometries.IPoint,System.Xml.XmlTextWriter)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLWriter.Write(GeoAPI.Geometries.ILineString,System.Xml.XmlTextWriter)">
            <summary>
            
            </summary>
            <param name="lineString"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLWriter.Write(GeoAPI.Geometries.ILinearRing,System.Xml.XmlTextWriter)">
            <summary>
            
            </summary>
            <param name="linearRing"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLWriter.Write(GeoAPI.Geometries.IPolygon,System.Xml.XmlTextWriter)">
            <summary>
            
            </summary>
            <param name="polygon"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLWriter.Write(GeoAPI.Geometries.IMultiPoint,System.Xml.XmlTextWriter)">
            <summary>
            
            </summary>
            <param name="multiPoint"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLWriter.Write(GeoAPI.Geometries.IMultiLineString,System.Xml.XmlTextWriter)">
            <summary>
            
            </summary>
            <param name="multiLineString"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLWriter.Write(GeoAPI.Geometries.IMultiPolygon,System.Xml.XmlTextWriter)">
            <summary>
            
            </summary>
            <param name="multiPolygon"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLWriter.Write(GeoAPI.Geometries.IGeometryCollection,System.Xml.XmlTextWriter)">
            <summary>
            
            </summary>
            <param name="geometryCollection"></param>
            <param name="writer"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLWriter.GetBytes(GeoAPI.Geometries.IGeometry)">
            <summary>
            Sets corrent length for Byte Stream.
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLWriter.SetByteStreamLength(GeoAPI.Geometries.IGeometry)">
            <summary>
            Sets corrent length for Byte Stream.
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLWriter.SetByteStreamLength(GeoAPI.Geometries.IGeometryCollection)">
            <summary>
            
            </summary>
            <param name="geometryCollection"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLWriter.SetByteStreamLength(GeoAPI.Geometries.IMultiPolygon)">
            <summary>
            
            </summary>
            <param name="multiPolygon"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLWriter.SetByteStreamLength(GeoAPI.Geometries.IMultiLineString)">
            <summary>
            
            </summary>
            <param name="multiLineString"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLWriter.SetByteStreamLength(GeoAPI.Geometries.IMultiPoint)">
            <summary>
            
            </summary>
            <param name="multiPoint"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLWriter.SetByteStreamLength(GeoAPI.Geometries.IPolygon)">
            <summary>
            
            </summary>
            <param name="polygon"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLWriter.SetByteStreamLength(GeoAPI.Geometries.ILineString)">
            <summary>
            
            </summary>
            <param name="lineString"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLWriter.SetByteStreamLength(GeoAPI.Geometries.IPoint)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.GML2.GMLWriter.NumberFormatter">
            <summary>
            Formatter for double values of coordinates
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.GML2.GMLReader">
            <summary>
            Reads a GML document and creates a representation of the features based or NetTopologySuite model.
            Uses GML 2.1.1 <c>Geometry.xsd</c> schema for base for features.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLReader.#ctor">
            <summary>
            Initialize reader with a standard <c>GeometryFactory</c>. 
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLReader.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Initialize reader with the given <c>GeometryFactory</c>.
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLReader.Read(System.Xml.XmlDocument)">
            <summary>
            Read a GML document and returns relative <c>Geometry</c>.
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLReader.Read(System.String)">
            <summary>
            
            </summary>
            <param name="xmlText"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLReader.Read(System.IO.StringReader)">
            <summary>
            
            </summary>
            <param name="stringReader"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLReader.Read(System.Xml.XmlReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLReader.ReadCoordinate(System.Xml.XmlReader)">
            <summary>
            Reads the coordinate.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLReader.ReadCoordinates(System.String)">
            <summary>
            Extract a <see cref="T:GeoAPI.Geometries.ICoordinate"/> from a x,y string value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLReader.ReadPoint(System.Xml.XmlReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLReader.ReadLineString(System.Xml.XmlReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLReader.ReadLinearRing(System.Xml.XmlReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLReader.ReadPolygon(System.Xml.XmlReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLReader.ReadMultiPoint(System.Xml.XmlReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLReader.ReadMultiLineString(System.Xml.XmlReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLReader.ReadMultiPolygon(System.Xml.XmlReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLReader.ReadGeometryCollection(System.Xml.XmlReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.GML2.GMLReader.IsStartElement(System.Xml.XmlReader,System.String)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.IO.GML2.GMLReader.Factory">
            <summary>
            <c>Geometry</c> builder.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineEvents">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineEvents.Insert">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineEvents.Delete">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineEvent.#ctor(System.Double,GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineEvent,GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineInterval)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="insertEvent"></param>
            <param name="sweepInt"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineEvent.CompareTo(System.Object)">
            <summary>
            ProjectionEvents are ordered first by their x-value, and then by their eventType.
            It is important that Insert events are sorted before Delete events, so that
            items whose Insert and Delete events occur at the same x-value will be
            correctly handled.
            </summary>
            <param name="o"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineEvent.IsInsert">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineEvent.IsDelete">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineEvent.InsertEvent">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineEvent.DeleteEventIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineEvent.Interval">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Strtree.ItemBoundable">
            <summary>
            Boundable wrapper for a non-Boundable spatial object. Used internally by
            AbstractSTRtree.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.ItemBoundable.#ctor(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="bounds"></param>
            <param name="item"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Strtree.ItemBoundable.Bounds">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Strtree.ItemBoundable.Item">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChain">
            <summary> 
            MonotoneChains are a way of partitioning the segments of a linestring to
            allow for fast searching of intersections.
            They have the following properties:
            the segments within a monotone chain will never intersect each other
            the envelope of any contiguous subset of the segments in a monotone chain
            is equal to the envelope of the endpoints of the subset.
            Property 1 means that there is no need to test pairs of segments from within
            the same monotone chain for intersection.
            Property 2 allows
            binary search to be used to find the intersection points of two monotone chains.
            For many types of real-world data, these properties eliminate a large number of
            segment comparisons, producing substantial speed gains.
            One of the goals of this implementation of MonotoneChains is to be
            as space and time efficient as possible. One design choice that aids this
            is that a MonotoneChain is based on a subarray of a list of points.
            This means that new arrays of points (potentially very large) do not
            have to be allocated.
            MonotoneChains support the following kinds of queries:
            Envelope select: determine all the segments in the chain which
            intersect a given envelope.
            Overlap: determine all the pairs of segments in two chains whose
            envelopes overlap.
            This implementation of MonotoneChains uses the concept of internal iterators
            to return the resultsets for the above queries.
            This has time and space advantages, since it
            is not necessary to build lists of instantiated objects to represent the segments
            returned by the query.
            However, it does mean that the queries are not thread-safe.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChain.#ctor(GeoAPI.Geometries.ICoordinate[],System.Int32,System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="pts"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="context"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChain.GetLineSegment(System.Int32,GisSharpBlog.NetTopologySuite.Geometries.LineSegment@)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="ls"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChain.Select(GeoAPI.Geometries.IEnvelope,GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChainSelectAction)">
            <summary> 
            Determine all the line segments in the chain whose envelopes overlap
            the searchEnvelope, and process them.
            </summary>
            <param name="searchEnv"></param>
            <param name="mcs"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChain.ComputeSelect(GeoAPI.Geometries.IEnvelope,System.Int32,System.Int32,GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChainSelectAction)">
            <summary>
            
            </summary>
            <param name="searchEnv"></param>
            <param name="start0"></param>
            <param name="end0"></param>
            <param name="mcs"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChain.ComputeOverlaps(GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChain,GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChainOverlapAction)">
            <summary>
            
            </summary>
            <param name="mc"></param>
            <param name="mco"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChain.ComputeOverlaps(System.Int32,System.Int32,GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChain,System.Int32,System.Int32,GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChainOverlapAction)">
            <summary>
            
            </summary>
            <param name="start0"></param>
            <param name="end0"></param>
            <param name="mc"></param>
            <param name="start1"></param>
            <param name="end1"></param>
            <param name="mco"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChain.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChain.Context">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChain.Envelope">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChain.StartIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChain.EndIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChain.Coordinates">
            <summary>
            Return the subsequence of coordinates forming this chain.
            Allocates a new array to hold the Coordinates.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Bintree.Node">
            <summary>
            A node of a <c>Bintree</c>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Node.CreateNode(GisSharpBlog.NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            
            </summary>
            <param name="itemInterval"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Node.CreateExpanded(GisSharpBlog.NetTopologySuite.Index.Bintree.Node,GisSharpBlog.NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="addInterval"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Node.#ctor(GisSharpBlog.NetTopologySuite.Index.Bintree.Interval,System.Int32)">
            <summary>
            
            </summary>
            <param name="interval"></param>
            <param name="level"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Node.IsSearchMatch(GisSharpBlog.NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            
            </summary>
            <param name="itemInterval"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Node.GetNode(GisSharpBlog.NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            Returns the subnode containing the envelope.
            Creates the node if
            it does not already exist.
            </summary>
            <param name="searchInterval"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Node.Find(GisSharpBlog.NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            Returns the smallest existing
            node containing the envelope.
            </summary>
            <param name="searchInterval"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Node.Insert(GisSharpBlog.NetTopologySuite.Index.Bintree.Node)">
            <summary>
            
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Node.GetSubnode(System.Int32)">
            <summary>
            Get the subnode for the index.
            If it doesn't exist, create it.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Node.CreateSubnode(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Bintree.Node.Interval">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.Depth">
            <summary>
            A Depth object records the topological depth of the sides
            of an Edge for up to two Geometries.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.GeometriesGraph.Depth.Null">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Depth.DepthAtLocation(GeoAPI.Geometries.Locations)">
            <summary>
            
            </summary>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Depth.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Depth.GetDepth(System.Int32,GisSharpBlog.NetTopologySuite.GeometriesGraph.Positions)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <param name="posIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Depth.SetDepth(System.Int32,GisSharpBlog.NetTopologySuite.GeometriesGraph.Positions,System.Int32)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <param name="posIndex"></param>
            <param name="depthValue"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Depth.GetLocation(System.Int32,GisSharpBlog.NetTopologySuite.GeometriesGraph.Positions)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <param name="posIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Depth.Add(System.Int32,GisSharpBlog.NetTopologySuite.GeometriesGraph.Positions,GeoAPI.Geometries.Locations)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <param name="posIndex"></param>
            <param name="location"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Depth.IsNull">
            <summary>
            A Depth object is null (has never been initialized) if all depths are null.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Depth.IsNull(System.Int32)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Depth.IsNull(System.Int32,GisSharpBlog.NetTopologySuite.GeometriesGraph.Positions)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <param name="posIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Depth.Add(GisSharpBlog.NetTopologySuite.GeometriesGraph.Label)">
            <summary>
            
            </summary>
            <param name="lbl"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Depth.GetDelta(System.Int32)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Depth.Normalize">
            <summary>
            Normalize the depths for each point, if they are non-null.
            A normalized depth
            has depth values in the set { 0, 1 }.
            Normalizing the depths
            involves reducing the depths by the same amount so that at least
            one of them is 0.  If the remaining value is > 0, it is set to 1.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Depth.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Depth.Item(System.Int32,GisSharpBlog.NetTopologySuite.GeometriesGraph.Positions)">
            <summary>
            Calls GetDepth and SetDepth.
            </summary>
            <param name="geomIndex"></param>
            <param name="posIndex"></param>
            <returns></returns>
        </member>
        <member name="T:RTools_NTS.Util.ParseUtil">
            <summary>
            A start on some utility methods for parsing in conjunction with
            StreamTokenizer.  These currently use Token[] but could be adapted
            for ArrayList.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.ParseUtil.BuildArray(System.Collections.ArrayList,System.Int32@,System.Type,RTools_NTS.Util.Token,System.Int32,RTools_NTS.Util.Logger)">
            <summary>
            Build an Array of a particular type from a list of tokens.  
            The Type must be one that can be built with Convert.ChangeType.
            There are various ways to specify how many elements to parse.
            WARNING: This will throw an exception if any tokens cannot be
            converted.
            </summary>
            <param name="tokens">The ArrayList of tokens.</param>
            <param name="i">The starting (and ending) index.  This is
            modified, and left pointing at the last used token.</param>
            <param name="type">The Type of the array elements.</param>
            <param name="endToken">An optional end Token to look for.
            Parsing stops when a token equal to this is found.
            If this is null, then it is not used.</param>
            <param name="maxLength">The maximum number of array elements
            to parse.  If this is negative, then it is not used.</param>
            <param name="log">A Logger to use for messages.</param>
            <returns>The Array, or null for error.</returns>
        </member>
        <member name="M:RTools_NTS.Util.ParseUtil.SkipToWord(RTools_NTS.Util.Token[],System.Int32@)">
            <summary>
            Given a Token[] and a reference int, skip forward
            in the token array until a WordToken is found,
            and leave the reference int at that index.
            </summary>
            <param name="tokens">The token array.</param>
            <param name="i">The start index, and the result index.</param>
            <returns>bool - true for success, false for 
            hit the end of the tokens.</returns>
        </member>
        <member name="M:RTools_NTS.Util.ParseUtil.SkipToStringValue(RTools_NTS.Util.Token[],System.Int32@,System.String)">
            <summary>
            Given a Token[], a reference int and a string, skip forward
            in the token array until a token matches the string
            and leave the reference int at that index.
            </summary>
            <param name="tokens">The token array.</param>
            <param name="i">The start index, and the result index.</param>
            <param name="s">The string to look for.</param>
            <returns>bool - true for success, false for 
            hit the end of the tokens.</returns>
        </member>
        <member name="M:RTools_NTS.Util.ParseUtil.SkipToChar(RTools_NTS.Util.Token[],System.Int32@,System.Char)">
            <summary>
            Given a Token[] and a reference int, skip forward
            in the token array until a WordToken is found,
            and leave the reference int at that index.
            </summary>
            <param name="tokens">The token array.</param>
            <param name="i">The start index, and the result index.</param>
            <param name="c">The char to look for.</param>
            <returns>bool - true for success, false for 
            hit the end of the tokens.</returns>
        </member>
        <member name="M:RTools_NTS.Util.ParseUtil.SkipWs(RTools_NTS.Util.Token[],System.Int32@)">
            <summary>
            Given a Token[] and a reference int, skip forward
            in the token array until a WordToken is found,
            and leave the reference int at that index.
            </summary>
            <param name="tokens">The token array.</param>
            <param name="i">The start index, and the result index.</param>
            <returns>bool - true for success, false for 
            hit the end of the tokens.</returns>
        </member>
        <member name="M:RTools_NTS.Util.ParseUtil.SkipToEol(RTools_NTS.Util.Token[],System.Int32@)">
            <summary>
            Given a Token[] and a reference int, skip forward
            in the token array until a WordToken is found,
            and leave the reference int at that index.
            </summary>
            <param name="tokens">The token array.</param>
            <param name="i">The start index, and the result index.</param>
            <returns>bool - true for success, false for 
            hit the end of the tokens.</returns>
        </member>
        <member name="M:RTools_NTS.Util.ParseUtil.DropTokens(RTools_NTS.Util.Token[],RTools_NTS.Util.Token[])">
            <summary>
            Given a Token[] and a reference int, skip forward
            in the token array until a WordToken is found,
            and leave the reference int at that index.
            </summary>
            <param name="tokens">The token array.</param>
            <param name="dropTokens">The tokens to drop.</param>
            <returns>bool - true for success, false for 
            hit the end of the tokens.</returns>
        </member>
        <member name="M:RTools_NTS.Util.ParseUtil.FindMatch(RTools_NTS.Util.Token[],System.Int32@,System.Char)">
            <summary>
            Find matching closing character.
            The matchable pairs of characters are parenthesis (), 
            square brackets [], and curly braces {}.
            Given a Token[] and a reference int containing the index
            in the Token[] of a matchable? char, skip forward
            in the token array until the matching character is found.
            </summary>
            <remarks>
            This implicitly skips matching characters in quotes and
            comments if they are hidden in the tokens.  So if you grab
            comments and quotes when you tokenize, the characters in those
            tokens are not looked at by this function.
            </remarks>
            <param name="tokens">The token array.</param>
            <param name="i">The start index, and the result index.</param>
            <param name="c">The start character whose match is to be found.</param>
            <returns>bool - true for success, false for 
            hit the end of the tokens.</returns>
        </member>
        <member name="M:RTools_NTS.Util.ParseUtil.TestSelf">
            <summary>
            Simple test of some ParseUtil methods.
            </summary>
            <returns>bool - true for all passed, false otherwise</returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Utilities.Global">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.Global.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Utilities.Global.global">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.Global.GetNfi">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Valid.ConsistentAreaTester">
            <summary> 
            Checks that a {GeometryGraph} representing an area
            (a <c>Polygon</c> or <c>MultiPolygon</c> )
            is consistent with the SFS semantics for area geometries.
            Checks include:
            Testing for rings which self-intersect (both properly and at nodes).
            Testing for duplicate rings.
            If an inconsistency if found the location of the problem is recorded.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.ConsistentAreaTester.#ctor(GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            
            </summary>
            <param name="geomGraph"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Valid.ConsistentAreaTester.InvalidPoint">
            <summary>
            Returns the intersection point, or <c>null</c> if none was found.
            </summary>        
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Valid.ConsistentAreaTester.IsNodeConsistentArea">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Valid.ConsistentAreaTester.IsNodeEdgeAreaLabelsConsistent">
            <summary>
            Check all nodes to see if their labels are consistent.
            If any are not, return false.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Valid.ConsistentAreaTester.HasDuplicateRings">
            <summary>
            Checks for two duplicate rings in an area.
            Duplicate rings are rings that are topologically equal
            (that is, which have the same sequence of points up to point order).
            If the area is topologically consistent (determined by calling the
            <c>isNodeConsistentArea</c>,
            duplicate rings can be found by checking for EdgeBundles which contain more than one EdgeEnd.
            (This is because topologically consistent areas cannot have two rings sharing
            the same line segment, unless the rings are equal).
            The start point of one of the equal rings will be placed in invalidPoint.
            Returns <c>true</c> if this area Geometry is topologically consistent but has two duplicate rings.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.LineStringSnapper">
            <summary>
            Snaps the vertices and segments of a LineString to a set of target snap vertices.
            A snapping distance tolerance is used to control where snapping is performed.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.LineStringSnapper.#ctor(GeoAPI.Geometries.ILineString,System.Double)">
            <summary>
            Creates a new snapper using the points in the given {@link LineString}
            as target snap points.
            </summary>
            <param name="line"></param>
            <param name="snapTolerance"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.LineStringSnapper.#ctor(GeoAPI.Geometries.ICoordinate[],System.Double)">
            <summary>
            Creates a new snapper using the given points
            as target snap points.
            </summary>
            <param name="srcPts"></param>
            <param name="snapTolerance"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.LineStringSnapper.SnapTo(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Snaps the vertices and segments of the source LineString 
            to the given set of target snap points.
            </summary>
            <param name="snapPts"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.LineStringSnapper.SnapVertices(GisSharpBlog.NetTopologySuite.Geometries.CoordinateList,GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Snap source vertices to vertices in the target.
            </summary>
            <param name="srcCoords"></param>
            <param name="snapPts"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.LineStringSnapper.FindSnapForVertex(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate[])">
            <summary>
            
            </summary>
            <param name="pt"></param>
            <param name="snapPts"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.LineStringSnapper.SnapSegments(GisSharpBlog.NetTopologySuite.Geometries.CoordinateList,GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Snap segments of the source to nearby snap vertices.
            Source segments are "cracked" at a snap vertex, and further
            snapping takes place on the modified list of segments.
            For each distinct snap vertex, at most one source segment
            is snapped to.  This prevents "cracking" multiple segments 
            at the same point, which would almost certainly cause the result to be invalid.
            </summary>
            <param name="srcCoords"></param>
            <param name="snapPts"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.Snap.LineStringSnapper.FindSegmentIndexToSnap(GeoAPI.Geometries.ICoordinate,GisSharpBlog.NetTopologySuite.Geometries.CoordinateList)">
            <summary>
            Finds a src segment which snaps to (is close to) the given snap point
            Only one segment is determined - this is to prevent
            snapping to multiple segments, which would almost certainly cause invalid geometry
            to be created.
            (The heuristic approach of snapping is really only appropriate when
            snap pts snap to a unique spot on the src geometry)
            </summary>
            <param name="snapPt"></param>
            <param name="srcCoords"></param>
            <returns>-1 if no segment snaps.</returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Distance.DistanceOp">
            <summary>
            Computes the distance and
            closest points between two <c>Geometry</c>s.
            The distance computation finds a pair of points in the input geometries
            which have minimum distance between them.  These points may
            not be vertices of the geometries, but may lie in the interior of
            a line segment. In this case the coordinate computed is a close
            approximation to the exact point.
            The algorithms used are straightforward O(n^2)
            comparisons.  This worst-case performance could be improved on
            by using Voronoi techniques.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Distance.DistanceOp.Distance(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Compute the distance between the closest points of two geometries.
            </summary>
            <param name="g0">A <c>Geometry</c>.</param>
            <param name="g1">Another <c>Geometry</c>.</param>
            <returns>The distance between the geometries.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Distance.DistanceOp.IsWithinDistance(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            Test whether two geometries lie within a given distance of each other.
            </summary>
            <param name="g0"></param>
            <param name="g1"></param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Distance.DistanceOp.ClosestPoints(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Compute the the closest points of two geometries.
            The points are presented in the same order as the input Geometries.
            </summary>
            <param name="g0">A <c>Geometry</c>.</param>
            <param name="g1">Another <c>Geometry</c>.</param>
            <returns>The closest points in the geometries.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Distance.DistanceOp.#ctor(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Constructs a <see cref="T:GisSharpBlog.NetTopologySuite.Operation.Distance.DistanceOp"/>  that computes the distance and closest points between
            the two specified geometries.
            </summary>
            <param name="g0"></param>
            <param name="g1"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Distance.DistanceOp.#ctor(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            Constructs a <see cref="T:GisSharpBlog.NetTopologySuite.Operation.Distance.DistanceOp"/> that computes the distance and closest points between
            the two specified geometries.
            </summary>
            <param name="g0"></param>
            <param name="g1"></param>
            <param name="terminateDistance">The distance on which to terminate the search.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Distance.DistanceOp.Distance">
            <summary>
            Report the distance between the closest points on the input geometries.
            </summary>
            <returns>The distance between the geometries.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Distance.DistanceOp.ClosestPoints">
            <summary>
            Report the coordinates of the closest points in the input geometries.
            The points are presented in the same order as the input Geometries.
            </summary>
            <returns>A pair of <c>Coordinate</c>s of the closest points.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Distance.DistanceOp.ClosestLocations">
            <summary>
            Report the locations of the closest points in the input geometries.
            The locations are presented in the same order as the input Geometries.
            </summary>
            <returns>A pair of {GeometryLocation}s for the closest points.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Distance.DistanceOp.UpdateMinDistance(System.Double)">
            <summary>
            
            </summary>
            <param name="dist"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Distance.DistanceOp.UpdateMinDistance(GisSharpBlog.NetTopologySuite.Operation.Distance.GeometryLocation[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="locGeom"></param>
            <param name="flip"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Distance.DistanceOp.ComputeMinDistance">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Distance.DistanceOp.ComputeContainmentDistance">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Distance.DistanceOp.ComputeInside(System.Collections.IList,System.Collections.IList,GisSharpBlog.NetTopologySuite.Operation.Distance.GeometryLocation[])">
            <summary>
            
            </summary>
            <param name="locs"></param>
            <param name="polys"></param>
            <param name="locPtPoly"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Distance.DistanceOp.ComputeInside(GisSharpBlog.NetTopologySuite.Operation.Distance.GeometryLocation,GeoAPI.Geometries.IPolygon,GisSharpBlog.NetTopologySuite.Operation.Distance.GeometryLocation[])">
            <summary>
            
            </summary>
            <param name="ptLoc"></param>
            <param name="poly"></param>
            <param name="locPtPoly"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Distance.DistanceOp.ComputeLineDistance">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Distance.DistanceOp.ComputeMinDistanceLines(System.Collections.IList,System.Collections.IList,GisSharpBlog.NetTopologySuite.Operation.Distance.GeometryLocation[])">
            <summary>
            
            </summary>
            <param name="lines0"></param>
            <param name="lines1"></param>
            <param name="locGeom"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Distance.DistanceOp.ComputeMinDistancePoints(System.Collections.IList,System.Collections.IList,GisSharpBlog.NetTopologySuite.Operation.Distance.GeometryLocation[])">
            <summary>
            
            </summary>
            <param name="points0"></param>
            <param name="points1"></param>
            <param name="locGeom"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Distance.DistanceOp.ComputeMinDistanceLinesPoints(System.Collections.IList,System.Collections.IList,GisSharpBlog.NetTopologySuite.Operation.Distance.GeometryLocation[])">
            <summary>
            
            </summary>
            <param name="lines"></param>
            <param name="points"></param>
            <param name="locGeom"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Distance.DistanceOp.ComputeMinDistance(GeoAPI.Geometries.ILineString,GeoAPI.Geometries.ILineString,GisSharpBlog.NetTopologySuite.Operation.Distance.GeometryLocation[])">
            <summary>
            
            </summary>
            <param name="line0"></param>
            <param name="line1"></param>
            <param name="locGeom"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Distance.DistanceOp.ComputeMinDistance(GeoAPI.Geometries.ILineString,GeoAPI.Geometries.IPoint,GisSharpBlog.NetTopologySuite.Operation.Distance.GeometryLocation[])">
            <summary>
            
            </summary>
            <param name="line"></param>
            <param name="pt"></param>
            <param name="locGeom"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveBuilder">
            <summary>
            Computes the raw offset curve for a
            single <c>Geometry</c> component (ring, line or point).
            A raw offset curve line is not noded -
            it may contain self-intersections (and usually will).
            The final buffer polygon is computed by forming a topological graph
            of all the noded raw curves and tracing outside contours.
            The points in the raw curve are rounded to the required precision model.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveBuilder.DefaultQuadrantSegments">
            <summary>
            The default number of facets into which to divide a fillet of 90 degrees.
            A value of 8 gives less than 2% max error in the buffer distance.
            For a max error smaller of 1%, use QS = 12
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveBuilder.#ctor(GeoAPI.Geometries.IPrecisionModel)">
            <summary>
            
            </summary>
            <param name="precisionModel"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveBuilder.#ctor(GeoAPI.Geometries.IPrecisionModel,System.Int32)">
            <summary>
            
            </summary>
            <param name="precisionModel"></param>
            <param name="quadrantSegments"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveBuilder.GetLineCurve(GeoAPI.Geometries.ICoordinate[],System.Double)">
            <summary>
            This method handles single points as well as lines.
            Lines are assumed to not be closed (the function will not
            fail for closed lines, but will generate superfluous line caps).
            </summary>
            <param name="inputPts"></param>
            <param name="distance"></param>
            <returns> A List of Coordinate[].</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveBuilder.GetRingCurve(GeoAPI.Geometries.ICoordinate[],GisSharpBlog.NetTopologySuite.GeometriesGraph.Positions,System.Double)">
            <summary>
            This method handles the degenerate cases of single points and lines,
            as well as rings.
            </summary>
            <returns>A List of coordinates.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveBuilder.CopyCoordinates(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            
            </summary>
            <param name="pts"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveBuilder.Init(System.Double)">
            <summary>
            
            </summary>
            <param name="distance"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveBuilder.ComputeLineBufferCurve(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            
            </summary>
            <param name="inputPts"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveBuilder.ComputeRingBufferCurve(GeoAPI.Geometries.ICoordinate[],GisSharpBlog.NetTopologySuite.GeometriesGraph.Positions)">
            <summary>
            
            </summary>
            <param name="inputPts"></param>
            <param name="side"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveBuilder.AddPt(GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveBuilder.ClosePts">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveBuilder.InitSideSegments(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GisSharpBlog.NetTopologySuite.GeometriesGraph.Positions)">
            <summary>
            
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <param name="side"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveBuilder.AddNextSegment(GeoAPI.Geometries.ICoordinate,System.Boolean)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="addStartPoint"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveBuilder.AddLastSegment">
            <summary>
            Add last offset point.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveBuilder.ComputeOffsetSegment(GisSharpBlog.NetTopologySuite.Geometries.LineSegment,GisSharpBlog.NetTopologySuite.GeometriesGraph.Positions,System.Double,GisSharpBlog.NetTopologySuite.Geometries.LineSegment)">
            <summary>
            Compute an offset segment for an input segment on a given side and at a given distance.
            The offset points are computed in full double precision, for accuracy.
            </summary>
            <param name="seg">The segment to offset.</param>
            <param name="side">The side of the segment the offset lies on.</param>
            <param name="distance">The offset distance.</param>
            <param name="offset">The points computed for the offset segment.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveBuilder.AddLineEndCap(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            Add an end cap around point p1, terminating a line segment coming from p0.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveBuilder.AddFillet(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="p">Base point of curve.</param>
            <param name="p0">Start point of fillet curve.</param>
            <param name="p1">Endpoint of fillet curve.</param>
            <param name="direction"></param>
            <param name="distance"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveBuilder.AddFillet(GeoAPI.Geometries.ICoordinate,System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Adds points for a fillet.  The start and end point for the fillet are not added -
            the caller must add them if required.
            </summary>
            <param name="p"></param>
            <param name="startAngle"></param>
            <param name="endAngle"></param>
            <param name="direction">Is -1 for a CW angle, 1 for a CCW angle.</param>
            <param name="distance"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveBuilder.AddCircle(GeoAPI.Geometries.ICoordinate,System.Double)">
            <summary>
            Adds a CW circle around a point.
            </summary>
            <param name="p"></param>
            <param name="distance"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveBuilder.AddSquare(GeoAPI.Geometries.ICoordinate,System.Double)">
            <summary>
            Adds a CW square around a point
            </summary>
            <param name="p"></param>
            <param name="distance"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveBuilder.EndCapStyle">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveBuilder.Coordinates">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferBuilder">
            <summary> 
            Builds the buffer point for a given input point and precision model.
            Allows setting the level of approximation for circular arcs,
            and the precision model in which to carry out the computation.
            When computing buffers in floating point double-precision
            it can happen that the process of iterated noding can fail to converge (terminate).
            In this case a TopologyException will be thrown.
            Retrying the computation in a fixed precision
            can produce more robust results.    
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferBuilder.DepthDelta(GisSharpBlog.NetTopologySuite.GeometriesGraph.Label)">
            <summary>
            Compute the change in depth as an edge is crossed from R to L.
            </summary>
            <param name="label"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferBuilder.Buffer(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferBuilder.GetNoder(GeoAPI.Geometries.IPrecisionModel)">
            <summary>
            
            </summary>
            <param name="precisionModel"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferBuilder.ComputeNodedEdges(System.Collections.IList,GeoAPI.Geometries.IPrecisionModel)">
            <summary>
            
            </summary>
            <param name="bufferSegStrList"></param>
            <param name="precisionModel"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferBuilder.InsertEdge(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge)">
            <summary>
            Inserted edges are checked to see if an identical edge already exists.
            If so, the edge is not inserted, but its label is merged
            with the existing edge.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferBuilder.BuildSubgraphs(System.Collections.IList,GisSharpBlog.NetTopologySuite.Operation.Overlay.PolygonBuilder)">
            <summary>
            Completes the building of the input subgraphs by depth-labelling them,
            and adds them to the <see cref="T:GisSharpBlog.NetTopologySuite.Operation.Overlay.PolygonBuilder"/>.
            The subgraph list must be sorted in rightmost-coordinate order.
            </summary>
            <param name="subgraphList">The subgraphs to build.</param>
            <param name="polyBuilder">The PolygonBuilder which will build the final polygons.</param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferBuilder.QuadrantSegments">
            <summary>
            Gets/Sets the number of segments used to approximate a angle fillet.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferBuilder.WorkingPrecisionModel">
            <summary>
            Gets/Sets the precision model to use during the curve computation and noding,
            if it is different to the precision model of the Geometry.
            If the precision model is less than the precision of the Geometry precision model,
            the Geometry must have previously been rounded to that precision.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferBuilder.EndCapStyle">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferBuilder.Noder">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Noding.NodingValidator">
            <summary>
            Validates that a collection of <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s is correctly noded.
            Throws an appropriate exception if an noding error is found.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.NodingValidator.#ctor(System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Noding.NodingValidator"/> class.
            </summary>
            <param name="segStrings">The seg strings.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.NodingValidator.CheckValid">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.NodingValidator.CheckCollapses">
            <summary>
            Checks if a segment string contains a segment pattern a-b-a (which implies a self-intersection).
            </summary>   
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.NodingValidator.CheckCollapses(GisSharpBlog.NetTopologySuite.Noding.SegmentString)">
            <summary>
            
            </summary>
            <param name="ss"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.NodingValidator.CheckCollapse(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.NodingValidator.CheckInteriorIntersections">
            <summary>
            Checks all pairs of segments for intersections at an interior point of a segment.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.NodingValidator.CheckInteriorIntersections(GisSharpBlog.NetTopologySuite.Noding.SegmentString,GisSharpBlog.NetTopologySuite.Noding.SegmentString)">
            <summary>
            
            </summary>
            <param name="ss0"></param>
            <param name="ss1"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.NodingValidator.CheckInteriorIntersections(GisSharpBlog.NetTopologySuite.Noding.SegmentString,System.Int32,GisSharpBlog.NetTopologySuite.Noding.SegmentString,System.Int32)">
            <summary>
            
            </summary>
            <param name="e0"></param>
            <param name="segIndex0"></param>
            <param name="e1"></param>
            <param name="segIndex1"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.NodingValidator.HasInteriorIntersection(GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="li"></param>
            <param name="p0"></param>
            <param name="p1"></param>
            <returns><c>true</c> if there is an intersection point which is not an endpoint of the segment p0-p1.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.NodingValidator.CheckEndPtVertexIntersections">
            <summary>
            Checks for intersections between an endpoint of a segment string
            and an interior vertex of another segment string
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.NodingValidator.CheckEndPtVertexIntersections(GeoAPI.Geometries.ICoordinate,System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="testPt"></param>
            <param name="segStrings"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Noding.IntersectionFinderAdder">
            <summary>
            Finds proper and interior intersections in a set of <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s,
            and adds them as nodes.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.IntersectionFinderAdder.#ctor(GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector)">
            <summary>
            Creates an intersection finder which finds all proper intersections.
            </summary>
            <param name="li">The <see cref="T:GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector"/> to use.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.IntersectionFinderAdder.ProcessIntersections(GisSharpBlog.NetTopologySuite.Noding.SegmentString,System.Int32,GisSharpBlog.NetTopologySuite.Noding.SegmentString,System.Int32)">
            <summary>
            This method is called by clients
            of the <see cref="T:GisSharpBlog.NetTopologySuite.Noding.ISegmentIntersector"/> class to process
            intersections for two segments of the <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s being intersected.
            Note that some clients (such as <see cref="T:GisSharpBlog.NetTopologySuite.Index.Chain.MonotoneChain"/>s) may optimize away
            this call for segment pairs which they have determined do not intersect
            (e.g. by an disjoint envelope test).
            </summary>
            <param name="e0"></param>
            <param name="segIndex0"></param>
            <param name="e1"></param>
            <param name="segIndex1"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Noding.IntersectionFinderAdder.InteriorIntersections">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LocationIndexOfPoint">
            <summary>
            Computes the <see cref="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation"/> of the point
            on a linear <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/>nearest a given <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/>.
            The nearest point is not necessarily unique; this class
            always computes the nearest point closest to the start of the geometry.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LocationIndexOfPoint.IndexOf(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="linearGeom"></param>
            <param name="inputPt"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LocationIndexOfPoint.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Initializes a new instance of the <see cref="T:LocationIndexOfPoint"/> class.
            </summary>
            <param name="linearGeom">A linear geometry.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LocationIndexOfPoint.IndexOf(GeoAPI.Geometries.ICoordinate)">
            <summary>     
            Find the nearest location along a linear {@link Geometry} to a given point.
            </summary>
            <param name="inputPt">The coordinate to locate.</param>
            <returns>The location of the nearest point.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LocationIndexOfPoint.IndexOfAfter(GeoAPI.Geometries.ICoordinate,GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation)">
            <summary>
            Find the nearest <see cref="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation"/> along the linear <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/>
            to a given <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/> after the specified minimum <see cref="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation"/>.
            If possible the location returned will be strictly greater than the <paramref name="minIndex"/>.
            If this is not possible, the value returned will equal <paramref name="minIndex"/>.
            (An example where this is not possible is when <paramref name="minIndex"/> = [end of line] ).
            </summary>
            <param name="inputPt">The coordinate to locate.</param>
            <param name="minIndex">The minimum location for the point location.</param>
            <returns>The location of the nearest point.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LocationIndexOfPoint.IndexOfFromStart(GeoAPI.Geometries.ICoordinate,GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation)">
            <summary>
            
            </summary>
            <param name="inputPt"></param>
            <param name="minIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LocationIndexOfPoint.SegmentFraction(GisSharpBlog.NetTopologySuite.Geometries.LineSegment,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="seg"></param>
            <param name="inputPt"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Quadtree.IntervalSize">
            <summary>
            Provides a test for whether an interval is
            so small it should be considered as zero for the purposes of
            inserting it into a binary tree.
            The reason this check is necessary is that round-off error can
            cause the algorithm used to subdivide an interval to fail, by
            computing a midpoint value which does not lie strictly between the
            endpoints.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Index.Quadtree.IntervalSize.MinBinaryExponent">
            <summary> 
            This value is chosen to be a few powers of 2 less than the
            number of bits available in the double representation (i.e. 53).
            This should allow enough extra precision for simple computations to be correct,
            at least for comparison purposes.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.IntervalSize.#ctor">
            <summary>
            Only static methods!
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.IntervalSize.IsZeroWidth(System.Double,System.Double)">
            <summary> 
            Computes whether the interval [min, max] is effectively zero width.
            I.e. the width of the interval is so much less than the
            location of the interval that the midpoint of the interval cannot be
            represented precisely.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SweepLineSegment">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SweepLineSegment.#ctor(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge,System.Int32)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <param name="ptIndex"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SweepLineSegment.ComputeIntersections(GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SweepLineSegment,GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector)">
            <summary>
            
            </summary>
            <param name="ss"></param>
            <param name="si"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SweepLineSegment.MinX">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SweepLineSegment.MaxX">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.MonotoneChainEdge">
            <summary> 
            MonotoneChains are a way of partitioning the segments of an edge to
            allow for fast searching of intersections.
            They have the following properties:
            the segments within a monotone chain will never intersect each other, and 
            the envelope of any contiguous subset of the segments in a monotone chain
            is simply the envelope of the endpoints of the subset.
            Property 1 means that there is no need to test pairs of segments from within
            the same monotone chain for intersection.
            Property 2 allows
            binary search to be used to find the intersection points of two monotone chains.
            For many types of real-world data, these properties eliminate a large number of
            segment comparisons, producing substantial speed gains.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.MonotoneChainEdge.#ctor(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.MonotoneChainEdge.GetMinX(System.Int32)">
            <summary>
            
            </summary>
            <param name="chainIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.MonotoneChainEdge.GetMaxX(System.Int32)">
            <summary>
            
            </summary>
            <param name="chainIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.MonotoneChainEdge.ComputeIntersects(GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.MonotoneChainEdge,GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector)">
            <summary>
            
            </summary>
            <param name="mce"></param>
            <param name="si"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.MonotoneChainEdge.ComputeIntersectsForChain(System.Int32,GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.MonotoneChainEdge,System.Int32,GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector)">
            <summary>
            
            </summary>
            <param name="chainIndex0"></param>
            <param name="mce"></param>
            <param name="chainIndex1"></param>
            <param name="si"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.MonotoneChainEdge.ComputeIntersectsForChain(System.Int32,System.Int32,GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.MonotoneChainEdge,System.Int32,System.Int32,GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector)">
            <summary>
            
            </summary>
            <param name="start0"></param>
            <param name="end0"></param>
            <param name="mce"></param>
            <param name="start1"></param>
            <param name="end1"></param>
            <param name="ei"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.MonotoneChainEdge.Coordinates">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.MonotoneChainEdge.StartIndexes">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.MonotoneChain">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.MonotoneChain.#ctor(GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.MonotoneChainEdge,System.Int32)">
            <summary>
            
            </summary>
            <param name="mce"></param>
            <param name="chainIndex"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.MonotoneChain.ComputeIntersections(GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.MonotoneChain,GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector)">
            <summary>
            
            </summary>
            <param name="mc"></param>
            <param name="si"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.Polygon">
            <summary> 
            Represents a linear polygon, which may include holes.
            The shell and holes of the polygon are represented by {LinearRing}s.
            In a valid polygon, holes may touch the shell or other holes at a single point.
            However, no sequence of touching holes may split the polygon into two pieces.
            The orientation of the rings in the polygon does not matter.
            The shell and holes must conform to the assertions specified in the
            <see href="http://www.opengis.org/techno/specs.htm"/> OpenGIS Simple Features Specification for SQL.     
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.Polygon.Empty">
            <summary>
            Represents an empty <c>Polygon</c>.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.Polygon.shell">
            <summary>
            The exterior boundary, or <c>null</c> if this <c>Polygon</c>
            is the empty point.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.Polygon.holes">
            <summary>
            The interior boundaries, if any.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Polygon.#ctor(GeoAPI.Geometries.ILinearRing,GeoAPI.Geometries.ILinearRing[])">
            <summary>
            Initializes a new instance of the <see cref="T:Polygon"/> class.
            </summary>
            <param name="shell">
            The outer boundary of the new <c>Polygon</c>,
            or <c>null</c> or an empty <c>LinearRing</c> if the empty
            point is to be created.
            </param>
            <param name="holes">
            The inner boundaries of the new <c>Polygon</c>
            , or <c>null</c> or empty <c>LinearRing</c>s if the empty
            point is to be created.
            </param>
            <remarks>
            For create this <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/> is used a standard <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory"/> 
            with <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel"/> <c> == </c> <see cref="F:GeoAPI.Geometries.PrecisionModels.Floating"/>.
            </remarks>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Polygon.#ctor(GeoAPI.Geometries.ILinearRing,GeoAPI.Geometries.ILinearRing[],GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Constructs a <c>Polygon</c> with the given exterior boundary and
            interior boundaries.
            </summary>       
            <param name="shell">
            The outer boundary of the new <c>Polygon</c>,
            or <c>null</c> or an empty <c>LinearRing</c> if the empty
            point is to be created.
            </param>
            <param name="holes">
            The inner boundaries of the new <c>Polygon</c>
            , or <c>null</c> or empty <c>LinearRing</c>s if the empty
            point is to be created.
            </param>
            <param name="factory"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Polygon.GetInteriorRingN(System.Int32)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Polygon.ComputeEnvelopeInternal">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Polygon.EqualsExact(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Polygon.Apply(GeoAPI.Geometries.ICoordinateFilter)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Polygon.Apply(GeoAPI.Geometries.IGeometryFilter)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Polygon.Apply(GeoAPI.Geometries.IGeometryComponentFilter)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Polygon.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Polygon.ConvexHull">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Polygon.Normalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Polygon.CompareToSameClass(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Polygon.Normalize(GeoAPI.Geometries.ILinearRing,System.Boolean)">
            <summary>
            
            </summary>
            <param name="ring"></param>
            <param name="clockwise"></param>        
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Polygon.#ctor(GisSharpBlog.NetTopologySuite.Geometries.LinearRing,GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory)">
            <summary>
            Constructs a <c>Polygon</c> with the given exterior boundary.
            </summary>
            <param name="shell">
            The outer boundary of the new <c>Polygon</c>,
            or <c>null</c> or an empty <c>LinearRing</c> if the empty
            polygon is to be created.
            </param>
            <param name="factory"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Polygon.#ctor(GisSharpBlog.NetTopologySuite.Geometries.LinearRing)">
            <summary>
            Constructs a <c>Polygon</c> with the given exterior boundary.
            </summary>
            <param name="shell">
            The outer boundary of the new <c>Polygon</c>,
            or <c>null</c> or an empty <c>LinearRing</c> if the empty
            polygon is to be created.
            </param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Polygon.Coordinate">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Polygon.Coordinates">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Polygon.NumPoints">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Polygon.Dimension">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Polygon.BoundaryDimension">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Polygon.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Polygon.IsSimple">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Polygon.ExteriorRing">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Polygon.NumInteriorRings">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Polygon.InteriorRings">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Polygon.GeometryType">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Polygon.Area">
            <summary> 
            Returns the area of this <c>Polygon</c>
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Polygon.Length">
            <summary>
            Returns the perimeter of this <c>Polygon</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Polygon.Boundary">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Polygon.IsRectangle">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Polygon.Shell">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Polygon.Holes">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.MultiLineString">
            <summary>
            Basic implementation of <c>MultiLineString</c>.
            </summary>    
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.MultiLineString.Empty">
            <summary>
            Represents an empty <c>MultiLineString</c>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.MultiLineString.#ctor(GeoAPI.Geometries.ILineString[],GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Constructs a <c>MultiLineString</c>.
            </summary>
            <param name="lineStrings">
            The <c>LineString</c>s for this <c>MultiLineString</c>,
            or <c>null</c> or an empty array to create the empty
            point. Elements may be empty <c>LineString</c>s,
            but not <c>null</c>s.
            </param>
            <param name="factory"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.MultiLineString.#ctor(GeoAPI.Geometries.ILineString[])">
            <summary>
            Constructs a <c>MultiLineString</c>.
            </summary>
            <param name="lineStrings">
            The <c>LineString</c>s for this <c>MultiLineString</c>,
            or <c>null</c> or an empty array to create the empty
            point. Elements may be empty <c>LineString</c>s,
            but not <c>null</c>s.
            </param>
            <remarks>
            For create this <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/> is used a standard <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory"/> 
            with <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel"/> <c> == </c> <see cref="F:GeoAPI.Geometries.PrecisionModels.Floating"/>.
            </remarks>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.MultiLineString.Reverse">
            <summary>
            Creates a <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.MultiLineString"/> in the reverse order to this object.
            Both the order of the component LineStrings
            and the order of their coordinate sequences are reversed.
            </summary>
            <returns>a <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.MultiLineString"/> in the reverse order.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.MultiLineString.EqualsExact(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.MultiLineString.Dimension">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.MultiLineString.BoundaryDimension">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.MultiLineString.GeometryType">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.MultiLineString.IsClosed">
            <summary>
            Gets a value indicating whether this instance is closed.
            </summary>
            <value><c>true</c> if this instance is closed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.MultiLineString.IsSimple">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.MultiLineString.Boundary">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Algorithm.SimplePointInAreaLocator">
            <summary>
            Computes whether a point
            lies in the interior of an area <c>Geometry</c>.
            The algorithm used is only guaranteed to return correct results
            for points which are not on the boundary of the Geometry.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.SimplePointInAreaLocator.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.SimplePointInAreaLocator.Locate(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.IGeometry)">
            <summary> 
            Locate is the main location function.  It handles both single-element
            and multi-element Geometries.  The algorithm for multi-element Geometries
            is more complex, since it has to take into account the boundaryDetermination rule.
            </summary>
            <param name="geom"></param>
            <param name="p"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.SimplePointInAreaLocator.ContainsPoint(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="geom"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.SimplePointInAreaLocator.ContainsPointInPolygon(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.IPolygon)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="poly"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Utilities.CoordinateArrayFilter">
            <summary>
            A <c>CoordinateFilter</c> that creates an array containing every coordinate in a <c>Geometry</c>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.CoordinateArrayFilter.#ctor(System.Int32)">
            <summary>
            Constructs a <c>CoordinateArrayFilter</c>.
            </summary>
            <param name="size">The number of points that the <c>CoordinateArrayFilter</c> will collect.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.CoordinateArrayFilter.Filter(GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="coord"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Utilities.CoordinateArrayFilter.Coordinates">
            <summary>
            Returns the <c>Coordinate</c>s collected by this <c>CoordinateArrayFilter</c>.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Utilities.AssertionFailedException">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.AssertionFailedException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.AssertionFailedException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdgeStar">
            <summary>
            A sorted collection of <c>DirectedEdge</c>s which leave a <c>Node</c>
            in a <c>PlanarGraph</c>.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdgeStar.outEdges">
            <summary>
            The underlying list of outgoing DirectedEdges.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdgeStar.#ctor">
            <summary>
            Constructs a DirectedEdgeStar with no edges.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdgeStar.Add(GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge)">
            <summary>
            Adds a new member to this DirectedEdgeStar.
            </summary>
            <param name="de"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdgeStar.Remove(GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge)">
            <summary>
            Drops a member of this DirectedEdgeStar.
            </summary>
            <param name="de"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdgeStar.GetEnumerator">
            <summary>
            Returns an Iterator over the DirectedEdges, in ascending order by angle with the positive x-axis.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdgeStar.SortEdges">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdgeStar.GetIndex(GisSharpBlog.NetTopologySuite.Planargraph.Edge)">
            <summary>
            Returns the zero-based index of the given Edge, after sorting in ascending order
            by angle with the positive x-axis.
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdgeStar.GetIndex(GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge)">
            <summary>
            Returns the zero-based index of the given DirectedEdge, after sorting in ascending order
            by angle with the positive x-axis.
            </summary>
            <param name="dirEdge"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdgeStar.GetIndex(System.Int32)">
            <summary> 
            Returns the remainder when i is divided by the number of edges in this
            DirectedEdgeStar. 
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdgeStar.GetNextEdge(GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge)">
            <summary>
            Returns the DirectedEdge on the left-hand side of the given DirectedEdge (which
            must be a member of this DirectedEdgeStar). 
            </summary>
            <param name="dirEdge"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdgeStar.Degree">
            <summary>
            Returns the number of edges around the Node associated with this DirectedEdgeStar.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdgeStar.Coordinate">
            <summary>
            Returns the coordinate for the node at wich this star is based.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdgeStar.Edges">
            <summary>
            Returns the DirectedEdges, in ascending order by angle with the positive x-axis.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Relate.EdgeEndBundleStar">
            <summary>
            An ordered list of <c>EdgeEndBundle</c>s around a <c>RelateNode</c>.
            They are maintained in CCW order (starting with the positive x-axis) around the node
            for efficient lookup and topology building.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.EdgeEndBundleStar.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.EdgeEndBundleStar.Insert(GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd)">
            <summary>
            Insert a EdgeEnd in order in the list.
            If there is an existing EdgeStubBundle which is parallel, the EdgeEnd is
            added to the bundle.  Otherwise, a new EdgeEndBundle is created
            to contain the EdgeEnd.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.EdgeEndBundleStar.UpdateIM(GeoAPI.Geometries.IntersectionMatrix)">
            <summary>
            Update the IM with the contribution for the EdgeStubs around the node.
            </summary>
            <param name="im"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Distance.GeometryLocation">
            <summary>
            Represents the location of a point on a Geometry.
            Maintains both the actual point location (which of course
            may not be exact) as well as information about the component
            and segment index where the point occurs.
            Locations inside area Geometrys will not have an associated segment index,
            so in this case the segment index will have the sentinel value of InsideArea.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.Distance.GeometryLocation.InsideArea">
            <summary>
            Special value of segment-index for locations inside area geometries. These
            locations do not have an associated segment index.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Distance.GeometryLocation.#ctor(GeoAPI.Geometries.IGeometry,System.Int32,GeoAPI.Geometries.ICoordinate)">
            <summary>
            Constructs a GeometryLocation specifying a point on a point, as well as the 
            segment that the point is on (or InsideArea if the point is not on a segment).
            </summary>
            <param name="component"></param>
            <param name="segIndex"></param>
            <param name="pt"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Distance.GeometryLocation.#ctor(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.ICoordinate)">
            <summary> 
            Constructs a GeometryLocation specifying a point inside an area point.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Distance.GeometryLocation.GeometryComponent">
            <summary>
            Returns the point associated with this location.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Distance.GeometryLocation.SegmentIndex">
            <summary>
            Returns the segment index for this location. If the location is inside an
            area, the index will have the value InsideArea;
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Distance.GeometryLocation.Coordinate">
            <summary>
            Returns the location.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Distance.GeometryLocation.IsInsideArea">
            <summary>
            Returns whether this GeometryLocation represents a point inside an area point.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferSubgraph">
            <summary>
            A connected subset of the graph of
            <c>DirectedEdges</c> and <c>Node</c>s.
            Its edges will generate either
            a single polygon in the complete buffer, with zero or more holes, or
            one or more connected holes.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferSubgraph.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferSubgraph.Create(GisSharpBlog.NetTopologySuite.GeometriesGraph.Node)">
            <summary>
            Creates the subgraph consisting of all edges reachable from this node.
            Finds the edges in the graph and the rightmost coordinate.
            </summary>
            <param name="node">A node to start the graph traversal from.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferSubgraph.AddReachable(GisSharpBlog.NetTopologySuite.GeometriesGraph.Node)">
            <summary>
            Adds all nodes and edges reachable from this node to the subgraph.
            Uses an explicit stack to avoid a large depth of recursion.
            </summary>
            <param name="startNode">A node known to be in the subgraph.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferSubgraph.Add(GisSharpBlog.NetTopologySuite.GeometriesGraph.Node,System.Collections.Stack)">
            <summary>
            Adds the argument node and all its out edges to the subgraph
            </summary>
            <param name="node">The node to add.</param>
            <param name="nodeStack">The current set of nodes being traversed.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferSubgraph.ClearVisitedEdges">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferSubgraph.ComputeDepth(System.Int32)">
            <summary>
            
            </summary>
            <param name="outsideDepth"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferSubgraph.ComputeDepths(GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge)">
            <summary>
            Compute depths for all dirEdges via breadth-first traversal of nodes in graph.
            </summary>
            <param name="startEdge">Edge to start processing with.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferSubgraph.ComputeNodeDepth(GisSharpBlog.NetTopologySuite.GeometriesGraph.Node)">
            <summary>
            
            </summary>
            <param name="n"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferSubgraph.CopySymDepths(GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge)">
            <summary>
            
            </summary>
            <param name="de"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferSubgraph.FindResultEdges">
            <summary>
            Find all edges whose depths indicates that they are in the result area(s).
            Since we want polygon shells to be
            oriented CW, choose dirEdges with the interior of the result on the RHS.
            Mark them as being in the result.
            Interior Area edges are the result of dimensional collapses.
            They do not form part of the result area boundary.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferSubgraph.CompareTo(System.Object)">
            <summary>
            BufferSubgraphs are compared on the x-value of their rightmost Coordinate.
            This defines a partial ordering on the graphs such that:
            g1 >= g2 - Ring(g2) does not contain Ring(g1)
            where Polygon(g) is the buffer polygon that is built from g.
            This relationship is used to sort the BufferSubgraphs so that shells are guaranteed to
            be built before holes.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferSubgraph.DirectedEdges">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferSubgraph.Nodes">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Buffer.BufferSubgraph.RightMostCoordinate">
            <summary>
            Gets the rightmost coordinate in the edges of the subgraph.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Noding.SegmentPointComparator">
            <summary>
            Implements a robust method of comparing the relative position of two points along the same segment.
            The coordinates are assumed to lie "near" the segment.
            This means that this algorithm will only return correct results
            if the input coordinates have the same precision and correspond to rounded values
            of exact coordinates lying on the segment.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentPointComparator.Compare(GisSharpBlog.NetTopologySuite.Noding.Octants,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
             Compares two <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/>s for their relative position along a segment
            lying in the specified <see cref="T:GisSharpBlog.NetTopologySuite.Noding.Octant"/>.
            </summary>
            <param name="octant"></param>
            <param name="p0"></param>
            <param name="p1"></param>
            <returns>
            -1 if node0 occurs first, or
             0 if the two nodes are equal, or
             1 if node1 occurs first.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentPointComparator.RelativeSign(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x0"></param>
            <param name="x1"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentPointComparator.CompareValue(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="compareSign0"></param>
            <param name="compareSign1"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeNodingValidator">
            <summary>
            Validates that a collection of SegmentStrings is correctly noded.
            Throws an appropriate exception if an noding error is found.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeNodingValidator.ToSegmentStrings(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="edges"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeNodingValidator.#ctor(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="edges"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeNodingValidator.checkValid">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.Utilities.LinearComponentExtracter">
            <summary> 
            Extracts all the 1-dimensional (<c>LineString</c>) components from a <c>Geometry</c>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.LinearComponentExtracter.GetLines(GeoAPI.Geometries.IGeometry)">
            <summary> 
            Extracts the linear components from a single point.
            If more than one point is to be processed, it is more
            efficient to create a single <c>LineExtracterFilter</c> instance
            and pass it to multiple geometries.
            </summary>
            <param name="geom">The point from which to extract linear components.</param>
            <returns>The list of linear components.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.LinearComponentExtracter.#ctor(System.Collections.IList)">
            <summary> 
            Constructs a LineExtracterFilter with a list in which to store LineStrings found.
            </summary>
            <param name="lines"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Utilities.LinearComponentExtracter.Filter(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArraySequenceFactory">
            <summary>
            Creates CoordinateSequences represented as an array of Coordinates.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArraySequenceFactory.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArraySequenceFactory.Create(GeoAPI.Geometries.ICoordinate[])">
            <summary>
             Returns a CoordinateArraySequence based on the given array (the array is not copied).
            </summary>
            <param name="coordinates">the coordinates, which may not be null nor contain null elements.</param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArraySequenceFactory.Create(GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            
            </summary>
            <param name="coordSeq"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArraySequenceFactory.Create(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
            <param name="dimension">not used</param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArraySequenceFactory.Instance">
            <summary>
            Returns the singleton instance of CoordinateArraySequenceFactory.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Algorithm.SimplePointInRing">
            <summary> 
            Tests whether a <c>Coordinate</c> lies inside
            a ring, using a linear-time algorithm.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Algorithm.SimplePointInRing.pts">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.SimplePointInRing.#ctor(GeoAPI.Geometries.ILinearRing)">
            <summary>
            
            </summary>
            <param name="ring"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.SimplePointInRing.IsInside(GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Algorithm.RobustDeterminant">
            <summary> 
            Implements an algorithm to compute the
            sign of a 2x2 determinant for double precision values robustly.
            It is a direct translation of code developed by Olivier Devillers.
            
            The original code carries the following copyright notice:
            ************************************************************************
            Author : Olivier Devillers
            Olivier.Devillers@sophia.inria.fr
            http:/www.inria.fr:/prisme/personnel/devillers/anglais/determinant.html
            *************************************************************************
            *************************************************************************
            Copyright (c) 1995  by  INRIA Prisme Project
            BP 93 06902 Sophia Antipolis Cedex, France.
            All rights reserved
            *************************************************************************
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.RobustDeterminant.SignOfDet2x2(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <returns>
            returns -1 if the determinant is negative,
            returns  1 if the determinant is positive,
            retunrs  0 if the determinant is null.
            </returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Algorithm.CentroidArea">
            <summary> 
            Computes the centroid of an area point.
            Algorithm:
            Based on the usual algorithm for calculating
            the centroid as a weighted sum of the centroids
            of a decomposition of the area into (possibly overlapping) triangles.
            The algorithm has been extended to handle holes and multi-polygons.
            See <see href="http://www.faqs.org/faqs/graphics/algorithms-faq"/>
            for further details of the basic approach.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.CentroidArea.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.CentroidArea.Add(GeoAPI.Geometries.IGeometry)">
            <summary> 
            Adds the area defined by a Geometry to the centroid total.
            If the point has no area it does not contribute to the centroid.
            </summary>
            <param name="geom">The point to add.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.CentroidArea.Add(GeoAPI.Geometries.ICoordinate[])">
            <summary> 
            Adds the area defined by an array of
            coordinates.  The array must be a ring;
            i.e. end with the same coordinate as it starts with.
            </summary>
            <param name="ring">An array of Coordinates.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.CentroidArea.Add(GeoAPI.Geometries.IPolygon)">
            <summary>
            
            </summary>
            <param name="poly"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.CentroidArea.AddShell(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            
            </summary>
            <param name="pts"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.CentroidArea.AddHole(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            
            </summary>
            <param name="pts"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.CentroidArea.AddTriangle(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,System.Boolean)">
            <summary>
            
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="isPositiveArea"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.CentroidArea.Centroid3(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate@)">
            <summary> 
            Returns three times the centroid of the triangle p1-p2-p3.
            The factor of 3 is
            left in to permit division to be avoided until later.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.CentroidArea.Area2(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            Returns twice the signed area of the triangle p1-p2-p3,
            positive if a,b,c are oriented ccw, and negative if cw.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Algorithm.CentroidArea.Centroid">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Algorithm.CentroidArea.BasePoint">
            <summary>
            
            </summary>
        </member>
        <member name="T:RTools_NTS.Util.Finder">
            <summary>
            This class provides some static methods which are useful
            for file system "find" types of operations, similar to the *nix find
            command.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.Finder.ChangeBackSlashes(System.String)">
            <summary>
            Switch from backslashes to forward slashes.
            Zip file format specifies only forward slashes.
            </summary>
            <param name="s">The input string.</param>
            <returns>string - with backslashes replaced by forward.</returns>
        </member>
        <member name="M:RTools_NTS.Util.Finder.FindFiles(System.String,System.Collections.ArrayList,System.Collections.SortedList@,System.Boolean)">
            <summary>
            Find files under a specified directory and matching any of
            a set of regular expressions. Return them by putting
            (string -> null) entries into the input SortedList.
            The regular expressions are Command Prompt dir command 
            type (like *.cs), not normal regular expressions.
            This optionally puts the directory name itself into the list.
            </summary>
            <remarks>This uses SortedList to get the insertion sort.</remarks>
            <param name="dirName">The directory to find files under. "." works.</param>
            <param name="regexps">List of directory regexp strings, for example *.cs
            and *.bat</param>
            <param name="list">The SortedList to fill.</param>
            <param name="addDirItself">Whether to add the dir name into the list.</param>
            <returns>bool - true for success, false for failure</returns>
        </member>
        <member name="M:RTools_NTS.Util.Finder.FindFiles(System.String,System.String,System.Collections.SortedList@,System.Boolean)">
            <summary>
            Overload with single regular expression.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.Finder.AddParents(System.Collections.SortedList)">
            <summary>
            For each entry in the input SortedList (where the keys in the
            list entries are strings, the file paths) add all parent 
            directories into the list.  So given a list with an entry
            with key "a/b/c", put "a/b" and "a" in the list.
            </summary>
            <remarks>The new entries are string dir name with value null.
            </remarks>
            <param name="list">The SortedList of DictionaryEntry's, with
            string file path keys.</param>
            <returns>true</returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Utilities.ReverseOrder">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.ReverseOrder.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.ReverseOrder.Compare(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Simplify.DouglasPeuckerLineSimplifier">
            <summary>
            Simplifies a line (sequence of points) using
            the standard Douglas-Peucker algorithm.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.DouglasPeuckerLineSimplifier.Simplify(GeoAPI.Geometries.ICoordinate[],System.Double)">
            <summary>
            
            </summary>
            <param name="pts"></param>
            <param name="distanceTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.DouglasPeuckerLineSimplifier.#ctor(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            
            </summary>
            <param name="pts"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.DouglasPeuckerLineSimplifier.Simplify">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Simplify.DouglasPeuckerLineSimplifier.SimplifySection(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="j"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Simplify.DouglasPeuckerLineSimplifier.DistanceTolerance">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Distance.ConnectedElementPointFilter">
            <summary>
            Extracts a single point
            from each connected element in a Geometry
            (e.g. a polygon, linestring or point)
            and returns them in a list
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Distance.ConnectedElementPointFilter.GetCoordinates(GisSharpBlog.NetTopologySuite.Geometries.Geometry)">
            <summary>
            Returns a list containing a Coordinate from each Polygon, LineString, and Point
            found inside the specified point. Thus, if the specified point is
            not a GeometryCollection, an empty list will be returned.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Distance.ConnectedElementPointFilter.#ctor(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="pts"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Distance.ConnectedElementPointFilter.Filter(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Noding.SegmentNode">
            <summary>
            Represents an intersection point between two <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Noding.SegmentNode.Coordinate">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Noding.SegmentNode.SegmentIndex">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentNode.#ctor(GisSharpBlog.NetTopologySuite.Noding.SegmentString,GeoAPI.Geometries.ICoordinate,System.Int32,GisSharpBlog.NetTopologySuite.Noding.Octants)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentNode"/> class.
            </summary>
            <param name="segString"></param>
            <param name="coord"></param>
            <param name="segmentIndex"></param>
            <param name="segmentOctant"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentNode.IsEndPoint(System.Int32)">
            <summary>
            
            </summary>
            <param name="maxSegmentIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentNode.CompareTo(System.Object)">
            <summary>
            </summary>
            <param name="obj"></param>
            <returns>
            -1 this SegmentNode is located before the argument location, or
             0 this SegmentNode is at the argument location, or
             1 this SegmentNode is located after the argument location.   
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.SegmentNode.Write(System.IO.StreamWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Noding.SegmentNode.IsInterior">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LocationIndexedLine">
            <summary>
            Supports linear referencing along a linear <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/>
            using <see cref="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation"/>s as the index.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LocationIndexedLine.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Constructs an object which allows linear referencing along
            a given linear <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/>.
            </summary>
            <param name="linearGeom"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LocationIndexedLine.CheckGeometryType">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LocationIndexedLine.ExtractPoint(GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation)">
            <summary>
            Computes the <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/>for the point on the line at the given index.
            If the <paramref name="index"/> is out of range,
            the first or last point on the line will be returned.
            </summary>
            <param name="index">The index of the desired point.</param>
            <returns>The <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/> at the given index.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LocationIndexedLine.ExtractLine(GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation,GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation)">
            <summary>
            Computes the <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.LineString"/> for the interval
            on the line between the given indices.
            </summary>
            <param name="startIndex">The index of the start of the interval.</param>
            <param name="endIndex">The index of the end of the interval.</param>
            <returns>The linear interval between the indices.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LocationIndexedLine.IndexOf(GeoAPI.Geometries.ICoordinate)">
            <summary>
            Computes the index for a given point on the line.
            The supplied point does not necessarily have to lie precisely
            on the line, but if it is far from the line the accuracy and
            performance of this function is not guaranteed.
            Use <see cref="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LocationIndexedLine.Project(GeoAPI.Geometries.ICoordinate)"/> to compute a guaranteed result for points
            which may be far from the line.
            </summary>
            <param name="pt">A point on the line.</param>
            <returns>The index of the point.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LocationIndexedLine.IndicesOf(GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes the indices for a subline of the line.
            (The subline must conform to the line; that is,
            all vertices in the subline (except possibly the first and last)
            must be vertices of the line and occcur in the same order).
            </summary>
            <param name="subLine">A subLine of the line.</param>
            <returns>A pair of indices for the start and end of the subline.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LocationIndexedLine.Project(GeoAPI.Geometries.ICoordinate)">
            <summary>
            Computes the index for the closest point on the line to the given point.
            If more than one point has the closest distance the first one along the line is returned.
            (The point does not necessarily have to lie precisely on the line.)
            </summary>
            <param name="pt">A point on the line.</param>
            <returns>The index of the point.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LocationIndexedLine.isValidIndex(GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation)">
            <summary>
            Tests whether an index is in the valid index range for the line.
            </summary>
            <param name="index">The index to test.</param>
            <returns><c>true</c> if the index is in the valid range.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LocationIndexedLine.ClampIndex(GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation)">
            <summary>
            Computes a valid index for this line by clamping 
            the given index to the valid range of index values.
            </summary>
            <param name="index"></param>
            <returns>A valid index value.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.LinearReferencing.LocationIndexedLine.StartIndex">
            <summary>
            Returns the index of the start of the line.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.LinearReferencing.LocationIndexedLine.EndIndex">
            <summary>
            Returns the index of the end of the line.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthLocationMap">
            <summary>
            Computes the <see cref="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation"/> for a given length
            along a linear <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/>
            Negative lengths are measured in reverse from end of the linear geometry.
            Out-of-range values are clamped.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthLocationMap.GetLocation(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            Computes the <see cref="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation"/> for a
            given length along a linear <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/>.
            </summary>
            <param name="linearGeom">The linear geometry to use.</param>
            <param name="length">The length index of the location.</param>
            <returns>The <see cref="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation"/> for the length.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthLocationMap.GetLength(GeoAPI.Geometries.IGeometry,GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation)">
            <summary>
            Computes the length for a given <see cref="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation"/>
            on a linear <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/>.
            </summary>
            <param name="linearGeom">The linear geometry to use.</param>
            <param name="loc">The <see cref="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation"/> index of the location.</param>
            <returns>The length for the <see cref="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation"/>.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthLocationMap.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthLocationMap"/> class.
            </summary>
            <param name="linearGeom">A linear geometry.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthLocationMap.GetLocation(System.Double)">
            <summary>
            Compute the <see cref="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation"/> corresponding to a length.
            Negative lengths are measured in reverse from end of the linear geometry.
            Out-of-range values are clamped.
            </summary>
            <param name="length">The length index.</param>
            <returns>The corresponding <see cref="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation"/>.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthLocationMap.GetLocationForward(System.Double)">
            <summary>
            
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthLocationMap.GetLength(GisSharpBlog.NetTopologySuite.LinearReferencing.LinearLocation)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.MyShapeFileReader">
            <summary>
             A class for reading shapefiles data.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.MyShapeFileReader.shapeReader">
            <summary>
            Shape features reader.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.MyShapeFileReader.#ctor">
            <summary>
            Default empty constructor
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.MyShapeFileReader.#ctor(GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory)">
            <summary>
            
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.MyShapeFileReader.Read(System.String)">
            <summary>
            Reads a shapefile containing geographic data, 
            and returns a collection of all the features contained.
            Since NTS Geometry Model not support Z and M data, those informations are ignored if presents in shapefile.
            </summary>
            <param name="filepath">Shapefile path.</param>
            <returns><c>GeometryCollection</c> containing all geometries in shapefile.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.MyShapeFileReader.Read(System.IO.Stream)">
            <summary>
            Reads a generic stream containing geographic data saved as shapefile structure, 
            and returns a collection of all the features contained.
            Since NTS Geometry Model not support Z and M data, those informations are ignored if presents in shapefile.
            </summary>
            <param name="stream">Shapefile data stream.</param>
            <returns><c>GeometryCollection</c> containing all geometries in shapefile.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.MyShapeFileReader.ReadPointData(System.IO.Stream)">
            <summary>
            Reads Point shapefile
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.MyShapeFileReader.ReadFeatureHeader(GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryReader)">
            <summary>
            
            </summary>
            <param name="beReader"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.MyShapeFileReader.ReadLineStringData(System.IO.Stream)">
            <summary>
            Reads LineString shapefile
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.MyShapeFileReader.ReadPolygonData(System.IO.Stream)">
            <summary>
            Reads Polygon shapefile
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.MyShapeFileReader.ReadMultiPointData(System.IO.Stream)">
            <summary>
            Reads MultiPoint shapefile
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Strtree.SIRtree">
            <summary>
            One-dimensional version of an STR-packed R-tree. SIR stands for
            "Sort-Interval-Recursive". STR-packed R-trees are described in:
            P. Rigaux, Michel Scholl and Agnes Voisard. Spatial Databases With
            Application To GIS. Morgan Kaufmann, San Francisco, 2002.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.SIRtree.#ctor">
            <summary> 
            Constructs an SIRtree with the default (10) node capacity.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.SIRtree.#ctor(System.Int32)">
            <summary> 
            Constructs an SIRtree with the given maximum number of child nodes that
            a node may have.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.SIRtree.CreateNode(System.Int32)">
            <summary>
            
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.SIRtree.Insert(System.Double,System.Double,System.Object)">
            <summary> 
            Inserts an item having the given bounds into the tree.
            </summary>
            <param name="x1"></param>
            <param name="x2"></param>
            <param name="item"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.SIRtree.Query(System.Double)">
            <summary>
            Returns items whose bounds intersect the given value.
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.SIRtree.Query(System.Double,System.Double)">
            <summary> 
            Returns items whose bounds intersect the given bounds.
            </summary>
            <param name="x1">Possibly equal to x2.</param>
            <param name="x2">Possibly equal to x1.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.SIRtree.GetComparer">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Strtree.SIRtree.IntersectsOp">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Strtree.SIRtree.AnnonymousComparerImpl">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.SIRtree.AnnonymousComparerImpl.Compare(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Strtree.SIRtree.AnonymousIntersectsOpImpl">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.SIRtree.AnonymousIntersectsOpImpl.Intersects(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="aBounds"></param>
            <param name="bBounds"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Strtree.SIRtree.AnonymousAbstractNodeImpl">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.SIRtree.AnonymousAbstractNodeImpl.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="nodeCapacity"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Strtree.SIRtree.AnonymousAbstractNodeImpl.ComputeBounds">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.NodeMap">
            <summary> 
            A map of nodes, indexed by the coordinate of the node.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.NodeMap.#ctor(GisSharpBlog.NetTopologySuite.GeometriesGraph.NodeFactory)">
            <summary>
            
            </summary>
            <param name="nodeFact"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.NodeMap.AddNode(GeoAPI.Geometries.ICoordinate)">
            <summary> 
            This method expects that a node has a coordinate value.
            </summary>
            <param name="coord"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.NodeMap.AddNode(GisSharpBlog.NetTopologySuite.GeometriesGraph.Node)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.NodeMap.Add(GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd)">
            <summary> 
            Adds a node for the start point of this EdgeEnd
            (if one does not already exist in this map).
            Adds the EdgeEnd to the (possibly new) node.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.NodeMap.Find(GeoAPI.Geometries.ICoordinate)">
            <returns> 
            The node if found; null otherwise.
            </returns>
            <param name="coord"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.NodeMap.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.NodeMap.GetBoundaryNodes(System.Int32)">
            <summary>
            
            </summary>
            <param name="geomIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.NodeMap.Write(System.IO.StreamWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.NodeMap.Values">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.Point">
            <summary>
            Basic implementation of <c>Point</c>.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.Point.Empty">
            <summary>
            Represents an empty <c>Point</c>.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.Point.coordinates">
            <summary>  
            The <c>Coordinate</c> wrapped by this <c>Point</c>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Point.#ctor(GeoAPI.Geometries.ICoordinate)">
            <summary>
            Initializes a new instance of the <see cref="T:Point"/> class.
            </summary>
            <param name="coordinate">The coordinate used for create this <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Point"/>.</param>
            <remarks>
            For create this <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/> is used a standard <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory"/> 
            with <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel"/> <c> == </c> <see cref="F:GeoAPI.Geometries.PrecisionModels.Floating"/>.
            </remarks>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Point.#ctor(GeoAPI.Geometries.ICoordinateSequence,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Constructs a <c>Point</c> with the given coordinate.
            </summary>
            <param name="coordinates">
            Contains the single coordinate on which to base this <c>Point</c>,
            or <c>null</c> to create the empty point.
            </param>
            <param name="factory"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Point.ComputeEnvelopeInternal">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Point.EqualsExact(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Point.Apply(GeoAPI.Geometries.ICoordinateFilter)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Point.Apply(GeoAPI.Geometries.IGeometryFilter)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Point.Apply(GeoAPI.Geometries.IGeometryComponentFilter)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Point.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Point.Normalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Point.CompareToSameClass(System.Object)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Point.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Point"/> class.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="z">The z coordinate.</param>
            /// <remarks>
            For create this <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/> is used a standard <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory"/> 
            with <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel"/> <c> set to </c> <see cref="F:GeoAPI.Geometries.PrecisionModels.Floating"/>.
            </remarks>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Point.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Point"/> class.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            /// <remarks>
            For create this <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/> is used a standard <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory"/> 
            with <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel"/> <c> set to </c> <see cref="F:GeoAPI.Geometries.PrecisionModels.Floating"/>.
            </remarks>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Point.CoordinateSequence">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Point.Coordinates">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Point.NumPoints">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Point.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Point.IsSimple">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Point.IsValid">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Point.Dimension">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Point.BoundaryDimension">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Point.X">
            <summary>
            
            </summary>        
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Point.Y">
            <summary>
            
            </summary>        
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Point.Coordinate">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Point.GeometryType">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Point.Boundary">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Point.Z">
            <summary>
            
            </summary>        
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.LinearRing">
            <summary>  
            Basic implementation of <c>LinearRing</c>.
            The first and last point in the coordinate sequence must be equal.
            Either orientation of the ring is allowed.
            A valid ring must not self-intersect.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.LineString">
            <summary>  
            Basic implementation of <c>LineString</c>.
            </summary>  
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.LineString.Empty">
            <summary>
            Represents an empty <c>LineString</c>.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Geometries.LineString.points">
            <summary>  
            The points of this <c>LineString</c>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineString.#ctor(GeoAPI.Geometries.ICoordinateSequence,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            
            </summary>
            <param name="points">
            The points of the linestring, or <c>null</c>
            to create the empty point. Consecutive points may not be equal.
            </param>
            <param name="factory"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineString.GetCoordinateN(System.Int32)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineString.GetPointN(System.Int32)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineString.Reverse">
            <summary>
            Creates a <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.LineString"/> whose coordinates are in the reverse order of this objects.
            </summary>
            <returns>A <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.LineString"/> with coordinates in the reverse order.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineString.IsCoordinate(GeoAPI.Geometries.ICoordinate)">
            <summary>
            Returns true if the given point is a vertex of this <c>LineString</c>.
            </summary>
            <param name="pt">The <c>Coordinate</c> to check.</param>
            <returns><c>true</c> if <c>pt</c> is one of this <c>LineString</c>'s vertices.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineString.ComputeEnvelopeInternal">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineString.EqualsExact(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineString.Apply(GeoAPI.Geometries.ICoordinateFilter)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineString.Apply(GeoAPI.Geometries.IGeometryFilter)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineString.Apply(GeoAPI.Geometries.IGeometryComponentFilter)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineString.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineString.Normalize">
            <summary> 
            Normalizes a <c>LineString</c>.  A normalized linestring
            has the first point which is not equal to it's reflected point
            less than the reflected point.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineString.CompareToSameClass(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LineString.#ctor(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Initializes a new instance of the <see cref="T:LineString"/> class.
            </summary>        
            <remarks>
            For create this <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/> is used a standard <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory"/> 
            with <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel"/> <c> == </c> <see cref="F:GeoAPI.Geometries.PrecisionModels.Floating"/>.
            </remarks>
            <param name="points">The coordinates used for create this <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.LineString"/>.</param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.LineString.Coordinates">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.LineString.CoordinateSequence">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.LineString.Coordinate">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.LineString.Dimension">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.LineString.BoundaryDimension">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.LineString.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.LineString.NumPoints">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.LineString.StartPoint">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.LineString.EndPoint">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.LineString.IsClosed">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.LineString.IsRing">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.LineString.GeometryType">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.LineString.Length">
            <summary>  
            Returns the length of this <c>LineString</c>
            </summary>
            <returns>The length of the polygon.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.LineString.IsSimple">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.LineString.Boundary">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.LineString.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.LineString.Count">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.LineString.Angle">
            <summary>
            Returns the value of the angle between the <see cref="P:GisSharpBlog.NetTopologySuite.Geometries.LineString.StartPoint"/>
            and the <see cref="P:GisSharpBlog.NetTopologySuite.Geometries.LineString.EndPoint"/>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LinearRing.#ctor(GeoAPI.Geometries.ICoordinateSequence,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Constructs a <c>LinearRing</c> with the given points.
            </summary>
            <param name="points">
            Points forming a closed and simple linestring, or
            <c>null</c> or an empty array to create the empty point.
            This array must not contain <c>null</c> elements.
            </param>
            <param name="factory"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LinearRing.ValidateConstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.LinearRing.#ctor(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Initializes a new instance of the <see cref="T:LinearRing"/> class.
            </summary>
            <param name="points">The points used for create this instance.</param>
            <remarks>
            For create this <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/> is used a standard <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory"/> 
            with <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel"/> <c> == </c> <see cref="F:GeoAPI.Geometries.PrecisionModels.Floating"/>.
            </remarks>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.LinearRing.IsSimple">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.LinearRing.GeometryType">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.LinearRing.IsClosed">
            <summary>
            
            </summary>
        </member>
        <member name="T:Iesi_NTS.Collections.Generic.SetWrapper`1">
            <summary>
            A wrapper that can wrap a ISet as a generic ISet&lt;T&gt; 
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            In most operations, there is no copying of collections. The wrapper just delegate the function to the wrapped.
            The following functions' implementation may involve collection copying:
            Union, Intersect, Minus, ExclusiveOr, ContainsAll, AddAll, RemoveAll, RetainAll
            </remarks>
            <exception cref="T:System.InvalidCastException">
            If the wrapped has any item that is not of Type T, InvalidCastException could be thrown at any time
            </exception>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Precision.EnhancedPrecisionOp">
            <summary>
            Provides versions of Geometry spatial functions which use
            enhanced precision techniques to reduce the likelihood of robustness problems.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.EnhancedPrecisionOp.#ctor">
            <summary>
            Only static methods!
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.EnhancedPrecisionOp.Intersection(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes the set-theoretic intersection of two <c>Geometry</c>s, using enhanced precision.
            </summary>
            <param name="geom0">The first Geometry.</param>
            <param name="geom1">The second Geometry.</param>
            <returns>The Geometry representing the set-theoretic intersection of the input Geometries.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.EnhancedPrecisionOp.Union(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes the set-theoretic union of two <c>Geometry</c>s, using enhanced precision.
            </summary>
            <param name="geom0">The first Geometry.</param>
            <param name="geom1">The second Geometry.</param>
            <returns>The Geometry representing the set-theoretic union of the input Geometries.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.EnhancedPrecisionOp.Difference(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes the set-theoretic difference of two <c>Geometry</c>s, using enhanced precision.
            </summary>
            <param name="geom0">The first Geometry.</param>
            <param name="geom1">The second Geometry.</param>
            <returns>The Geometry representing the set-theoretic difference of the input Geometries.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.EnhancedPrecisionOp.SymDifference(GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes the set-theoretic symmetric difference of two <c>Geometry</c>s, using enhanced precision.
            </summary>
            <param name="geom0">The first Geometry.</param>
            <param name="geom1">The second Geometry.</param>
            <returns>The Geometry representing the set-theoretic symmetric difference of the input Geometries.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.EnhancedPrecisionOp.Buffer(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>
            Computes the buffer of a <c>Geometry</c>, using enhanced precision.
            This method should no longer be necessary, since the buffer algorithm
            now is highly robust.
            </summary>
            <param name="geom">The first Geometry.</param>
            <param name="distance">The buffer distance.</param>
            <returns>The Geometry representing the buffer of the input Geometry.</returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Precision.CommonBitsRemover">
            <summary>
            Allow computing and removing common mantissa bits from one or more Geometries.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.CommonBitsRemover.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.CommonBitsRemover.Add(GeoAPI.Geometries.IGeometry)">
            <summary>
            Add a point to the set of geometries whose common bits are
            being computed.  After this method has executed the
            common coordinate reflects the common bits of all added
            geometries.
            </summary>
            <param name="geom">A Geometry to test for common bits.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.CommonBitsRemover.RemoveCommonBits(GeoAPI.Geometries.IGeometry)">
            <summary>
            Removes the common coordinate bits from a Geometry.
            The coordinates of the Geometry are changed.
            </summary>
            <param name="geom">The Geometry from which to remove the common coordinate bits.</param>
            <returns>The shifted Geometry.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.CommonBitsRemover.AddCommonBits(GeoAPI.Geometries.IGeometry)">
            <summary>
            Adds the common coordinate bits back into a Geometry.
            The coordinates of the Geometry are changed.
            </summary>
            <param name="geom">The Geometry to which to add the common coordinate bits.</param>
            <returns>The shifted Geometry.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Precision.CommonBitsRemover.CommonCoordinate">
            <summary>
            The common bits of the Coordinates in the supplied Geometries.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Precision.CommonBitsRemover.CommonCoordinateFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.CommonBitsRemover.CommonCoordinateFilter.Filter(GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="coord"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Precision.CommonBitsRemover.CommonCoordinateFilter.CommonCoordinate">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Precision.CommonBitsRemover.Translater">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.CommonBitsRemover.Translater.#ctor(GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="trans"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Precision.CommonBitsRemover.Translater.Filter(GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="coord"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Valid.SimpleNestedRingTester">
            <summary>
            Tests whether any of a set of <c>LinearRing</c>s are
            nested inside another ring in the set, using a simple O(n^2)
            comparison.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.SimpleNestedRingTester.#ctor(GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.SimpleNestedRingTester.Add(GeoAPI.Geometries.ILinearRing)">
            <summary>
            
            </summary>
            <param name="ring"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.SimpleNestedRingTester.IsNonNested">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Valid.SimpleNestedRingTester.NestedPoint">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateNodeGraph">
            <summary>
            Implements the simple graph of Nodes and EdgeEnd which is all that is
            required to determine topological relationships between Geometries.
            Also supports building a topological graph of a single Geometry, to
            allow verification of valid topology.    
            It is not necessary to create a fully linked
            PlanarGraph to determine relationships, since it is sufficient
            to know how the Geometries interact locally around the nodes.
            In fact, this is not even feasible, since it is not possible to compute
            exact intersection points, and hence the topology around those nodes
            cannot be computed robustly.
            The only Nodes that are created are for improper intersections;
            that is, nodes which occur at existing vertices of the Geometries.
            Proper intersections (e.g. ones which occur between the interior of line segments)
            have their topology determined implicitly, without creating a Node object
            to represent them.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateNodeGraph.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateNodeGraph.GetNodeEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateNodeGraph.Build(GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            
            </summary>
            <param name="geomGraph"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateNodeGraph.ComputeIntersectionNodes(GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph,System.Int32)">
            <summary>
            Insert nodes for all intersections on the edges of a Geometry.
            Label the created nodes the same as the edge label if they do not already have a label.
            This allows nodes created by either self-intersections or
            mutual intersections to be labelled.
            Endpoint nodes will already be labelled from when they were inserted.
            Precondition: edge intersections have been computed.
            </summary>
            <param name="geomGraph"></param>
            <param name="argIndex"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateNodeGraph.CopyNodesAndLabels(GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph,System.Int32)">
            <summary>
            Copy all nodes from an arg point into this graph.
            The node label in the arg point overrides any previously computed
            label for that argIndex.
            (E.g. a node may be an intersection node with
            a computed label of Boundary,
            but in the original arg Geometry it is actually
            in the interior due to the Boundary Determination Rule).
            </summary>
            <param name="geomGraph"></param>
            <param name="argIndex"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateNodeGraph.InsertEdgeEnds(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="ee"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeDirectedEdge">
            <summary>
            A <c>DirectedEdge</c> of a <c>PolygonizeGraph</c>, which represents
            an edge of a polygon formed by the graph.
            May be logically deleted from the graph by setting the <c>marked</c> flag.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge">
            <summary>
            Represents a directed edge in a <c>PlanarGraph</c>. A DirectedEdge may or
            may not have a reference to a parent Edge (some applications of
            planar graphs may not require explicit Edge objects to be created). Usually
            a client using a <c>PlanarGraph</c> will subclass <c>DirectedEdge</c>
            to add its own application-specific data and methods.    
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge.ToEdges(System.Collections.IList)">
            <summary>
            Returns a List containing the parent Edge (possibly null) for each of the given
            DirectedEdges.
            </summary>
            <param name="dirEdges"></param>
            <returns></returns>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge.parentEdge">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge.from">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge.to">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge.p0">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge.p1">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge.sym">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge.edgeDirection">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge.quadrant">
            <summary>
            
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge.angle">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge.#ctor(GisSharpBlog.NetTopologySuite.Planargraph.Node,GisSharpBlog.NetTopologySuite.Planargraph.Node,GeoAPI.Geometries.ICoordinate,System.Boolean)">
            <summary>
            Constructs a DirectedEdge connecting the <c>from</c> node to the
            <c>to</c> node.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="directionPt">
            Specifies this DirectedEdge's direction (given by an imaginary
            line from the <c>from</c> node to <c>directionPt</c>).
            </param>
            <param name="edgeDirection">
            Whether this DirectedEdge's direction is the same as or
            opposite to that of the parent Edge (if any).
            </param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge.CompareTo(System.Object)">
            <summary>
            Returns 1 if this DirectedEdge has a greater angle with the
            positive x-axis than b", 0 if the DirectedEdges are collinear, and -1 otherwise.
            Using the obvious algorithm of simply computing the angle is not robust,
            since the angle calculation is susceptible to roundoff. A robust algorithm
            is:
            first compare the quadrants. If the quadrants are different, it it
            trivial to determine which vector is "greater".
            if the vectors lie in the same quadrant, the robust
            <c>RobustCGAlgorithms.ComputeOrientation(Coordinate, Coordinate, Coordinate)</c>
            function can be used to decide the relative orientation of the vectors.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge.CompareDirection(GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge)">
            <summary>
            Returns 1 if this DirectedEdge has a greater angle with the
            positive x-axis than b", 0 if the DirectedEdges are collinear, and -1 otherwise.
            Using the obvious algorithm of simply computing the angle is not robust,
            since the angle calculation is susceptible to roundoff. A robust algorithm
            is:
            first compare the quadrants. If the quadrants are different, it it
            trivial to determine which vector is "greater".
            if the vectors lie in the same quadrant, the robust
            <c>RobustCGAlgorithms.ComputeOrientation(Coordinate, Coordinate, Coordinate)</c>
            function can be used to decide the relative orientation of the vectors.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge.Write(System.IO.StreamWriter)">
            <summary>
            Writes a detailed string representation of this DirectedEdge to the given PrintStream.
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge.Remove">
            <summary>
            Removes this directed edge from its containing graph.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge.Edge">
            <summary>
            Returns this DirectedEdge's parent Edge, or null if it has none.
            Associates this DirectedEdge with an Edge (possibly null, indicating no associated
            Edge).
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge.Quadrant">
            <summary>
            Returns 0, 1, 2, or 3, indicating the quadrant in which this DirectedEdge's
            orientation lies.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge.DirectionPt">
            <summary>
            Returns a point to which an imaginary line is drawn from the from-node to
            specify this DirectedEdge's orientation.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge.EdgeDirection">
            <summary>
            Returns whether the direction of the parent Edge (if any) is the same as that
            of this Directed Edge.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge.FromNode">
            <summary>
            Returns the node from which this DirectedEdge leaves.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge.ToNode">
            <summary>
            Returns the node to which this DirectedEdge goes.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge.Coordinate">
            <summary>
            Returns the coordinate of the from-node.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge.Angle">
            <summary>
            Returns the angle that the start of this DirectedEdge makes with the
            positive x-axis, in radians.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge.Sym">
            <summary>
            Returns the symmetric DirectedEdge -- the other DirectedEdge associated with
            this DirectedEdge's parent Edge.
            Sets this DirectedEdge's symmetric DirectedEdge, which runs in the opposite
            direction.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Planargraph.DirectedEdge.IsRemoved">
            <summary>
            Tests whether this component has been removed from its containing graph.
            </summary>
            <value></value>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeDirectedEdge.#ctor(GisSharpBlog.NetTopologySuite.Planargraph.Node,GisSharpBlog.NetTopologySuite.Planargraph.Node,GeoAPI.Geometries.ICoordinate,System.Boolean)">
            <summary>
            Constructs a directed edge connecting the <c>from</c> node to the
            <c>to</c> node.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="directionPt">
            Specifies this DirectedEdge's direction (given by an imaginary
            line from the <c>from</c> node to <c>directionPt</c>).
            </param>
            <param name="edgeDirection">
            Whether this DirectedEdge's direction is the same as or
            opposite to that of the parent Edge (if any).
            </param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeDirectedEdge.Label">
            <summary> 
            Returns the identifier attached to this directed edge.
            Attaches an identifier to this directed edge.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeDirectedEdge.Next">
            <summary>
            Returns the next directed edge in the EdgeRing that this directed edge is a member of.
            Sets the next directed edge in the EdgeRing that this directed edge is a member of.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeDirectedEdge.IsInRing">
            <summary>
            Returns the ring of directed edges that this directed edge is
            a member of, or null if the ring has not been set.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Polygonize.PolygonizeDirectedEdge.Ring">
            <summary> 
            Gets/Sets the ring of directed edges that this directed edge is
            a member of.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineMergeDirectedEdge">
            <summary>
            A <c>com.vividsolutions.jts.planargraph.DirectedEdge</c> of a <c>LineMergeGraph</c>. 
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineMergeDirectedEdge.#ctor(GisSharpBlog.NetTopologySuite.Planargraph.Node,GisSharpBlog.NetTopologySuite.Planargraph.Node,GeoAPI.Geometries.ICoordinate,System.Boolean)">
            <summary>
            Constructs a LineMergeDirectedEdge connecting the <c>from</c> node to the <c>to</c> node.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="directionPt">
            specifies this DirectedEdge's direction (given by an imaginary
            line from the <c>from</c> node to <c>directionPt</c>).
            </param>
            <param name="edgeDirection">
            whether this DirectedEdge's direction is the same as or
            opposite to that of the parent Edge (if any).
            </param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineMergeDirectedEdge.Next">
            <summary>
            Returns the directed edge that starts at this directed edge's end point, or null
            if there are zero or multiple directed edges starting there.  
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.IsSimpleOp">
            <summary>
            Tests whether a <c>Geometry</c> is simple.
            Only <c>Geometry</c>s whose definition allows them
            to be simple or non-simple are tested.  (E.g. Polygons must be simple
            by definition, so no test is provided.  To test whether a given Polygon is valid,
            use <c>Geometry.IsValid</c>)
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.IsSimpleOp.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.IsSimpleOp.IsSimple(GeoAPI.Geometries.ILineString)">
            <summary>
            
            </summary>
            <param name="geom"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.IsSimpleOp.IsSimple(GeoAPI.Geometries.IMultiLineString)">
            <summary>
            
            </summary>
            <param name="geom"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.IsSimpleOp.IsSimple(GeoAPI.Geometries.IMultiPoint)">
            <summary>
            A MultiPoint is simple if it has no repeated points.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.IsSimpleOp.IsSimpleLinearGeometry(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.IsSimpleOp.HasNonEndpointIntersection(GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary>
            For all edges, check if there are any intersections which are NOT at an endpoint.
            The Geometry is not simple if there are intersections not at endpoints.
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.IsSimpleOp.HasClosedEndpointIntersection(GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph)">
            <summary> 
            Test that no edge intersection is the
            endpoint of a closed line.  To check this we compute the
            degree of each endpoint. The degree of endpoints of closed lines
            must be exactly 2.
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.IsSimpleOp.AddEndpoint(System.Collections.IDictionary,GeoAPI.Geometries.ICoordinate,System.Boolean)">
            <summary>
            Add an endpoint to the map, creating an entry for it if none exists.
            </summary>
            <param name="endPoints"></param>
            <param name="p"></param>
            <param name="isClosed"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.IsSimpleOp.EndpointInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.IsSimpleOp.EndpointInfo.#ctor(GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.IsSimpleOp.EndpointInfo.AddEndpoint(System.Boolean)">
            <summary>
            
            </summary>
            <param name="isClosed"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.IsSimpleOp.EndpointInfo.Point">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.IsSimpleOp.EndpointInfo.IsClosed">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.IsSimpleOp.EndpointInfo.Degree">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Distance.ConnectedElementLocationFilter">
            <summary>
            A ConnectedElementPointFilter extracts a single point
            from each connected element in a Geometry
            (e.g. a polygon, linestring or point)
            and returns them in a list. The elements of the list are 
            <c>com.vividsolutions.jts.operation.distance.GeometryLocation</c>s.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Distance.ConnectedElementLocationFilter.GetLocations(GeoAPI.Geometries.IGeometry)">
            <summary>
            Returns a list containing a point from each Polygon, LineString, and Point
            found inside the specified point. Thus, if the specified point is
            not a GeometryCollection, an empty list will be returned. The elements of the list 
            are <c>com.vividsolutions.jts.operation.distance.GeometryLocation</c>s.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Distance.ConnectedElementLocationFilter.#ctor(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="locations"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Distance.ConnectedElementLocationFilter.Filter(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="geom"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Noding.Snapround.SimpleSnapRounder">
            <summary>
            Uses Snap Rounding to compute a rounded,
            fully noded arrangement from a set of <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s.
            Implements the Snap Rounding technique described in Hobby, Guibas and Marimont, and Goodrich et al.
            Snap Rounding assumes that all vertices lie on a uniform grid
            (hence the precision model of the input must be fixed precision,
            and all the input vertices must be rounded to that precision).
            <para>
            This implementation uses simple iteration over the line segments.
            This implementation appears to be fully robust using an integer precision model.
            It will function with non-integer precision models, but the
            results are not 100% guaranteed to be correctly noded.
            </para>
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.SimpleSnapRounder.#ctor(GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel)">
            <summary>
            Initializes a new instance of the <see cref="T:GisSharpBlog.NetTopologySuite.Noding.Snapround.SimpleSnapRounder"/> class.
            </summary>
            <param name="pm">The <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.PrecisionModel"/> to use.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.SimpleSnapRounder.GetNodedSubstrings">
            <summary>
            Returns a <see cref="T:System.Collections.IList"/> of fully noded <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s.
            The <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s have the same context as their parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.SimpleSnapRounder.ComputeNodes(System.Collections.IList)">
            <summary>
            Computes the noding for a collection of <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s.
            Some Noders may add all these nodes to the input <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s;
            others may only add some or none at all.
            </summary>
            <param name="inputSegmentStrings"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.SimpleSnapRounder.CheckCorrectness(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="inputSegmentStrings"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.SimpleSnapRounder.SnapRound(System.Collections.IList,GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector)">
            <summary>
            
            </summary>
            <param name="segStrings"></param>
            <param name="li"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.SimpleSnapRounder.FindInteriorIntersections(System.Collections.IList,GisSharpBlog.NetTopologySuite.Algorithm.LineIntersector)">
            <summary>
            Computes all interior intersections in the collection of <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>s,
            and returns their <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/>s.
            Does NOT node the segStrings.
            </summary>
            <param name="segStrings"></param>
            <param name="li"></param>
            <returns>A list of <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/>s for the intersections.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.SimpleSnapRounder.ComputeSnaps(System.Collections.IList,System.Collections.IList)">
            <summary>
            Computes nodes introduced as a result of snapping segments to snap points (hot pixels).
            </summary>
            <param name="segStrings"></param>
            <param name="snapPts"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.SimpleSnapRounder.ComputeSnaps(GisSharpBlog.NetTopologySuite.Noding.SegmentString,System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="ss"></param>
            <param name="snapPts"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.SimpleSnapRounder.ComputeVertexSnaps(System.Collections.IList)">
            <summary>
            Computes nodes introduced as a result of
            snapping segments to vertices of other segments.
            </summary>
            <param name="edges"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.SimpleSnapRounder.ComputeVertexSnaps(GisSharpBlog.NetTopologySuite.Noding.SegmentString,GisSharpBlog.NetTopologySuite.Noding.SegmentString)">
            <summary>
            Performs a brute-force comparison of every segment in each <see cref="T:GisSharpBlog.NetTopologySuite.Noding.SegmentString"/>.
            This has n^2 performance.
            </summary>
            <param name="e0"></param>
            <param name="e1"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Noding.Snapround.SimpleSnapRounder.AddSnappedNode(GisSharpBlog.NetTopologySuite.Noding.Snapround.HotPixel,GisSharpBlog.NetTopologySuite.Noding.SegmentString,System.Int32)">
            <summary>
            Adds a new node (equal to the snap pt) to the segment
            if the segment passes through the hot pixel.
            </summary>
            <param name="hotPix"></param>
            <param name="segStr"></param>
            <param name="segIndex"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.MyShapeFileWriter">
            <summary>
             A class for writing shapefiles data.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.IO.MyShapeFileWriter.shapeWriter">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.MyShapeFileWriter.#ctor">
            <summary>
            Default empty constructor
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.MyShapeFileWriter.Write(GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection,System.String)">
            <summary>
            Writes an homogeneus <c>GometryCollection</c> into a binary shapefile.
            </summary>
            <param name="geometries">If geometries are not of the same type throws <c>System.ArgumentException</c>.</param>
            <param name="shapepath">Path of the shapefile to create: will be created a new file using the given path.
            if file exists throws <c>System.IO.IOException</c>.</param>        
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.MyShapeFileWriter.Write(GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection,System.IO.Stream)">
            <summary>
            Writes an homogeneus <c>GometryCollection</c> into a binary stream.
            </summary>
            <param name="geometries"></param>
            <param name="stream"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.MyShapeFileWriter.Write(GisSharpBlog.NetTopologySuite.Geometries.Geometry,System.IO.BinaryWriter,GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryWriter)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <param name="leWriter"></param>
            <param name="beWriter"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.MyShapeFileWriter.GetShapeType(GisSharpBlog.NetTopologySuite.Geometries.Geometry)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.MyShapeFileWriter.WriteHeaderFile(GisSharpBlog.NetTopologySuite.Geometries.GeometryCollection,System.IO.BinaryWriter,GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryWriter,System.Int32)">
            <summary>
            
            </summary>
            <param name="geometries"></param>
            <param name="beWriter">Big Endian Writer</param>
            <param name="leWriter">Little Endian Endian Writer</param>
            <param name="streamLength"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.MyShapeFileWriter.WriteFeatureHeader(GisSharpBlog.NetTopologySuite.Geometries.Geometry,GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryWriter)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <param name="beWriter"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.ParseException">
            <summary>  
            Thrown by a <c>WKTReader</c> when a parsing problem occurs.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ParseException.#ctor(System.String)">
            <summary>
            Creates a <c>ParseException</c> with the given detail message.
            </summary>
            <param name="message">A description of this <c>ParseException</c>.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.ParseException.#ctor(System.Exception)">
            <summary>  
            Creates a <c>ParseException</c> with <c>e</c>s detail message.
            </summary>
            <param name="e">An exception that occurred while a <c>WKTReader</c> was
            parsing a Well-known Text string.</param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.Shapefile">
            <summary>
            This class is used to read and write ESRI Shapefiles.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Shapefile.GetShapeType(GeoAPI.Geometries.IGeometry)">
            <summary>
            Given a geomtery object, returns the equilivent shape file type.
            </summary>
            <param name="geom">A Geometry object.</param>
            <returns>The equilivent for the geometry object.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Shapefile.GetShapeHandler(GisSharpBlog.NetTopologySuite.IO.ShapeGeometryType)">
            <summary>
            Returns the appropriate class to convert a shaperecord to an OGIS geometry given the type of shape.
            </summary>
            <param name="type">The shapefile type.</param>
            <returns>An instance of the appropriate handler to convert the shape record to a Geometry object.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Shapefile.CreateDataReader(System.String,GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory)">
            <summary>
            Returns an ShapefileDataReader representing the data in a shapefile.
            </summary>
            <param name="filename">The filename (minus the . and extension) to read.</param>
            <param name="geometryFactory">The geometry factory to use when creating the objects.</param>
            <returns>An ShapefileDataReader representing the data in the shape file.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Shapefile.CreateDataTable(System.String,System.String,GisSharpBlog.NetTopologySuite.Geometries.GeometryFactory)">
            <summary>
            Creates a DataTable representing the information in a shape file.
            </summary>
            <param name="filename">The filename (minus the . and extension) to read.</param>
            <param name="tableName">The name to give to the table.</param>
            <param name="geometryFactory">The geometry factory to use when creating the objects.</param>
            <returns>DataTable representing the data </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Shapefile.ImportShapefile(System.String,System.String,System.String)">
            <summary>
            Imports a shapefile into a database table.
            </summary>
            <remarks>
            This method assumes a table has already been crated in the database.
            Calling this method does not close the connection that is passed in.
            </remarks>
            <param name="filename"></param>
            <param name="connectionstring"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Shapefile.CreateDbTable(System.Data.DataTable,System.Boolean)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <param name="deleteExisting"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.Shapefile.GetDbType(System.Type,System.Int32)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.GML2.GMLElements">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryReader">
            <summary>
            Extends the <see cref="T:System.IO.BinaryReader"/> class to allow reading of integers and doubles 
            in the Big Endian format.
            </summary>
            <remarks>
            The BinaryReader uses Little Endian format when reading binary streams.
            </remarks>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the BigEndianBinaryReader class 
            based on the supplied stream and using UTF8Encoding.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the BigEndianBinaryReader class 
            based on the supplied stream and a specific character encoding.
            </summary>
            <param name="input"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryReader.ReadInt32BE">
            <summary>
            Reads a 4-byte signed integer using the big-endian layout 
            from the current stream and advances the current position of the stream by four bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryReader.ReadDoubleBE">
            <summary>
            Reads a 8-byte signed double using the big-endian layout 
            from the current stream and advances the current position of the stream by eight bytes.
            </summary>
            <returns></returns>        
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Quadtree.DoubleBits">
            <summary>
            DoubleBits manipulates Double numbers
            by using bit manipulation and bit-field extraction.
            For some operations (such as determining the exponent)
            this is more accurate than using mathematical operations
            (which suffer from round-off error).
            The algorithms and constants in this class
            apply only to IEEE-754 double-precision floating point format.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Index.Quadtree.DoubleBits.ExponentBias">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.DoubleBits.PowerOf2(System.Int32)">
            <summary>
            
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.DoubleBits.GetExponent(System.Double)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.DoubleBits.TruncateToPowerOfTwo(System.Double)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.DoubleBits.ToBinaryString(System.Double)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.DoubleBits.MaximumCommonMantissa(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="d1"></param>
            <param name="d2"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.DoubleBits.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.DoubleBits.ZeroLowerBits(System.Int32)">
            <summary>
            
            </summary>
            <param name="nBits"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.DoubleBits.GetBit(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.DoubleBits.NumCommonMantissaBits(GisSharpBlog.NetTopologySuite.Index.Quadtree.DoubleBits)">
            <summary> 
            This computes the number of common most-significant bits in the mantissa.
            It does not count the hidden bit, which is always 1.
            It does not determine whether the numbers have the same exponent - if they do
            not, the value computed by this function is meaningless.
            </summary>
            <param name="db"></param>
            <returns> The number of common most-significant mantissa bits.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Quadtree.DoubleBits.ToString">
            <summary>
            A representation of the Double bits formatted for easy readability.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Quadtree.DoubleBits.Double">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Quadtree.DoubleBits.BiasedExponent">
            <summary>
            Determines the exponent for the number.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Quadtree.DoubleBits.Exponent">
            <summary>
            Determines the exponent for the number.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.IIndexVisitor">
            <summary> 
            A visitor for nodes and items in an index.
            </summary> 
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.IIndexVisitor.VisitItem(System.Object)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdgeStar">
            <summary> 
            A DirectedEdgeStar is an ordered list of outgoing DirectedEdges around a node.
            It supports labelling the edges as well as linking the edges to form both
            MaximalEdgeRings and MinimalEdgeRings.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdgeStar.resultAreaEdgeList">
            <summary> 
            A list of all outgoing edges in the result, in CCW order.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdgeStar.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdgeStar.Insert(GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeEnd)">
            <summary> 
            Insert a directed edge in the list.
            </summary>
            <param name="ee"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdgeStar.GetOutgoingDegree">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdgeStar.GetOutgoingDegree(GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing)">
            <summary>
            
            </summary>
            <param name="er"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdgeStar.GetRightmostEdge">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdgeStar.ComputeLabelling(GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph[])">
            <summary> 
            Compute the labelling for all dirEdges in this star, as well
            as the overall labelling.
            </summary>
            <param name="geom"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdgeStar.MergeSymLabels">
            <summary> 
            For each dirEdge in the star, merge the label .
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdgeStar.UpdateLabelling(GisSharpBlog.NetTopologySuite.GeometriesGraph.Label)">
            <summary> 
            Update incomplete dirEdge labels from the labelling for the node.
            </summary>
            <param name="nodeLabel"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdgeStar.GetResultAreaEdges">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdgeStar.LinkResultDirectedEdges">
            <summary> 
            Traverse the star of DirectedEdges, linking the included edges together.
            To link two dirEdges, the next pointer for an incoming dirEdge
            is set to the next outgoing edge.
            DirEdges are only linked if:
            they belong to an area (i.e. they have sides)
            they are marked as being in the result
            Edges are linked in CCW order (the order they are stored).
            This means that rings have their face on the Right
            (in other words, the topological location of the face is given by the RHS label of the DirectedEdge).
            PRECONDITION: No pair of dirEdges are both marked as being in the result.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdgeStar.LinkMinimalDirectedEdges(GisSharpBlog.NetTopologySuite.GeometriesGraph.EdgeRing)">
            <summary>
            
            </summary>
            <param name="er"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdgeStar.LinkAllDirectedEdges">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdgeStar.FindCoveredLineEdges">
            <summary> 
            Traverse the star of edges, maintaing the current location in the result
            area at this node (if any).
            If any L edges are found in the interior of the result, mark them as covered.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdgeStar.ComputeDepths(GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge)">
            <summary>
            
            </summary>
            <param name="de"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdgeStar.ComputeDepths(System.Int32,System.Int32,System.Int32)">
            <summary> 
            Compute the DirectedEdge depths for a subsequence of the edge array.
            </summary>
            <returns>The last depth assigned (from the R side of the last edge visited).</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdgeStar.Write(System.IO.StreamWriter)">
            <summary>
            
            </summary>
            <param name="outstream"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdgeStar.Label">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Features.Feature">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Features.Feature.#ctor(GeoAPI.Geometries.IGeometry,GisSharpBlog.NetTopologySuite.Features.IAttributesTable)">
            <summary>
            
            </summary>
            <param name="geometry"></param>
            <param name="attributes"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Features.Feature.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Features.Feature.Geometry">
            <summary>
            Geometry representation of the feature.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Features.Feature.Attributes">
            <summary>
            Attributes table of the feature.
            </summary>
        </member>
        <member name="T:Iesi_NTS.Collections.SynchronizedSet">
            <summary>
            <p>Implements a thread-safe <c>Set</c> wrapper.  The implementation is extremely conservative, 
            serializing critical sections to prevent possible deadlocks, and locking on everything.
            The one exception is for enumeration, which is inherently not thread-safe.  For this, you
            have to <c>lock</c> the <c>SyncRoot</c> object for the duration of the enumeration.</p>
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.SynchronizedSet.#ctor(Iesi_NTS.Collections.ISet)">
            <summary>
            Constructs a thread-safe <c>Set</c> wrapper.
            </summary>
            <param name="basisSet">The <c>Set</c> object that this object will wrap.</param>
        </member>
        <member name="M:Iesi_NTS.Collections.SynchronizedSet.Add(System.Object)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="o">The object to add to the set.</param>
            <returns><c>true</c> is the object was added, <c>false</c> if it was already present.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.SynchronizedSet.AddAll(System.Collections.ICollection)">
            <summary>
            Adds all the elements in the specified collection to the set if they are not already present.
            </summary>
            <param name="c">A collection of objects to add to the set.</param>
            <returns><c>true</c> is the set changed as a result of this operation, <c>false</c> if not.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.SynchronizedSet.Clear">
            <summary>
            Removes all objects from the set.
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.SynchronizedSet.Contains(System.Object)">
            <summary>
            Returns <c>true</c> if this set contains the specified element.
            </summary>
            <param name="o">The element to look for.</param>
            <returns><c>true</c> if this set contains the specified element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.SynchronizedSet.ContainsAll(System.Collections.ICollection)">
            <summary>
            Returns <c>true</c> if the set contains all the elements in the specified collection.
            </summary>
            <param name="c">A collection of objects.</param>
            <returns><c>true</c> if the set contains all the elements in the specified collection, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.SynchronizedSet.Remove(System.Object)">
            <summary>
            Removes the specified element from the set.
            </summary>
            <param name="o">The element to be removed.</param>
            <returns><c>true</c> if the set contained the specified element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.SynchronizedSet.RemoveAll(System.Collections.ICollection)">
            <summary>
            Remove all the specified elements from this set, if they exist in this set.
            </summary>
            <param name="c">A collection of elements to remove.</param>
            <returns><c>true</c> if the set was modified as a result of this operation.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.SynchronizedSet.RetainAll(System.Collections.ICollection)">
            <summary>
            Retains only the elements in this set that are contained in the specified collection.
            </summary>
            <param name="c">Collection that defines the set of elements to be retained.</param>
            <returns><c>true</c> if this set changed as a result of this operation.</returns>
        </member>
        <member name="M:Iesi_NTS.Collections.SynchronizedSet.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements in the <c>Set</c> to an array.  The type of array needs
            to be compatible with the objects in the <c>Set</c>, obviously.
            </summary>
            <param name="array">An array that will be the target of the copy operation.</param>
            <param name="index">The zero-based index where copying will start.</param>
        </member>
        <member name="M:Iesi_NTS.Collections.SynchronizedSet.GetEnumerator">
            <summary>
            Enumeration is, by definition, not thread-safe.  Use a <c>lock</c> on the <c>SyncRoot</c> 
            to synchronize the entire enumeration process.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Iesi_NTS.Collections.SynchronizedSet.Clone">
            <summary>
            Returns a clone of the <c>Set</c> instance.  
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="P:Iesi_NTS.Collections.SynchronizedSet.IsEmpty">
            <summary>
            Returns <c>true</c> if this set contains no elements.
            </summary>
        </member>
        <member name="P:Iesi_NTS.Collections.SynchronizedSet.Count">
            <summary>
            The number of elements contained in this collection.
            </summary>
        </member>
        <member name="P:Iesi_NTS.Collections.SynchronizedSet.IsSynchronized">
            <summary>
            Returns <c>true</c>, indicating that this object is thread-safe.  The exception to this
            is enumeration, which is inherently not thread-safe.  Use the <c>SyncRoot</c> object to
            lock this object for the entire duration of the enumeration.
            </summary>
        </member>
        <member name="P:Iesi_NTS.Collections.SynchronizedSet.SyncRoot">
            <summary>
            Returns an object that can be used to synchronize the <c>Set</c> between threads.
            </summary>
        </member>
        <member name="T:Iesi_NTS.Collections.HybridSet">
            <summary>
            Implements a <c>Set</c> that automatically changes from a list to a hash table
            when the size reaches a certain threshold.  This is good if you are unsure about
            whether you data-set will be tiny or huge.  Because this uses a dual implementation,
            iteration order is not guaranteed!
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.HybridSet.#ctor">
            <summary>
            Creates a new set instance based on either a list or a hash table, depending on which 
            will be more efficient based on the data-set size.
            </summary>
        </member>
        <member name="M:Iesi_NTS.Collections.HybridSet.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a new set instance based on either a list or a hash table, depending on which 
            will be more efficient based on the data-set size, and
            initializes it based on a collection of elements.
            </summary>
            <param name="initialValues">A collection of elements that defines the initial set contents.</param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Utilities.Assert">
            <summary>
            A utility for making programming assertions.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.Assert.#ctor">
            <summary>
            Only static methods!
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.Assert.IsTrue(System.Boolean)">
            <summary>
            
            </summary>
            <param name="assertion"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.Assert.IsTrue(System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="assertion"></param>
            <param name="message"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.Assert.IsEquals(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="expectedValue"></param>
            <param name="actualValue"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.Assert.IsEquals(System.Object,System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="expectedValue"></param>
            <param name="actualValue"></param>
            <param name="message"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.Assert.ShouldNeverReachHere">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.Assert.ShouldNeverReachHere(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateComputer">
            <summary>
            Computes the topological relationship between two Geometries.
            RelateComputer does not need to build a complete graph structure to compute
            the IntersectionMatrix.  The relationship between the geometries can
            be computed by simply examining the labelling of edges incident on each node.
            RelateComputer does not currently support arbitrary GeometryCollections.
            This is because GeometryCollections can contain overlapping Polygons.
            In order to correct compute relate on overlapping Polygons, they
            would first need to be noded and merged (if not explicitly, at least
            implicitly).
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateComputer.#ctor(GisSharpBlog.NetTopologySuite.GeometriesGraph.GeometryGraph[])">
            <summary>
            
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateComputer.ComputeIM">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateComputer.InsertEdgeEnds(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="ee"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateComputer.ComputeProperIntersectionIM(GisSharpBlog.NetTopologySuite.GeometriesGraph.Index.SegmentIntersector,GeoAPI.Geometries.IntersectionMatrix)">
            <summary>
            
            </summary>
            <param name="intersector"></param>
            <param name="im"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateComputer.CopyNodesAndLabels(System.Int32)">
            <summary>
            Copy all nodes from an arg point into this graph.
            The node label in the arg point overrides any previously computed
            label for that argIndex.
            (E.g. a node may be an intersection node with
            a computed label of Boundary,
            but in the original arg Geometry it is actually
            in the interior due to the Boundary Determination Rule)
            </summary>
            <param name="argIndex"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateComputer.ComputeIntersectionNodes(System.Int32)">
            <summary>
            Insert nodes for all intersections on the edges of a Geometry.
            Label the created nodes the same as the edge label if they do not already have a label.
            This allows nodes created by either self-intersections or
            mutual intersections to be labelled.
            Endpoint nodes will already be labelled from when they were inserted.
            </summary>
            <param name="argIndex"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateComputer.LabelIntersectionNodes(System.Int32)">
            <summary>
            For all intersections on the edges of a Geometry,
            label the corresponding node IF it doesn't already have a label.
            This allows nodes created by either self-intersections or
            mutual intersections to be labelled.
            Endpoint nodes will already be labelled from when they were inserted.
            </summary>
            <param name="argIndex"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateComputer.ComputeDisjointIM(GeoAPI.Geometries.IntersectionMatrix)">
            <summary>
            If the Geometries are disjoint, we need to enter their dimension and
            boundary dimension in the Ext rows in the IM
            </summary>
            <param name="im"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateComputer.LabelNodeEdges">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateComputer.UpdateIM(GeoAPI.Geometries.IntersectionMatrix)">
            <summary>
            Update the IM with the sum of the IMs for each component.
            </summary>
            <param name="im"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateComputer.LabelIsolatedEdges(System.Int32,System.Int32)">
            <summary> 
            Processes isolated edges by computing their labelling and adding them
            to the isolated edges list.
            Isolated edges are guaranteed not to touch the boundary of the target (since if they
            did, they would have caused an intersection to be computed and hence would
            not be isolated).
            </summary>
            <param name="thisIndex"></param>
            <param name="targetIndex"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateComputer.LabelIsolatedEdge(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge,System.Int32,GeoAPI.Geometries.IGeometry)">
            <summary>
            Label an isolated edge of a graph with its relationship to the target point.
            If the target has dim 2 or 1, the edge can either be in the interior or the exterior.
            If the target has dim 0, the edge must be in the exterior.
            </summary>
            <param name="e"></param>
            <param name="targetIndex"></param>
            <param name="target"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateComputer.LabelIsolatedNodes">
            <summary>
            Isolated nodes are nodes whose labels are incomplete
            (e.g. the location for one Geometry is null).
            This is the case because nodes in one graph which don't intersect
            nodes in the other are not completely labelled by the initial process
            of adding nodes to the nodeList.
            To complete the labelling we need to check for nodes that lie in the
            interior of edges, and in the interior of areas.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Relate.RelateComputer.LabelIsolatedNode(GisSharpBlog.NetTopologySuite.GeometriesGraph.Node,System.Int32)">
            <summary>
            Label an isolated node with its relationship to the target point.
            </summary>
            <param name="n"></param>
            <param name="targetIndex"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Overlay.OverlayNodeFactory">
            <summary>
            Creates nodes for use in the <c>PlanarGraph</c>s constructed during
            overlay operations.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.OverlayNodeFactory.CreateNode(GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="coord"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineMerger">
            <summary>
            Sews together a set of fully noded LineStrings. Sewing stops at nodes of degree 1
            or 3 or more -- the exception is an isolated loop, which only has degree-2 nodes,
            in which case a node is simply chosen as a starting point. The direction of each
            merged LineString will be that of the majority of the LineStrings from which it
            was derived.
            Any dimension of Geometry is handled -- the constituent linework is extracted to 
            form the edges. The edges must be correctly noded; that is, they must only meet
            at their endpoints.  The LineMerger will still run on incorrectly noded input
            but will not form polygons from incorrected noded edges.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineMerger.Add(System.Collections.IList)">
            <summary>
            Adds a collection of Geometries to be processed. May be called multiple times.
            Any dimension of Geometry may be added; the constituent linework will be
            extracted.
            </summary>
            <param name="geometries"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineMerger.Add(GeoAPI.Geometries.IGeometry)">
            <summary>
            Adds a Geometry to be processed. May be called multiple times.
            Any dimension of Geometry may be added; the constituent linework will be
            extracted.
            </summary>
            <param name="geometry"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineMerger.Add(GeoAPI.Geometries.ILineString)">
            <summary>
            
            </summary>
            <param name="lineString"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineMerger.Merge">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineMerger.BuildEdgeStringsForObviousStartNodes">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineMerger.BuildEdgeStringsForIsolatedLoops">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineMerger.BuildEdgeStringsForUnprocessedNodes">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineMerger.BuildEdgeStringsForNonDegree2Nodes">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineMerger.BuildEdgeStringsStartingAt(GisSharpBlog.NetTopologySuite.Planargraph.Node)">
            <summary>
            
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineMerger.BuildEdgeStringStartingWith(GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineMergeDirectedEdge)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineMerger.GetMergedLineStrings">
            <summary>
            Returns the LineStrings built by the merging process.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineMerger.AnonymousGeometryComponentFilterImpl">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineMerger.AnonymousGeometryComponentFilterImpl.#ctor(GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineMerger)">
            <summary>
            
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Linemerge.LineMerger.AnonymousGeometryComponentFilterImpl.Filter(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="component"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearGeometryBuilder">
            <summary>
            Builds a linear geometry (<see cref="T:GisSharpBlog.NetTopologySuite.Geometries.LineString"/> or <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.MultiLineString"/>)
            incrementally (point-by-point).
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearGeometryBuilder.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            
            </summary>
            <param name="geomFact"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearGeometryBuilder.Add(GeoAPI.Geometries.ICoordinate)">
            <summary>
            Adds a point to the current line.
            </summary>
            <param name="pt">The <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/> to add.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearGeometryBuilder.Add(GeoAPI.Geometries.ICoordinate,System.Boolean)">
            <summary>
            Adds a point to the current line.
            </summary>
            <param name="pt">The <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/> to add.</param>
            <param name="allowRepeatedPoints">If <c>true</c>, allows the insertions of repeated points.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearGeometryBuilder.EndLine">
            <summary>
            Terminate the current <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.LineString"/>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearGeometryBuilder.ValidCoordinateSequence(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            
            </summary>
            <param name="pts"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearGeometryBuilder.GetGeometry">
            <summary>
            Builds and returns the <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearGeometryBuilder.FixInvalidLines">
            <summary>
            Allows invalid lines to be fixed rather than causing Exceptions.
            An invalid line is one which has only one unique point.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearGeometryBuilder.IgnoreInvalidLines">
            <summary>
            Allows invalid lines to be ignored rather than causing Exceptions.
            An invalid line is one which has only one unique point.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.LinearReferencing.LinearGeometryBuilder.LastCoordinate">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryWriter">
            <summary>
            Extends the <see cref="T:System.IO.BinaryWriter"/> class to allow the writing of integers 
            and double values in the Big Endian format.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryWriter.#ctor">
            <summary>
            Initializes a new instance of the BigEndianBinaryWriter class.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the BigEndianBinaryWriter class 
            based on the supplied stream and using UTF-8 as the encoding for strings.
            </summary>
            <param name="output">The supplied stream.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the BigEndianBinaryWriter class 
            based on the supplied stream and a specific character encoding.
            </summary>
            <param name="output">The supplied stream.</param>
            <param name="encoding">The character encoding.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryWriter.WriteIntBE(System.Int32)">
            <summary>
            Reads a 4-byte signed integer using the big-endian layout from the current stream 
            and advances the current position of the stream by two bytes.
            </summary>
            <param name="value">The four-byte signed integer to write.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.IO.BigEndianBinaryWriter.WriteDoubleBE(System.Double)">
            <summary>
            Reads a 8-byte signed integer using the big-endian layout from the current stream 
            and advances the current position of the stream by two bytes.
            </summary>
            <param name="value">The four-byte signed integer to write.</param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineInterval">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineInterval.#ctor(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineInterval.#ctor(System.Double,System.Double,System.Object)">
            <summary>
            
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="item"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineInterval.Min">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineInterval.Max">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Sweepline.SweepLineInterval.Item">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArrays">
            <summary>
            Useful utility functions for handling Coordinate arrays.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArrays.PointNotInList(GeoAPI.Geometries.ICoordinate[],GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Finds a <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/> in a list of <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/>s 
            which is not contained in another list of <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/>s.
            </summary>
            <param name="testPts">The <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/>s to test.</param>
            <param name="pts">An array of <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/>s to test the input points against.</param>
            <returns>
            A <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/> from <paramref name="testPts"/> 
            which is not in <paramref name="pts"/>, or <c>null</c>.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArrays.Compare(GeoAPI.Geometries.ICoordinate[],GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Compares two <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/> arrays
            in the forward direction of their coordinates,
            using lexicographic ordering.
            </summary>
            <param name="pts1"></param>
            <param name="pts2"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArrays.IncreasingDirection(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Determines which orientation of the <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/> array is (overall) increasing.
            In other words, determines which end of the array is "smaller"
            (using the standard ordering on <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/>).
            Returns an integer indicating the increasing direction.
            If the sequence is a palindrome, it is defined to be
            oriented in a positive direction.
            </summary>
            <param name="pts">The array of Coordinates to test.</param>
            <returns>
            <c>1</c> if the array is smaller at the start or is a palindrome,
            <c>-1</c> if smaller at the end.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArrays.IsEqualReversed(GeoAPI.Geometries.ICoordinate[],GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Determines whether two <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/> arrays of equal length
            are equal in opposite directions.
            </summary>
            <param name="pts1"></param>
            <param name="pts2"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArrays.CopyDeep(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Creates a deep copy of the argument <c>Coordinate</c> array.
            </summary>
            <param name="coordinates">Array of Coordinates.</param>
            <returns>Deep copy of the input.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArrays.ToCoordinateArray(System.Collections.ICollection)">
            <summary>
            Converts the given <see cref="T:System.Collections.IList"/> of 
            <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/>s into a <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/> array.
            </summary>
            <param name="coordList"><see cref="T:System.Collections.IList"/> of coordinates.</param>
            <returns></returns>
            <exception cref="T:System.InvalidCastException">
            If <paramref name="coordList"/> contains not only <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/>s.
            </exception>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArrays.ToCoordinateArray(System.Collections.Generic.ICollection{GeoAPI.Geometries.ICoordinate})">
            <summary>
            Converts the given <see cref="T:System.Collections.IList"/> of 
            <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/>s into a <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/> array.
            </summary>
            <param name="coordList"><see cref="T:System.Collections.IList"/> of coordinates.</param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArrays.HasRepeatedPoints(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Returns whether Equals returns true for any two consecutive
            coordinates in the given array.
            </summary>
            <param name="coord">Array of Coordinates.</param>
            <returns>true if coord has repeated points; false otherwise.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArrays.AtLeastNCoordinatesOrNothing(System.Int32,GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Returns either the given coordinate array if its length is greater than
            the given amount, or an empty coordinate array.
            </summary>
            <param name="n">Length amount.</param>
            <param name="c">Array of Coordinates.</param>
            <returns>New Coordinate array.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArrays.RemoveRepeatedPoints(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            If the coordinate array argument has repeated points,
            constructs a new array containing no repeated points.
            Otherwise, returns the argument.
            </summary>
            <param name="coord"></param>
            <returns></returns>        
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArrays.Reverse(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Reverses the coordinates in an array in-place.
            </summary>
            <param name="coord">Array of Coordinates.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArrays.Equals(GeoAPI.Geometries.ICoordinate[],GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Returns <c>true</c> if the two arrays are identical, both <c>null</c>, or pointwise
            equal (as compared using Coordinate.Equals).
            </summary>
            <param name="coord1">First array of Coordinates.</param>
            <param name="coord2">Second array of Coordinates.</param>
            <returns><c>true</c> if two Coordinates array are equals; false otherwise</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArrays.Equals(GeoAPI.Geometries.ICoordinate[],GeoAPI.Geometries.ICoordinate[],System.Collections.Generic.IComparer{GeoAPI.Geometries.ICoordinate[]})">
            <summary>
            Returns <c>true</c> if the two arrays are identical, both <c>null</c>, or pointwise
            equal, using a user-defined <see cref="T:System.Collections.IComparer"/> 
            for <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/>s.
            </summary>
            <param name="coord1">An array of <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/>s.</param>
            <param name="coord2">Another array of <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/>s.</param>
            <param name="coordinateComparer">
             A <see cref="T:System.Collections.IComparer"/> for <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/>s.
            </param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArrays.MinCoordinate(GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Returns the minimum coordinate, using the usual lexicographic comparison.
            </summary>
            <param name="coordinates">Array to search.</param>
            <returns>The minimum coordinate in the array, found using <c>CompareTo</c>.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArrays.Scroll(GeoAPI.Geometries.ICoordinate[],GeoAPI.Geometries.ICoordinate)">
            <summary>
            Shifts the positions of the coordinates until <c>firstCoordinate</c> is first.
            </summary>
            <param name="coordinates">Array to rearrange.</param>
            <param name="firstCoordinate">Coordinate to make first.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArrays.IndexOf(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Returns the index of <paramref name="coordinate"/> in <paramref name="coordinates"/>.
            The first position is 0; the second is 1; etc.
            </summary>
            <param name="coordinate">A <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/> to search for.</param>
            <param name="coordinates">A <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/> array to search.</param>
            <returns>The position of <c>coordinate</c>, or -1 if it is not found.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArrays.Extract(GeoAPI.Geometries.ICoordinate[],System.Int32,System.Int32)">
            <summary>
            Extracts a subsequence of the input <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/> array
            from indices <paramref name="start"/> to <paramref name="end"/> (inclusive).
            </summary>
            <param name="pts">The input array.</param>
            <param name="start">The index of the start of the subsequence to extract.</param>
            <param name="end">The index of the end of the subsequence to extract.</param>
            <returns>A subsequence of the input array.</returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArrays.ForwardComparator">
            <summary>
            Compares two <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/> arrays
            in the forward direction of their coordinates,
            using lexicographic ordering.
            </summary>        
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArrays.ForwardComparator.Compare(GeoAPI.Geometries.ICoordinate[],GeoAPI.Geometries.ICoordinate[])">
            <summary>
            Compares the specified <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/>s arrays.
            </summary>
            <param name="pts1"></param>
            <param name="pts2"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArrays.BidirectionalComparator">
            <summary>
            A comparator for <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/> arrays modulo their directionality.
            E.g. if two coordinate arrays are identical but reversed
            they will compare as equal under this ordering.
            If the arrays are not equal, the ordering returned
            is the ordering in the forward direction.
            </summary>        
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArrays.BidirectionalComparator.Compare(GeoAPI.Geometries.ICoordinate[],GeoAPI.Geometries.ICoordinate[])">
            <summary>
            
            </summary>
            <param name="pts1"></param>
            <param name="pts2"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.CoordinateArrays.BidirectionalComparator.OLDcompare(GeoAPI.Geometries.ICoordinate[],GeoAPI.Geometries.ICoordinate[])">
            <summary>
            
            </summary>
            <param name="pts1"></param>
            <param name="pts2"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate">
            <summary>
            A lightweight class used to store coordinates
            on the 2-dimensional Cartesian plane.
            It is distinct from <c>Point</c>, which is a subclass of <c>Geometry</c>.
            Unlike objects of type <c>Point</c> (which contain additional
            information such as an envelope, a precision model, and spatial reference
            system information), a <c>Coordinate</c> only contains ordinate values
            and propertied.
            <c>Coordinate</c>s are two-dimensional points, with an additional
            z-ordinate. NTS does not support any operations on the z-ordinate except
            the basic accessor functions. Constructed coordinates will have a
            z-ordinate of <c>NaN</c>.  The standard comparison functions will ignore
            the z-ordinate.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a <c>Coordinate</c> at (x,y,z).
            </summary>
            <param name="x">X value.</param>
            <param name="y">Y value.</param>
            <param name="z">Z value.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.#ctor">
            <summary>
             Constructs a <c>Coordinate</c> at (0,0,NaN).
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.#ctor(GeoAPI.Geometries.ICoordinate)">
            <summary>
            Constructs a <c>Coordinate</c> having the same (x,y,z) values as
            <c>other</c>.
            </summary>
            <param name="c"><c>Coordinate</c> to copy.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a <c>Coordinate</c> at (x,y,NaN).
            </summary>
            <param name="x">X value.</param>
            <param name="y">Y value.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.Equals2D(GeoAPI.Geometries.ICoordinate)">
             <summary>
             Returns whether the planar projections of the two <c>Coordinate</c>s are equal.
            </summary>
             <param name="other"><c>Coordinate</c> with which to do the 2D comparison.</param>
             <returns>
             <c>true</c> if the x- and y-coordinates are equal;
             the Z coordinates do not have to be equal.
             </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.Equals(System.Object)">
            <summary>
            Returns <c>true</c> if <c>other</c> has the same values for the x and y ordinates.
            Since Coordinates are 2.5D, this routine ignores the z value when making the comparison.
            </summary>
            <param name="other"><c>Coordinate</c> with which to do the comparison.</param>
            <returns><c>true</c> if <c>other</c> is a <c>Coordinate</c> with the same values for the x and y ordinates.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.Equals(GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.op_Equality(GisSharpBlog.NetTopologySuite.Geometries.Coordinate,GisSharpBlog.NetTopologySuite.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.op_Inequality(GisSharpBlog.NetTopologySuite.Geometries.Coordinate,GisSharpBlog.NetTopologySuite.Geometries.Coordinate)">
            <summary>
            
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.CompareTo(System.Object)">
            <summary>
            Compares this object with the specified object for order.
            Since Coordinates are 2.5D, this routine ignores the z value when making the comparison.
            Returns
              -1  : this.x lowerthan other.x || ((this.x == other.x) AND (this.y lowerthan other.y))
               0  : this.x == other.x AND this.y = other.y 
               1  : this.x greaterthan other.x || ((this.x == other.x) AND (this.y greaterthan other.y)) 
            </summary>
            <param name="o"><c>Coordinate</c> with which this <c>Coordinate</c> is being compared.</param>
            <returns>
            A negative integer, zero, or a positive integer as this <c>Coordinate</c>
                    is less than, equal to, or greater than the specified <c>Coordinate</c>.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.CompareTo(GeoAPI.Geometries.ICoordinate)">
            <summary>
            Compares this object with the specified object for order.
            Since Coordinates are 2.5D, this routine ignores the z value when making the comparison.
            Returns
              -1  : this.x lowerthan other.x || ((this.x == other.x) AND (this.y lowerthan other.y))
               0  : this.x == other.x AND this.y = other.y 
               1  : this.x greaterthan other.x || ((this.x == other.x) AND (this.y greaterthan other.y)) 
            </summary>
            <param name="other"><c>Coordinate</c> with which this <c>Coordinate</c> is being compared.</param>
            <returns>
            A negative integer, zero, or a positive integer as this <c>Coordinate</c>
                    is less than, equal to, or greater than the specified <c>Coordinate</c>.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.Equals3D(GeoAPI.Geometries.ICoordinate)">
            <summary>
            Returns <c>true</c> if <c>other</c> has the same values for x, y and z.
            </summary>
            <param name="other"><c>Coordinate</c> with which to do the 3D comparison.</param>
            <returns><c>true</c> if <c>other</c> is a <c>Coordinate</c> with the same values for x, y and z.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.ToString">
            <summary>
            Returns a <c>string</c> of the form <I>(x,y,z)</I> .
            </summary>
            <returns><c>string</c> of the form <I>(x,y,z)</I></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.Clone">
            <summary>
            Create a new object as copy of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.Distance(GeoAPI.Geometries.ICoordinate)">
            <summary>
            Returns distance from <c>p</c> coordinate.
            </summary>
            <param name="p"><c>Coordinate</c> with which to do the distance comparison.</param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.GetHashCode">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.GetHashCode(System.Double)">
            <summary>
            Return HashCode.
            </summary>
            <param name="value">Value from HashCode computation.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.op_Addition(GisSharpBlog.NetTopologySuite.Geometries.Coordinate,GisSharpBlog.NetTopologySuite.Geometries.Coordinate)">
            <summary>
            Overloaded + operator.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.op_Addition(GisSharpBlog.NetTopologySuite.Geometries.Coordinate,System.Double)">
            <summary>
            Overloaded + operator.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.op_Addition(System.Double,GisSharpBlog.NetTopologySuite.Geometries.Coordinate)">
            <summary>
            Overloaded + operator.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.op_Multiply(GisSharpBlog.NetTopologySuite.Geometries.Coordinate,GisSharpBlog.NetTopologySuite.Geometries.Coordinate)">
            <summary>
            Overloaded * operator.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.op_Multiply(GisSharpBlog.NetTopologySuite.Geometries.Coordinate,System.Double)">
            <summary>
            Overloaded * operator.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.op_Multiply(System.Double,GisSharpBlog.NetTopologySuite.Geometries.Coordinate)">
            <summary>
            Overloaded * operator.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.op_Subtraction(GisSharpBlog.NetTopologySuite.Geometries.Coordinate,GisSharpBlog.NetTopologySuite.Geometries.Coordinate)">
            <summary>
            Overloaded - operator.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.op_Subtraction(GisSharpBlog.NetTopologySuite.Geometries.Coordinate,System.Double)">
            <summary>
            Overloaded - operator.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.op_Subtraction(System.Double,GisSharpBlog.NetTopologySuite.Geometries.Coordinate)">
            <summary>
            Overloaded - operator.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.op_Division(GisSharpBlog.NetTopologySuite.Geometries.Coordinate,GisSharpBlog.NetTopologySuite.Geometries.Coordinate)">
            <summary>
            Overloaded / operator.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.op_Division(GisSharpBlog.NetTopologySuite.Geometries.Coordinate,System.Double)">
            <summary>
            Overloaded / operator.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.op_Division(System.Double,GisSharpBlog.NetTopologySuite.Geometries.Coordinate)">
            <summary>
            Overloaded / operator.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.X">
            <summary>
            X coordinate.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.Y">
            <summary>
            Y coordinate.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.Z">
            <summary>
            Z coordinate.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Coordinate.CoordinateValue">
            <summary>
            Gets/Sets <c>Coordinate</c>s (x,y,z) values.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Algorithm.HCoordinate">
            <summary> 
            Represents a homogeneous coordinate for 2-D coordinates.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.HCoordinate.Intersection(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary> 
            Computes the (approximate) intersection point between two line segments
            using homogeneous coordinates.
            Note that this algorithm is
            not numerically stable; i.e. it can produce intersection points which
            lie outside the envelope of the line segments themselves.  In order
            to increase the precision of the calculation input points should be normalized
            before passing them to this routine.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="q1"></param>
            <param name="q2"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.HCoordinate.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.HCoordinate.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.HCoordinate.#ctor(GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.HCoordinate.#ctor(GisSharpBlog.NetTopologySuite.Algorithm.HCoordinate,GisSharpBlog.NetTopologySuite.Algorithm.HCoordinate)">
            <summary>
            
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.HCoordinate.GetX">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.HCoordinate.GetY">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Algorithm.HCoordinate.X">
            <summary>
            Direct access to x private field
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Algorithm.HCoordinate.Y">
            <summary>
            Direct access to y private field
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Algorithm.HCoordinate.W">
            <summary>
            Direct access to w private field
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Algorithm.HCoordinate.Coordinate">
            <summary>
            
            </summary>
        </member>
        <member name="T:RTools_NTS.Util.BufferedTextReader">
            <summary>
            Wraps a TextReader with buffering for speed. This is not finished,
            and preliminary testing indicates it isn't faster than FCL implementation.
            </summary>
        </member>
        <member name="M:RTools_NTS.Util.BufferedTextReader.#ctor(System.IO.TextReader)">
            <summary>
            Constructor
            </summary>
            <param name="reader">The TextReader to wrap.</param>
        </member>
        <member name="M:RTools_NTS.Util.BufferedTextReader.Read">
            <summary>
            Read a single character.
            </summary>
            <returns>The character read.</returns>
        </member>
        <member name="M:RTools_NTS.Util.BufferedTextReader.Close">
            <summary>
            Close the underlying reader.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Utilities.CoordinateCountFilter">
            <summary>
            A <c>CoordinateFilter</c> that counts the total number of coordinates
            in a <c>Geometry</c>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.CoordinateCountFilter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Utilities.CoordinateCountFilter.Filter(GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="coord"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Utilities.CoordinateCountFilter.Count">
            <summary>
            Returns the result of the filtering.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Planargraph.NodeMap">
            <summary>
            A map of <see cref="T:GisSharpBlog.NetTopologySuite.Planargraph.Node">nodes</see>, indexed by the coordinate of the node.
            </summary>   
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.NodeMap.#ctor">
            <summary>
            Constructs a NodeMap without any Nodes.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.NodeMap.Add(GisSharpBlog.NetTopologySuite.Planargraph.Node)">
            <summary>
            Adds a node to the map, replacing any that is already at that location.
            </summary>
            <param name="n"></param>
            <returns>The added node.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.NodeMap.Remove(GeoAPI.Geometries.ICoordinate)">
            <summary>
            Removes the Node at the given location, and returns it (or null if no Node was there).
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.NodeMap.Find(GeoAPI.Geometries.ICoordinate)">
            <summary>
            Returns the Node at the given location, or null if no Node was there.
            </summary>
            <param name="coord"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Planargraph.NodeMap.GetEnumerator">
            <summary>
            Returns an Iterator over the Nodes in this NodeMap, sorted in ascending order
            by angle with the positive x-axis.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Planargraph.NodeMap.Values">
            <summary>
            Returns the Nodes in this NodeMap, sorted in ascending order
            by angle with the positive x-axis.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Planargraph.NodeMap.Count">
            <summary>
            Returns the number of Nodes in this NodeMap.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Valid.TopologyValidationErrors">
            <summary>
            Contains information about the nature and location of 
            a <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/> validation error.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.Valid.TopologyValidationErrors.Error">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.Valid.TopologyValidationErrors.RepeatedPoint">
            <summary>
            No longer used: 
            repeated points are considered valid as per the SFS.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.Valid.TopologyValidationErrors.HoleOutsideShell">
            <summary>
            Indicates that a hole of a polygon lies partially 
            or completely in the exterior of the shell.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.Valid.TopologyValidationErrors.NestedHoles">
            <summary>
            Indicates that a hole lies 
            in the interior of another hole in the same polygon.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.Valid.TopologyValidationErrors.DisconnectedInteriors">
            <summary>
            Indicates that the interior of a polygon is disjoint
            (often caused by set of contiguous holes splitting 
            the polygon into two parts).
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.Valid.TopologyValidationErrors.SelfIntersection">
            <summary>
            Indicates that two rings of a polygonal geometry intersect.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.Valid.TopologyValidationErrors.RingSelfIntersection">
            <summary>
            Indicates that a ring self-intersects.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.Valid.TopologyValidationErrors.NestedShells">
            <summary>
            Indicates that a polygon component of a 
            <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.MultiPolygon"/> lies inside another polygonal component.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.Valid.TopologyValidationErrors.DuplicateRings">
            <summary>
            Indicates that a polygonal geometry 
            contains two rings which are identical.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.Valid.TopologyValidationErrors.TooFewPoints">
            <summary>
            Indicates that either:
            - A <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.LineString"/> contains a single point.
            - A <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.LinearRing"/> contains 2 or 3 points.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.Valid.TopologyValidationErrors.InvalidCoordinate">
            <summary>
            Indicates that the <c>X</c> or <c>Y</c> ordinate of
            a <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/> is not a valid 
            numeric value (e.g. <see cref="F:System.Double.NaN"/>).
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.Valid.TopologyValidationErrors.RingNotClosed">
            <summary>
            Indicates that a ring is not correctly closed
            (the first and the last coordinate are different).
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Valid.TopologyValidationError">
            <summary>
            Contains information about the nature and location of a <c>Geometry</c>
            validation error.
            </summary>
        </member>
        <member name="F:GisSharpBlog.NetTopologySuite.Operation.Valid.TopologyValidationError.errMsg">
            <summary>
            These messages must synch up with the indexes above
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.TopologyValidationError.#ctor(GisSharpBlog.NetTopologySuite.Operation.Valid.TopologyValidationErrors,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="errorType"></param>
            <param name="pt"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.TopologyValidationError.#ctor(GisSharpBlog.NetTopologySuite.Operation.Valid.TopologyValidationErrors)">
            <summary>
            
            </summary>
            <param name="errorType"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Valid.TopologyValidationError.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Valid.TopologyValidationError.Coordinate">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Valid.TopologyValidationError.ErrorType">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Operation.Valid.TopologyValidationError.Message">
            <summary>
            
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Overlay.LineBuilder">
            <summary>
            Forms NTS LineStrings out of a the graph of <c>DirectedEdge</c>s
            created by an <c>OverlayOp</c>.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.LineBuilder.#ctor(GisSharpBlog.NetTopologySuite.Operation.Overlay.OverlayOp,GeoAPI.Geometries.IGeometryFactory,GisSharpBlog.NetTopologySuite.Algorithm.PointLocator)">
            <summary>
            
            </summary>
            <param name="op"></param>
            <param name="geometryFactory"></param>
            <param name="ptLocator"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.LineBuilder.Build(GisSharpBlog.NetTopologySuite.Operation.Overlay.SpatialFunction)">
            <summary>
            
            </summary>
            <param name="opCode"></param>
            <returns>
            A list of the LineStrings in the result of the specified overlay operation.
            </returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.LineBuilder.FindCoveredLineEdges">
            <summary>
            Find and mark L edges which are "covered" by the result area (if any).
            L edges at nodes which also have A edges can be checked by checking
            their depth at that node.
            L edges at nodes which do not have A edges can be checked by doing a
            point-in-polygon test with the previously computed result areas.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.LineBuilder.CollectLines(GisSharpBlog.NetTopologySuite.Operation.Overlay.SpatialFunction)">
            <summary>
            
            </summary>
            <param name="opCode"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.LineBuilder.CollectLineEdge(GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge,GisSharpBlog.NetTopologySuite.Operation.Overlay.SpatialFunction,System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="de"></param>
            <param name="opCode"></param>
            <param name="edges"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.LineBuilder.CollectBoundaryTouchEdge(GisSharpBlog.NetTopologySuite.GeometriesGraph.DirectedEdge,GisSharpBlog.NetTopologySuite.Operation.Overlay.SpatialFunction,System.Collections.IList)">
            <summary>
            Collect edges from Area inputs which should be in the result but
            which have not been included in a result area.
            This happens ONLY:
            during an intersection when the boundaries of two
            areas touch in a line segment
            OR as a result of a dimensional collapse.
            </summary>
            <param name="de"></param>
            <param name="opCode"></param>
            <param name="edges"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.LineBuilder.BuildLines(GisSharpBlog.NetTopologySuite.Operation.Overlay.SpatialFunction)">
            <summary>
            
            </summary>
            <param name="opCode"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.LineBuilder.LabelIsolatedLines(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="edgesList"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Overlay.LineBuilder.LabelIsolatedLine(GisSharpBlog.NetTopologySuite.GeometriesGraph.Edge,System.Int32)">
            <summary>
            Label an isolated node with its relationship to the target point.
            </summary>
            <param name="e"></param>
            <param name="targetIndex"></param>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveSetBuilder">
            <summary>
            Creates all the raw offset curves for a buffer of a <c>Geometry</c>.
            Raw curves need to be noded together and polygonized to form the final buffer area.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveSetBuilder.#ctor(GeoAPI.Geometries.IGeometry,System.Double,GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveBuilder)">
            <summary>
            
            </summary>
            <param name="inputGeom"></param>
            <param name="distance"></param>
            <param name="curveBuilder"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveSetBuilder.GetCurves">
            <summary>
            Computes the set of raw offset curves for the buffer.
            Each offset curve has an attached {Label} indicating
            its left and right location.
            </summary>
            <returns>A Collection of SegmentStrings representing the raw buffer curves.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveSetBuilder.AddCurves(System.Collections.IList,GeoAPI.Geometries.Locations,GeoAPI.Geometries.Locations)">
            <summary>
            
            </summary>
            <param name="lineList"></param>
            <param name="leftLoc"></param>
            <param name="rightLoc"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveSetBuilder.AddCurve(GeoAPI.Geometries.ICoordinate[],GeoAPI.Geometries.Locations,GeoAPI.Geometries.Locations)">
            <summary>
            Creates a {SegmentString} for a coordinate list which is a raw offset curve,
            and adds it to the list of buffer curves.
            The SegmentString is tagged with a Label giving the topology of the curve.
            The curve may be oriented in either direction.
            If the curve is oriented CW, the locations will be:
            Left: Location.Exterior.
            Right: Location.Interior.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveSetBuilder.Add(GeoAPI.Geometries.IGeometry)">
            <summary>
            
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveSetBuilder.AddCollection(GeoAPI.Geometries.IGeometryCollection)">
            <summary>
            
            </summary>
            <param name="gc"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveSetBuilder.AddPoint(GeoAPI.Geometries.IPoint)">
            <summary>
            Add a Point to the graph.
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveSetBuilder.AddLineString(GeoAPI.Geometries.ILineString)">
            <summary>
            
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveSetBuilder.AddPolygon(GeoAPI.Geometries.IPolygon)">
            <summary>
            
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveSetBuilder.AddPolygonRing(GeoAPI.Geometries.ICoordinate[],System.Double,GisSharpBlog.NetTopologySuite.GeometriesGraph.Positions,GeoAPI.Geometries.Locations,GeoAPI.Geometries.Locations)">
            <summary>
            Add an offset curve for a ring.
            The side and left and right topological location arguments
            assume that the ring is oriented CW.
            If the ring is in the opposite orientation,
            the left and right locations must be interchanged and the side flipped.
            </summary>
            <param name="coord">The coordinates of the ring (must not contain repeated points).</param>
            <param name="offsetDistance">The distance at which to create the buffer.</param>
            <param name="side">The side of the ring on which to construct the buffer line.</param>
            <param name="cwLeftLoc">The location on the L side of the ring (if it is CW).</param>
            <param name="cwRightLoc">The location on the R side of the ring (if it is CW).</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveSetBuilder.IsErodedCompletely(GeoAPI.Geometries.ICoordinate[],System.Double)">
            <summary>
            The ringCoord is assumed to contain no repeated points.
            It may be degenerate (i.e. contain only 1, 2, or 3 points).
            In this case it has no area, and hence has a minimum diameter of 0.
            </summary>
            <param name="ringCoord"></param>
            <param name="bufferDistance"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Operation.Buffer.OffsetCurveSetBuilder.IsTriangleErodedCompletely(GeoAPI.Geometries.ICoordinate[],System.Double)">
            <summary>
            Tests whether a triangular ring would be eroded completely by the given
            buffer distance.
            This is a precise test.  It uses the fact that the inner buffer of a
            triangle converges on the inCentre of the triangle (the point
            equidistant from all sides).  If the buffer distance is greater than the
            distance of the inCentre from a side, the triangle will be eroded completely.
            This test is important, since it removes a problematic case where
            the buffer distance is slightly larger than the inCentre distance.
            In this case the triangle buffer curve "inverts" with incorrect topology,
            producing an incorrect hole in the buffer.       
            </summary>
            <param name="triangleCoord"></param>
            <param name="bufferDistance"></param>
            <returns></returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthIndexedLine">
            <summary>
            Supports linear referencing along a linear <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/>
            using the length along the line as the index.
            Negative length values are taken as measured in the reverse direction
            from the end of the geometry.
            Out-of-range index values are handled by clamping
            them to the valid range of values.
            Non-simple lines (i.e. which loop back to cross or touch
            themselves) are supported.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthIndexedLine.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Constructs an object which allows a linear <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Geometry"/>
            to be linearly referenced using length as an index.
            </summary>
            <param name="linearGeom">The linear geometry to reference along.</param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthIndexedLine.ExtractPoint(System.Double)">
            <summary>
            Computes the <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/> for the point
            on the line at the given index.
            If the index is out of range the first or last point on the
            line will be returned.
            </summary>
            <param name="index">The index of the desired point.</param>
            <returns>The <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.Coordinate"/> at the given index.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthIndexedLine.ExtractLine(System.Double,System.Double)">
            <summary>
            Computes the <see cref="T:GisSharpBlog.NetTopologySuite.Geometries.LineString"/> for the interval
            on the line between the given indices.
            If the <paramref name="endIndex"/> lies before the <paramref name="startIndex"/>,
            the computed geometry is reversed.
            </summary>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthIndexedLine.LocationOf(System.Double)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthIndexedLine.IndexOf(GeoAPI.Geometries.ICoordinate)">
            <summary>
            Computes the minimum index for a point on the line.
            If the line is not simple (i.e. loops back on itself)
            a single point may have more than one possible index.
            In this case, the smallest index is returned.
            The supplied point does not necessarily have to lie precisely
            on the line, but if it is far from the line the accuracy and
            performance of this function is not guaranteed.
            Use <see cref="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthIndexedLine.Project(GeoAPI.Geometries.ICoordinate)"/> to compute a guaranteed result for points
            which may be far from the line.
            </summary>
            <param name="pt">A point on the line.</param>
            <returns>The minimum index of the point.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthIndexedLine.IndexOfAfter(GeoAPI.Geometries.ICoordinate,System.Double)">
            <summary>
            Finds the index for a point on the line
            which is greater than the given index.
            If no such index exists, returns <paramref name="minIndex"/>.
            This method can be used to determine all indexes for
            a point which occurs more than once on a non-simple line.
            It can also be used to disambiguate cases where the given point lies
            slightly off the line and is equidistant from two different
            points on the line.
            The supplied point does not necessarily have to lie precisely
            on the line, but if it is far from the line the accuracy and
            performance of this function is not guaranteed.
            Use <see cref="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthIndexedLine.Project(GeoAPI.Geometries.ICoordinate)"/> to compute a guaranteed result for points
            which may be far from the line.
            </summary>
            <param name="pt">A point on the line.</param>
            <param name="minIndex">The value the returned index must be greater than.</param>
            <returns>The index of the point greater than the given minimum index.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthIndexedLine.IndicesOf(GeoAPI.Geometries.IGeometry)">
            <summary>
            Computes the indices for a subline of the line.
            (The subline must conform to the line; that is,
            all vertices in the subline (except possibly the first and last)
            must be vertices of the line and occcur in the same order).
            </summary>
            <param name="subLine">A subLine of the line.</param>
            <returns>A pair of indices for the start and end of the subline..</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthIndexedLine.Project(GeoAPI.Geometries.ICoordinate)">
            <summary>
            Computes the index for the closest point on the line to the given point.
            If more than one point has the closest distance the first one along the line is returned.
            (The point does not necessarily have to lie precisely on the line.)
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthIndexedLine.IsValidIndex(System.Double)">
            <summary>
            Tests whether an index is in the valid index range for the line.
            </summary>
            <param name="index">The index to test.</param>
            <returns><c>true</c> if the index is in the valid range.</returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthIndexedLine.ClampIndex(System.Double)">
            <summary>
            Computes a valid index for this line
            by clamping the given index to the valid range of index values
            </summary>
            <param name="index"></param>
            <returns>A valid index value.</returns>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthIndexedLine.StartIndex">
            <summary>
            Returns the index of the start of the line.
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.LinearReferencing.LengthIndexedLine.EndIndex">
            <summary>
            Returns the index of the end of the line.
            </summary>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Index.Bintree.Bintree">
            <summary>
            An <c>BinTree</c> (or "Binary Interval Tree")
            is a 1-dimensional version of a quadtree.
            It indexes 1-dimensional intervals (which of course may
            be the projection of 2-D objects on an axis).
            It supports range searching
            (where the range may be a single point).
            This implementation does not require specifying the extent of the inserted
            items beforehand.  It will automatically expand to accomodate any extent
            of dataset.
            This index is different to the Interval Tree of Edelsbrunner
            or the Segment Tree of Bentley.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Bintree.EnsureExtent(GisSharpBlog.NetTopologySuite.Index.Bintree.Interval,System.Double)">
            <summary>
            Ensure that the Interval for the inserted item has non-zero extents.
            Use the current minExtent to pad it, if necessary.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Bintree.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Bintree.Insert(GisSharpBlog.NetTopologySuite.Index.Bintree.Interval,System.Object)">
            <summary>
            
            </summary>
            <param name="itemInterval"></param>
            <param name="item"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Bintree.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Bintree.Query(System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Bintree.Query(GisSharpBlog.NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            min and max may be the same value.
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Bintree.Query(GisSharpBlog.NetTopologySuite.Index.Bintree.Interval,System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="interval"></param>
            <param name="foundItems"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Index.Bintree.Bintree.CollectStats(GisSharpBlog.NetTopologySuite.Index.Bintree.Interval)">
            <summary>
            
            </summary>
            <param name="interval"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Bintree.Bintree.Depth">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Bintree.Bintree.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Index.Bintree.Bintree.NodeSize">
            <summary>
            Compute the total number of nodes in the tree.
            </summary>
            <returns>The number of nodes in the tree.</returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Geometries.Triangle">
            <summary> 
            Represents a planar triangle, and provides methods for calculating various
            properties of triangles.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Geometries.Triangle.#ctor(GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate,GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Triangle.P0">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Triangle.P1">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Triangle.P2">
            <summary>
            
            </summary>
        </member>
        <member name="P:GisSharpBlog.NetTopologySuite.Geometries.Triangle.InCentre">
            <summary>
            The inCentre of a triangle is the point which is equidistant
            from the sides of the triangle.  This is also the point at which the bisectors
            of the angles meet.
            </summary>
            <returns>
            The point which is the InCentre of the triangle.
            </returns>
        </member>
        <member name="T:GisSharpBlog.NetTopologySuite.Algorithm.SIRtreePointInRing">
            <summary> 
            Implements <c>PointInRing</c> using a <c>SIRtree</c> index to increase performance.
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.SIRtreePointInRing.#ctor(GeoAPI.Geometries.ILinearRing)">
            <summary>
            
            </summary>
            <param name="ring"></param>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.SIRtreePointInRing.BuildIndex">
            <summary>
            
            </summary>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.SIRtreePointInRing.IsInside(GeoAPI.Geometries.ICoordinate)">
            <summary>
            
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:GisSharpBlog.NetTopologySuite.Algorithm.SIRtreePointInRing.TestLineSegment(GeoAPI.Geometries.ICoordinate,GisSharpBlog.NetTopologySuite.Geometries.LineSegment)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="seg"></param>
        </member>
    </members>
</doc>
