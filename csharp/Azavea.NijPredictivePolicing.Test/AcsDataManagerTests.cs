using NUnit.Framework;
using log4net;
using System.IO;
using System.Collections.Generic;
using Azavea.NijPredictivePolicing.Test.Helpers;
using Azavea.NijPredictivePolicing.AcsImporterLibrary.Transfer;
using SharpMap.CoordinateSystems;
using GeoAPI.Geometries;
using Azavea.NijPredictivePolicing.AcsImporterLibrary;
using Azavea.NijPredictivePolicing.Common;
using Azavea.NijPredictivePolicing.Common.DB;
using System.Text;
using System;

namespace Azavea.NijPredictivePolicing.Test.AcsImporterLibrary
{
    [TestFixture]
    public class AcsDataManagerTests
    {
        private static ILog _log = null;
        

        /// <summary>
        /// Place to dump files generated by tests
        /// </summary>
        protected const string OutputDir = @"output\";




        [TestFixtureSetUp]
        public void Init()
        {
            _log = LogHelpers.ResetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

            if (!Directory.Exists(OutputDir))
                Directory.CreateDirectory(OutputDir);

        }

        [Test]
        public void GetShapefileFeatures()
        {
            var features = new List<IGeometry>();
            var features2 = new List<IGeometry>();

            var man = GetManager();

            features = man.GetFilteringGeometries(GetShapePath(man, "DoesNotExist.shp"), 
                GeographicCoordinateSystem.WGS84);
            Assert.AreEqual(features, null);

            features = man.GetFilteringGeometries(GetShapePath(man, "bg42_d00.shp"), GeographicCoordinateSystem.WGS84);
            Assert.AreEqual(features, null);

            features = man.GetFilteringGeometries(GetShapePath(man, "bg42_d00_nosrid.shp"), 
                GeographicCoordinateSystem.WGS84);
            Assert.IsTrue(features.Count > 0);

            features = man.GetFilteringGeometries(GetShapePath(man, "bg42_d00_srid.shp"), 
                GeographicCoordinateSystem.WGS84);
            Assert.IsTrue(features.Count > 0);

            features2 = man.GetFilteringGeometries(GetShapePath(man, "bg42_d00_srid.shp"),
                GeographicCoordinateSystem.WGS84);
        }

        [Test]
        public void ImportVariablesFile()
        {

        }

        /// <summary>
        /// Test to ensure importer correctly detects and bails on too many requested columns
        /// </summary>
        [Test]
        public void CheckTooManyColumnsFail()
        {
            string basePath = @"C:\projects\Temple_Univ_NIJ_Predictive_Policing\csharp\Azavea.NijPredictivePolicing.Test\TestData";
            FileUtilities.PathEnsure(basePath);

            const string JobName = "TestTooMany";
            string TooManyVariablesFile = Path.Combine(basePath, "TooManyColumns.txt");

            if (!File.Exists(TooManyVariablesFile))
            {
                int maxColumns = 255, max = (maxColumns / 2) + 1;
                StringBuilder sb = new StringBuilder();
                for (int i = 0; i < max; i++)
                {
                    sb.Append("COLUMN").Append(i).Append(Environment.NewLine);
                }
                File.WriteAllText(TooManyVariablesFile, sb.ToString());
            }


            var manager = new AcsDataManager(AcsState.Wyoming);
            manager.WorkingPath = basePath;
            manager.DesiredVariablesFilename = TooManyVariablesFile;

            Assert.IsFalse(manager.CheckBuildVariableTable(JobName));
        }







        protected AcsDataManager GetManager()
        {
            AcsDataManager m = new AcsDataManager();
            m.WorkingPath = Path.Combine(@"C:\projects\Temple_Univ_NIJ_Predictive_Policing\csharp\Azavea.NijPredictivePolicing.Test", "TestData");

            FileUtilities.PathEnsure(m.WorkingPath, "database");
            m.DBFilename = FileUtilities.PathCombine(m.WorkingPath, "database", Settings.CurrentAcsDirectory + ".sqlite");

            m.ShapePath = FileUtilities.PathEnsure(m.WorkingPath, "shapes");
            m.CurrentDataPath = m.WorkingPath;


            //man.DataPath = FileLocator.GetStateBlockGroupDataDir(man.State);
            //man.ShpPath = FileLocator.GetStateBlockGroupDataDir(man.State);            
            //man.DBPath = FileUtilities.PathCombine(man.DataPath, man.State.ToString() + ".sqlite");

            m.DbClient = DataClient.GetDefaultClient(m.DBFilename);
            return m;
        }

        protected string GetShapePath(AcsDataManager man, string filename)
        {
            return Path.Combine(man.ShapePath, Path.GetFileName(filename));
        }
    }
}
