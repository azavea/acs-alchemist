/*
  Copyright (c) 2012 Azavea, Inc.
 
  This file is part of ACS Alchemist.

  ACS Alchemist is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  ACS Alchemist is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with ACS Alchemist.  If not, see <http://www.gnu.org/licenses/>.
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;
using log4net;
using System.Net;
using System.IO;
using Azavea.NijPredictivePolicing.Common;
using Azavea.NijPredictivePolicing.Test.Helpers;
using Azavea.NijPredictivePolicing.ACSAlchemistLibrary;
using System.Data;
using Azavea.NijPredictivePolicing.ACSAlchemistLibrary.Transfer;

namespace Azavea.NijPredictivePolicing.Test.ACSAlchemistLibrary
{
    [TestFixture]
    public class AreaDownloaderTests
    {
        private static ILog _log = null;

        /// <summary>
        /// Place to dump files generated by tests
        /// </summary>
        protected const string OutputDir = "output\\";

        [TestFixtureSetUp]
        public void Init()
        {
            _log = LogHelpers.ResetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

            if (!Directory.Exists(OutputDir))
            {
                Directory.CreateDirectory(OutputDir);
            }
        }


        [Test]
        public void CheckAllStateFiles()
        {
            bool fail = false;
            foreach (AcsState state in Enum.GetValues(typeof(AcsState)))
            {
                if (state == AcsState.None)
                    continue;

                try
                {
                    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(
                        FileLocator.GetStateBlockGroupUrl(state));

                    request.Credentials = CredentialCache.DefaultCredentials;
                    HttpWebResponse response = (HttpWebResponse)request.GetResponse();
                    response.Close();
                    _log.DebugFormat("{0} still exists", States.StateToCensusName(state));
                }
                catch
                {
                    _log.DebugFormat("{0} is missing!", States.StateToCensusName(state));
                    fail = true;
                }
            }

            Assert.IsFalse(fail);
        }

        [Test]
        public void TestFileDownload()
        {
            //Wyoming has smallest file to download
            var manager = new AcsDataManager(AcsState.Wyoming);
            if (manager.CheckCensusAggregatedDataFile())
            {
                string filename = manager.GetLocalBlockGroupZipFileName();

                Assert.IsTrue(File.Exists(filename), "File wasn't downloaded!");
            }
            else
            {
                Assert.Fail("Some error was thrown during the download");
            }
        }
    }
}
