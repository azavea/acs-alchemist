using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;
using log4net;
using System.Net;
using System.IO;
using Azavea.NijPredictivePolicing.Common;
using Azavea.NijPredictivePolicing.Test.Helpers;
using Azavea.NijPredictivePolicing.AcsImporterLibrary;
using System.Data;

namespace Azavea.NijPredictivePolicing.Test.AcsImporterLibrary
{
    [TestFixture]
    public class AreaDownloaderTests
    {
        /// <summary>
        /// Place to dump files generated by tests
        /// </summary>
        protected const string OutputDir = "output\\";

        private static ILog _log = null;

        

        [TestFixtureSetUp]
        public void Init()
        {
            _log = LogHelpers.ResetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

            if (!Directory.Exists(OutputDir))
                Directory.CreateDirectory(OutputDir);
        }


        [Test]
        public void CheckAllStateFiles()
        {
            bool fail = false;
            foreach (AcsState state in Enum.GetValues(typeof(AcsState)))
            {
                if (state == AcsState.None)
                    continue;

                try
                {
                    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(
                        FileLocator.GetStateBlockGroupFileUrl(state));

                    request.Credentials = CredentialCache.DefaultCredentials;
                    HttpWebResponse response = (HttpWebResponse)request.GetResponse();
                    response.Close();
                    _log.DebugFormat("{0} still exists", States.StateToCensusName(state));
                }
                catch
                {
                    _log.DebugFormat("{0} is missing!", States.StateToCensusName(state));
                    fail = true;
                }
            }

            Assert.IsFalse(fail);
        }

        [Test]
        public void TestFileDownload()
        {
            //Wyoming has smallest file to download

            string filename = FileLocator.GetLocalFilename(AcsState.Wyoming);
            _log.DebugFormat("Saving file to {0}", filename);
            if (FileLocator.GetStateBlockGroupFile(AcsState.Wyoming, string.Empty))
            {
                Assert.IsTrue(File.Exists(filename), "File wasn't downloaded!");
            }
            else
            {
                Assert.Fail("Some error was thrown during the download");
            }
        }



        //[Test]
        //public void SillyLongDivisionTest()
        //{
        //    double progress = 0;
        //    long max = 100000;
        //    for (long i = 0; i < max; i++)
        //    {
        //        int step = (int)((((double)i) / ((double)max)) * 100.0);
        //        if (step != progress)
        //        {
        //            _log.DebugFormat("progress {0}", progress);
        //            progress = step;
        //        }
                
        //    }
        //}


    }
}
